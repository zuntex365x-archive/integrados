<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.Win.C1FlexGrid.RowDetails.4.5.2</name>
  </assembly>
  <members>
    <member name="T:C1.Win.C1FlexGrid.C1FlexGridRowDetail">
      <summary>
            Represents the user control with <see cref="F:C1.Win.C1FlexGrid.C1FlexGridRowDetail.C1FlexGrid" /> in its controls collection.
            This user control implements IC1FlexGridRowDetail interface for C1FlexGrid row details feature.
            </summary>
      <remarks>
            To edit <see cref="F:C1.Win.C1FlexGrid.C1FlexGridRowDetail.C1FlexGrid" /> instance in DesignTime derive new control from <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRowDetail" />.
            Derived control can be opened in designer and inner <see cref="F:C1.Win.C1FlexGrid.C1FlexGridRowDetail.C1FlexGrid" /> can be setup.
            </remarks>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1FlexGridRowDetail.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRowDetail" /> control.
            </summary>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1FlexGridRowDetail.Setup(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
      <summary>
            Used to setup control before showing of it.
            </summary>
      <param name="parentGrid">FlexGrid which displays detail control.</param>
      <param name="rowIndex">Index of parent detail row.</param>
      <remarks>
            This method can be overridden in the derived class to apply custom setup behavior of <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRowDetail" /> control.
            </remarks>
      <example>
            The code below shows the hiding of unnecessary grid column:
            <code>
            public override void Setup(C1FlexGrid parentGrid, int rowIndex)
            {
                // calling base implementation
                base.Setup(parentGrid, rowIndex);
                
                // store C1FlexGrid columns in the variable
                var cols = C1FlexGrid.Cols;
                
                // hide third column
                cols[3].Visible = false;
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1FlexGridRowDetail.UpdateSize(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Drawing.Size)">
      <summary>
            Used to update size of the control.
            </summary>
      <param name="parentGrid">FlexGrid which displays detail control.</param>
      <param name="rowIndex">Index of parent detail row.</param>
      <param name="proposedSize">The proposed size for the detail control.</param>
      <remarks>
            This method can be overridden in the derived class to apply custom update size behavior of <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRowDetail" /> control.
            </remarks>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1FlexGridRowDetail.Removing(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
      <summary>
            Used to release resources of the control before the removing of it.
            </summary>
      <param name="parentGrid">FlexGrid which displays detail control.</param>
      <param name="rowIndex">Index of parent detail row.</param>
      <remarks>
            This method can be overridden in the derived class to apply custom removing behavior of <see cref="T:C1.Win.C1FlexGrid.C1FlexGridRowDetail" /> control.
            </remarks>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1FlexGridRowDetail.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="F:C1.Win.C1FlexGrid.C1FlexGridRowDetail.C1FlexGrid">
      <summary>
            The instance of the <see cref="F:C1.Win.C1FlexGrid.C1FlexGridRowDetail.C1FlexGrid" /> control.
            </summary>
    </member>
    <member name="T:C1.Win.C1FlexGrid.C1InputPanelRowDetail">
      <summary>
            Represents the user control with <see cref="T:C1.Win.C1InputPanel.C1InputPanel" /> in its controls collection.
            This user control implements IC1FlexGridRowDetail interface for C1FlexGrid row details feature.
            </summary>
      <remarks>
            To edit <see cref="T:C1.Win.C1InputPanel.C1InputPanel" /> instance in DesignTime derive new control from <see cref="T:C1.Win.C1FlexGrid.C1InputPanelRowDetail" />.
            Derived control can be opened in designer and inner <see cref="T:C1.Win.C1InputPanel.C1InputPanel" /> can be setup.
            </remarks>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1InputPanelRowDetail.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1FlexGrid.C1InputPanelRowDetail" /> control.
            </summary>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1InputPanelRowDetail.Setup(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
      <summary>
            Used to setup control before showing of it.
            </summary>
      <param name="parentGrid">FlexGrid which displays detail control.</param>
      <param name="rowIndex">Index of parent detail row.</param>
      <remarks>
            This method can be overridden in the derived class to apply custom setup behavior of <see cref="T:C1.Win.C1FlexGrid.C1InputPanelRowDetail" /> control.
            </remarks>
      <example>
            The code below shows the removing unnecessary input component:
            <code>
            public override void Setup(C1FlexGrid parentGrid, int rowIndex)
            {
                // calling base implementation
                base.Setup(parentGrid, rowIndex);
                
                // store C1InputPanel items in the variable
                var items = C1InputPanel.Items;
                
                // remove label for third InputComponent
                items.RemoveAt(3);
                
                // remove third InputComponent
                items.RemoveAt(3);
            }
            </code>
            The code below shows the adding and setup of new InputImage item:
            <code>
            public override void Setup(C1FlexGrid parentGrid, int rowIndex)
            {
                // calling base implementation
                base.Setup(parentGrid, rowIndex);
                
                // store C1InputPanel items in the variable
                var items = C1InputPanel.Items;
                
                // initialize new instance of InputImage
                var photoInputImage = new InputImage();
                
                // assign corresponding data field
                photoInputImage.DataField = "Photo";
                
                // assign C1Input data source as item data source
                photoInputImage.DataSource = C1InputPanel.DataSource;
                
                // assign new width width and height
                photoInputImage.Width = 150;
                photoInputImage.Height = 150;
                
                // place next items in the new column
                photoInputImage.Break = BreakType.Column;
                
                // insert InputImage into items collection at third position
                items.Insert(3, photoInputImage);
            }
            </code></example>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1InputPanelRowDetail.UpdateSize(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Drawing.Size)">
      <summary>
            Used to update size of the control.
            </summary>
      <param name="parentGrid">FlexGrid which displays detail control.</param>
      <param name="rowIndex">Index of parent detail row.</param>
      <param name="proposedSize">The proposed size for the detail control.</param>
      <remarks>
            This method can be overridden in the derived class to apply custom update size behavior of <see cref="T:C1.Win.C1FlexGrid.C1InputPanelRowDetail" /> control.
            </remarks>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1InputPanelRowDetail.Removing(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
      <summary>
            Used to release resources of the control before the removing of it.
            </summary>
      <param name="parentGrid">FlexGrid which displays detail control.</param>
      <param name="rowIndex">Index of parent detail row.</param>
      <remarks>
            This method can be overridden in the derived class to apply custom removing behavior of <see cref="T:C1.Win.C1FlexGrid.C1InputPanelRowDetail" /> control.
            </remarks>
    </member>
    <member name="M:C1.Win.C1FlexGrid.C1InputPanelRowDetail.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="F:C1.Win.C1FlexGrid.C1InputPanelRowDetail.C1InputPanel">
      <summary>
            The instance of the <see cref="T:C1.Win.C1InputPanel.C1InputPanel" /> control.
            </summary>
    </member>
    <member name="T:C1.Win.C1FlexGrid.Localization.RowDetailsStrings">
      <summary>
            The <see cref="T:C1.Win.Strings" /> class contains static properties used for localization.
            </summary>
    </member>
    <member name="P:C1.Win.C1FlexGrid.Localization.RowDetailsStrings.ResourceManager">
      <summary>
            The <see cref="P:C1.Win.C1FlexGrid.Localization.RowDetailsStrings.ResourceManager" /> object used for lookup resources.
            </summary>
      <remarks>Set this property to the valid value if 
            you define resources in a Custom Control assembly.</remarks>
    </member>
    <member name="P:C1.Win.C1FlexGrid.Localization.RowDetailsStrings.UICulture">
      <summary>
            Returns default <see cref="T:System.Globalization.CultureInfo" /> object used as fallback culture.
            </summary>
    </member>
  </members>
</doc>