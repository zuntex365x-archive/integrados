<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1ReportDesigner.4.5.2</name>
    </assembly>
    <members>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default end user localize options for property, field or class.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:C1.Win.Localization.EndUserLocalizeOptionsAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute"/> attribute.
            </summary>
            <param name="exclude"></param>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.ExcludedMembers">
            <summary>
            Defines a list of members of control that should be excluded from localization.
            Currently used only AddControlToResources application for automatically generating
            control resources.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1DescriptionAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1DescriptionAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific string description.</param>
            <param name="description">Default non-localized description text.</param>
        </member>
        <member name="M:C1.Win.Localization.C1DescriptionAttribute.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1DescriptionAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific string description.</param>
            <param name="formatDescription">Default non-localized description text.</param>
            <param name="ag0">Argument for formatDescription parameter.</param>
        </member>
        <member name="P:C1.Win.Localization.C1DescriptionAttribute.Description">
            <summary>
            Returns localized description text if it is available or default value 
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.Localization.C1CategoryAttribute"/> attribute.
            </summary>
            <param name="stringsType">The <see cref="T:System.Type"/> defining string properties.</param>
            <param name="key">The key value used to keep specific category.</param>
            <param name="categoryName">Default non-localized category name.</param>
        </member>
        <member name="M:C1.Win.Localization.C1CategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Looks up the localized name of the specified category.
            </summary>
            <param name="value">The identifer for the category to look up.</param>
            <returns>The localized name of the category, or null if a localized name does not exist.</returns>
        </member>
        <member name="T:C1.Win.Localization.StringsManager">
            <summary>
            The utility class which handles localization tasks.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetResourceStream(System.String,System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Searches for standard resources which looks like BlaBla.Strings.CultureName.resx,
            like C1.Win.C1Preview.Strings.zh.resx or C1.Win.C1Preview.Strings.resx etc.
            Ensures that resource is not *C1* built-in resource, i.e. its name DOES NOT HAVE format
            like
            CultureName.BlaBla.Strings.resx, otherwise bug can occur if entry assembly 
            have C1 builtin resources as in case of C1 executables like C1ThemeDesigner or C1FlexReportDesigner.
            For example C1ThemeDesigner have ja.C1ThemeDesigner.Strings.resx resource
            and this resource *SHOULD BE IGNORED* if  resouceName is "C1ThemeDesigner.Strings.resx" and
            cultureName is "" (invariant).
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <param name="searchInSatelliteOnly"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="cultureName">The culture name to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.Dock_SizeMode">
            <summary>
            Used in:
            C1DockingTab\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Normal">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.Fit">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Dock_SizeMode.FillToEnd">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsHeaderOnly">
            <summary>
            Borders are shown only for headers of columns.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.ColumnsLineOnly">
            <summary>
            Only left and right borders of columns are shown.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TreeViewBorderStyleEnum.Full">
            <summary>
            Borders are shown for all cells.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.CheckBoxStyleEnum">
            <summary>
            Used in:
            C1TreeView\Style
            C1MultiSelect\C1CheckList\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.System">
            <summary>
            Standard system view.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Black">
            <summary>
            Like a MS Office 2007 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Blue">
            <summary>
            Like a MS Office 2007 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2007Silver">
            <summary>
            Like a MS Office 2007 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Black">
            <summary>
            Like a MS Office 2010 Black.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Blue">
            <summary>
            Like a MS Office 2010 Blue.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2010Silver">
            <summary>
            Like a MS Office 2010 Silver.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Office2013">
            <summary>
            Like a MS Office 2013.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.CheckBoxStyleEnum.Windows10">
            <summary>
            Like a Windows 10.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundPictureDrawModeEnum.Fill">
            <summary>
            The image is stretched and aspect ratio is saved.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.BorderType">
            <summary>
            Used in:
            C1TrueDBGrid\GridBorder
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.None">
            <summary>
            No borders.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Flat">
            <summary>
            Borders have a Flat appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Raised">
            <summary>
            Borders have a 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Inset">
            <summary>
            Borders have a 3D inset appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Groove">
            <summary>
            A line around the inside of the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.Fillet">
            <summary>
            A fillet type border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.RaisedBevel">
            <summary>
            Borders have a 3D raised with a bevel.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BorderType.InsetBevel">
            <summary>
            Borders have a 3D inset with a bevel.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ForegroundPicturePosition">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Near">
            <summary>
            Image is rendered in the near side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.Far">
            <summary>
            Image is rendered in the far side of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.LeftOfText">
            <summary>
            Image is rendered to the left of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.RightOfText">
            <summary>
            Image is rendered to the right of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TopOfText">
            <summary>
            Image is rendered on top of any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.BottomOfText">
            <summary>
            Image is rendered below any text in the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.PictureOnly">
            <summary>
            Text is not displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ForegroundPicturePosition.TextOnly">
            <summary>
            Image is not displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignHorzEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.General">
            <summary>
            Text is aligned Near and numeric values Far
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Near">
            <summary>
            Text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Center">
            <summary>
            Text is aligned centered.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Far">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignHorzEnum.Justify">
            <summary>
            Text is aligned with respect to the cells boundries.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.AlignVertEnum">
            <summary>
            Used in:
            C1TrueDBGrid\Style
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Top">
            <summary>
            Text is rendered at the top of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Center">
            <summary>
            Text is rendered at the center of the cell.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.AlignVertEnum.Bottom">
            <summary>
            Text is rendered at the bottom of the cell.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.LineStyle">
            <summary>
            Used in:
            C1TrueDBGrid\GridLines
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Single">
            <summary>
            Single line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Double">
            <summary>
            Double line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Raised">
            <summary>
            Line with 3D raised appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.LineStyle.Inset">
            <summary>
            Line with 3D inset appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.PaletteType">
            <summary>
            Used in:
            C1Schedule\PaletteType
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2007">
            <summary>
            Office 2007 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2010">
            <summary>
            Office 2010 palette includes back and border colors 
            of free and working hours and days, day headers, grid borders 
            and calendar tabs. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016">
            <summary>
            Office 2016 palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.PaletteType.Office2016Dark">
            <summary>
            Office 2016 dark palette includes accent color to use in calendar headers and additional darker color for current day.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.GroupTabStyle">
            <summary>
            Used in:
            C1Schedule\GroupTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.FullWidth">
            <summary>
            Group headers of rectangular shape take the full width of the corresponding group.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2007">
            <summary>
            Group headers of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GroupTabStyle.Office2016">
            <summary>
            Group headers of Office2016 appearance.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.WeekTabStyle">
            <summary>
            Used in:
            C1Schedule\WeekTabStyle
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2007">
            <summary>
            Week tabs of Office2007 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.WeekTabStyle.Office2016">
            <summary>
            Week tabs of Office2016 appearance.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.None">
            <summary>
            Use no background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Automatic">
            <summary>
            Use a gradient that matches the current system Visual Style.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Silver">
            <summary>
            Use a silver background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Blue">
            <summary>
            Use a blue background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Gold">
            <summary>
            Use a gold background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Olive">
            <summary>
            Use an olive background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.BackgroundGradient.Vista">
            <summary>
            Use the Vista-style background gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.None">
            <summary>
            No gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Horizontal">
            <summary>
            Horizontal gradient (left to right).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Vertical">
            <summary>
            Vertical gradient (top to bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalDown">
            <summary>
            Diagonal gradient (left-top to right-bottom).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.DiagonalUp">
            <summary>
            Diagonal gradient (left-bottom to right-top).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.GradientMode.Radial">
            <summary>
            Radial gradient.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightTop">
            <summary>
            Image is vertically aligned at the top, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the left. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned at the center. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightCenter">
            <summary>
            Image is vertically aligned in the middle, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.LeftBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the left. 		
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.CenterBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageAlignment.RightBottom">
            <summary>
            Image is vertically aligned at the bottom, 
            and horizontally aligned on the right. 
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Clip">
            <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Stretch">
            <summary>
            Stretch the image to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Scale">
            <summary>
            Scale the image to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Tile">
            <summary>
            Tile the image to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretch">
            <summary>
            Tile the image into the 3x3 matrix and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchHorizontal">
            <summary>
            Tile the image into the row of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.TileStretchVertical">
            <summary>
            Tile the image into the column of 3 images and stretch it to fill the display area.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageScaling.Hide">
            <summary>
            Hide the image.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.NotSet">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Near">
            <summary>
            Near.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Far">
            <summary>
            Far.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Alignment.Spread">
            <summary>
            Spread.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Normal">
            <summary>
            Text is drawn in the horizontal direction, left to right.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Up">
            <summary>
            Text is draw vertically, from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.TextDirection.Down">
            <summary>
            Text is draw vertically, from the top down.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.RadialMenuTooltipPosition.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ImageSetEnum">
            <summary>
            Describes the image set used for toolbar images of the
            preview actions.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Classic">
            <summary>
            Classic image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP">
            <summary>
            XP image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP2">
            <summary>
            XP alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.XP3">
            <summary>
            XP second alternative image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Adobe">
            <summary>
            Adobe image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.OsX">
            <summary>
            Os X image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ImageSetEnum.Original">
            <summary>
            Original (C1Preview "classic") image set.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Both">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderDirEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_BorderStyleEnum.Dotted">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.TextOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.ImageOnly">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Overlay">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.Stack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_DisplayEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_ImageAlignEnum.TileStretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.LeftBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.CenterBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.RightBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralTop">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextAlignEnum.GeneralBottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Normal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Up">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextDirectionEnum.Down">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Flat">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TextEffectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Lines">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Symbols">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.ButtonBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Leaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Complete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.Simple">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.CompleteLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_TreeStyleFlags.SimpleLeaf">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Light">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Heavy">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Flex_FocusRectEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.ThickBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomBar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.TopLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.MiddleLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.BottomLine">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.Frame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_BarShape.HalfFrame">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.SolidBrush">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Gradient">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.Confetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_HatchPattern.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Name">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Mode">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Calendar">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Duration">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.DurationUnits">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Start">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Finish">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.PercentComplete">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Deadline">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintType">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ConstraintDate">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Predecessors">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.ResourceNames">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_TaskProperty.Notes">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dash">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.Dot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Gantt_ProgressLineStyle.DashDotDot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Azure">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Blue">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Green">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orange">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Orchid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Red">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Teal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeColor.Violet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.LightGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Colorful">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.Black">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.DarkGray">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Ribbon365_ThemeLightness.White">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.CopyCurrentToCustom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Custom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Standard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Office">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.GrayScale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Apex">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Aspect">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Civic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Concourse">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Equity">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Flow">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Foundry">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Median">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Metro">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Module">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Opulent">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Oriel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Origin">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Paper">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Solstice">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Technic">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Trek">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Urban">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_ColorGeneration.Verve">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.HorizontalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.VerticalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Diagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBack">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.DiagonalBackCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.Radial">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_GradientStyleEnum.FromCenter">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Horizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Vertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ForwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.BackwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Cross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalCross">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent05">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent10">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent20">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent25">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent30">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent40">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent50">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent60">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent70">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent75">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent80">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Percent90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.WideUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LightHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.NarrowHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DarkHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedDownwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedUpwardDiagonal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedHorizontal">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DashedVertical">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeConfetti">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.ZigZag">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Wave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DiagonalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.HorizontalBrick">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Weave">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Plaid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Divot">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.DottedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Shingle">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Trellis">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.Sphere">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallGrid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SmallCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.LargeCheckerBoard">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.OutlinedDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_HatchStyleEnum.SolidDiamond">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Hide">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Left">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Right">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Top">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Bottom">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Center">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Scale">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Stretch">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_AlignImageEnum.Tile">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate0">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate90">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate180">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_RotationEnum.Rotate270">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.NotSet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.None">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Empty">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Solid">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Raised">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Inset">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.RaisedBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.InsetBevel">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Groove">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Fillet">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Double">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Dashed">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.Chart_BorderStyleEnum.Opaque">
            <summary>For internal use.</summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Custom">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.System">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2007Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Black">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2010Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Windows7">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPBlue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPSilver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WinXPOlive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Royale">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Yahoo">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Aero">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Blue">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Olive">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Office2003Silver">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.OfficeXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.Classic">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVisualStyle.WindowsXP">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.None">
            <summary>
            Hides the border.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1GaugeBorderStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.None">
            <summary>
            No gradient filling.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Horizontal">
            <summary>
            From left (first color) to right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.HorizontalCenter">
            <summary>
            From center (first color) to left and right (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Vertical">
            <summary>
            From top (first color) to bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.VerticalCenter">
            <summary>
            From center (first color) to top and bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Diagonal">
            <summary>
            From left-bottom (first color) to right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalCenter">
            <summary>
            From center (first color) to left-bottom and right-top (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBack">
            <summary>
            From left-top (first color) to right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.DiagonalBackCenter">
            <summary>
            From center (first color) to left-top and right-bottom (second color).
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.Radial">
            <summary>
            From center (first color) to corners (second color) in radial direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.C1MapGradientStyle.FromCenter">
            <summary>
            From center (first color) to corners (second color).
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.IC1ThemeControl.ThemeChanged(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="theme"></param>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeBrushBase">
            <summary>
            Abstract base class for all classes representing a brush in a theme.
            Use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method to get an actual matching GDI+ brush.
            Classes derived from <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> override Equals() and
            GetHashCode() methods and compare objects by content rather than by references.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/>.
            </summary>
            <returns>The <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> this method creates.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Returns a GDI+ brush matching the theme brush.
            It is the caller's responsibility to dispose this brush when it is no longer needed.
            </summary>
            <param name="brushRect">The brush rectangle (used for gradient brushes).</param>
            <returns>The GDI+ <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.DependOnRect">
            <summary>
            Returns true if a GDI+ brush created for this theme brush depends on the rectangle
            passed to the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushBase.GetBrush(System.Drawing.Rectangle)"/> method. E.g. gradient brushes return
            true in this method while solid return false.
            </summary>
            <returns>True if the GDI+ brush depends on the application area, false otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.EncodeToString">
            <summary>
            Encodes this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object to string.
            </summary>
            <returns>String represengin this <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.IsBrushesEqual(C1.Win.C1Themes.Shared.ThemeBrushBase,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Checks whether the two <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> objects are equal by value
            (i.e. represent identically described theme brushes).
            </summary>
            <param name="tb1">First <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="tb2">Second <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <returns>True if the two brushes are identical, or are both null.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushBase.TryDecodeFromString(System.String,C1.Win.C1Themes.Shared.ThemeBrushBase@)">
            <summary>
            Create <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object from specified string.
            </summary>
            <param name="s">String representing <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object.</param>
            <param name="value"><see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> object created from string.</param>
            <returns>True if string was successfully parsed, false otherwise.</returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeSolidBrush">
            <summary>
            Represents a solid theme brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a GDI+ <see cref="T:System.Drawing.SolidBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeSolidBrush"/> object.
            Can return null if color is not specified or transparent.
            </summary>
            <param name="brushRect">Target application area for the brush (ignored).</param>
            <returns>A <see cref="T:System.Drawing.SolidBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeSolidBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeSolidBrush.Color">
            <summary>
            Gets or sets the color of this solid brush.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeGradientBrush">
            <summary>
            Abstract base class for gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeGradientBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeLinearBrush">
            <summary>
            Abstract base class for linear gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled,
            same as LinearGradientBrush.GammaCorrection.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeLinearBrush.Angle">
            <summary>
            Gets or sets the angle, measured in degrees clockwise from the x-axis,
            of the gradient's orientation line. 
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush">
            <summary>
            Represents a linear gradient brush based on the starting and ending colors,
            and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.StartColor">
            <summary>
            Gets or sets the starting gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.EndColor">
            <summary>
            Gets or sets the ending gradient color.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorLinearBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush">
            <summary>
            Represents a multicolor linear gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush"/> object.
            </summary>
            <param name="brushRect">Gradient brush rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorLinearBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeRadialBrush">
            <summary>
            Abstract base class for radial gradient theme brushes.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.CreateBrush(System.Drawing.Rectangle)">
            <summary>
            For internal use.
            </summary>
            <param name="brushRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeRadialBrush.DependOnRect">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeRadialBrush.Center">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Point"/> structure that defines position
            of center point.
            (0,0) is the top-left corner, (100,100) is the bottom-right corner.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush">
            <summary>
            Represents a radial gradient brush based on center point,
            surrounding color and a <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.CenterColor">
            <summary>
            Gets or sets the color at the center of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.SurroundColor">
            <summary>
            Gets or sets the surrounding color of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1Themes.Shared.ThemeTwoColorRadialBrush.Blend"/> object. Can be null.
            </summary>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush">
            <summary>
            Represents a multicolor radial gradient brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.EncodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.DecodeValues(C1.Win.C1Themes.Shared.Utils.ValuesStore)">
            <summary>
            For internal use.
            </summary>
            <param name="store"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.AssignFrom(C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Overridden, assigns (copies) properties from another <see cref="T:C1.Win.C1Themes.Shared.ThemeBrushBase"/> to the current object.
            </summary>
            <param name="source">The source object to copy properties from.</param>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetBrush(System.Drawing.Rectangle)">
            <summary>
            Overridden, creates a <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> matching this <see cref="T:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush"/> object.
            </summary>
            <param name="brushRect">The gradient rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.PathGradientBrush"/> object.</returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.Equals(System.Object)">
            <summary>
            For internal use.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.GetHashCode">
            <summary>
            For internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeMultiColorRadialBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend"/> that defines this multicolor radiant gradient.
            </summary>
        </member>
        <member name="P:C1.Win.C1Themes.Shared.ThemeBrushHelper.ForeignBrush">
            <summary>
            Gets or sets a brush object which is stored but not managed by this ThemeBrushHelper -
            i.e. it will not be disposed when this ThemeBrushHelper is disposed, or a new brush is
            assigned to it.
            Note that while the 'get' accessor is provided for this property, there is no need to use it -
            just use the <see cref="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.GetBrush(System.Drawing.Rectangle)"/> method to get a usable GDI+ brush.
            </summary>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.ThemeBrushHelper.CreateThemeBrushNoTransparentOrEmpty(C1.Win.C1Themes.Shared.C1ThemeProxy,System.String,C1.Win.C1Themes.Shared.ThemeBrushBase)">
            <summary>
            Creates brush based on specified theme path.
            Returns defaultValue if brush can not be created or it is solid and color is transparent or empty.
            </summary>
            <param name="themeProxy"></param>
            <param name="path"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsBlendEqual(System.Drawing.Drawing2D.Blend,System.Drawing.Drawing2D.Blend)">
            <summary>
            For internal use.
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.IsColorBlendEqual(System.Drawing.Drawing2D.ColorBlend,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            For internal use.
            </summary>
            <param name="cb1"></param>
            <param name="cb2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.GradientModeToAngle(C1.Win.C1Themes.Shared.GradientMode)">
            <summary>
            For internal use.
            </summary>
            <param name="gradientMode"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1Themes.Shared.Utils.Utils.AngleToGradientMode(System.Single)">
            <summary>
            For internal use.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Win.C1Themes.Shared.ThemeVersions">
            <summary>
            Versions of c1theme XML.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_PlatformVersionPrefix">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_InitialFormatVersion">
            <summary>
            First public versions of C1Themes.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewBackgroundsFormatVersion">
            <summary>
            Version of theme XML when structure of BackgroundProp was changed.
            </summary>
        </member>
        <member name="F:C1.Win.C1Themes.Shared.ThemeVersions.c_NewRibbonFormatVersion">
            <summary>
            Version of theme XML when structure of C1Ribbon theme was changed
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.ClipboardHandler">
            <summary>
            Provides clipboard support for the <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> control. 
            </summary>
            <remarks>
            The <b>ClipboardHandler</b> class has methods for copying and pasting report fields to and from 
            the clipboard, and for detecting the selection and clipboard status.
            </remarks>
            <example>
            The example below shows how you can use the <b>ClipboardHandler</b> class to provide clipboard 
            commands in your report designer application.
            <code>
            // handle clipboard commands (for reports and fields)
            private void HandleClipboard(ToolBarButton cmd)
            {
                // save undo state for all but copy
                if (cmd != _btnCopy)
                {
                    _designer.UndoStack.SaveState();
                    _dirty = true;
                }
                
                // execute command
                ClipboardHandler clip = _designer.ClipboardHandler;
                if (cmd == _btnCut)    clip.Cut();
                if (cmd == _btnCopy)   clip.Copy();
                if (cmd == _btnPaste)  clip.Paste();
                if (cmd == _btnDelete) clip.Delete();
                
                // update UI when done
                UpdateUI();
            }
            
            // update UI (_menus, toolbars, etc)
            private void UpdateUI()
            {
                _btnUndo.Enabled   = _designer.UndoStack.CanUndo;
                _btnRedo.Enabled   = _designer.UndoStack.CanRedo;
                _btnCut.Enabled    = _btnCopy.Enabled = 
                _btnDelete.Enabled = _designer.ClipboardHandler.CanCut;
                _btnPaste.Enabled  = _designer.ClipboardHandler.CanPaste;
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.ClipboardHandler.CanCut">
            <summary>
            Determines whether the current selection can be cut/copied to the clipboard 
            (returns true if there is at least one field selected).
            </summary>
            <remarks>This property is useful for enabling or disabling clipboard buttons 
            and menus on the application.</remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.ClipboardHandler.CanPaste">
            <summary>
            Determines whether the clipboard contains data that can be pasted into the report.
            </summary>
            <remarks>This property is useful for enabling or disabling clipboard buttons 
            and menus on the application.</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.ClipboardHandler.Cut">
            <summary>
            Cuts the current selection to the clipboard, removing all selected fields from the report.
            </summary>
            <returns>Returns false if there is no selection to cut.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.ClipboardHandler.Copy">
            <summary>
            Copies the current selection to the clipboard.
            </summary>
            <returns>Returns false if there is no selection to copy.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.ClipboardHandler.Delete">
            <summary>
            Removes all selected fields from the report.
            </summary>
            <returns>Returns false if there is no selection to delete.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.ClipboardHandler.Paste">
            <summary>
            Copies a collection of fields from the clipboard to the report, 
            adding them to the current section.
            </summary>
            <returns>Returns false if there is no fields in clipboard.</returns>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.Design.ReportDesignerDesigner">
            <summary>
            Used to design ReportDesigner.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Design.ReportDesignerDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            For internal use.
            </summary>
            <param name="component"></param>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.CreateFieldEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateField"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.CreateFieldEventArgs">
            <summary>
            Contains data for the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateField"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.CreateFieldEventArgs.Section">
            <summary>
            Section where the new field should be created.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.CreateFieldEventArgs.ClientBounds">
            <summary>
            Rectangle where the new field should be created, in client coordinates (pixels).
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.CreateFieldEventArgs.FieldBounds">
            <summary>
            Rectangle where the new field should be created, in report coordinates (twips).
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.CreateFieldEventArgs.CreateFieldInfo">
            <summary>
            Object set by the caller with additional information about the new field 
            (same as <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateFieldInfo"/> property).
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.CreateFieldEventArgs.#ctor(C1.C1Report.Section,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Object)">
            <summary>
            Inializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.CreateFieldEventArgs"/> class.
            </summary>
            <param name="section">Section where the new field will be created.</param>
            <param name="rcClient">Rectangle where the new field will be created (client coordinates).</param>
            <param name="rcField">Rectangle where the new field will be created (report coordinates).</param>
            <param name="creatorInfo">Object with additional information about the field to be created.</param>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.MoveCopyFieldsEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.MoveCopyFields"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.MoveCopyFieldsEventArgs">
            <summary>
            Contains data for the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.MoveCopyFields"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.MoveCopyFieldsEventArgs.AllowMove">
            <summary>
            Set to false to prevent the user from moving the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.MoveCopyFieldsEventArgs.AllowCopy">
            <summary>
            Set to false to prevent the user from copying the field.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.MoveCopyFieldsEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.MoveCopyFieldsEventArgs"/> class.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.ResizeFieldSectionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ResizeFieldSection"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.ResizeFieldSectionEventArgs">
            <summary>
            Contains data for the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ResizeFieldSection"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.ResizeFieldSectionEventArgs.HitTestInfo">
            <summary>
            <see cref="F:C1.Win.C1ReportDesigner.ResizeFieldSectionEventArgs.HitTestInfo"/> object containing information about 
            the field or section being resized.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.ResizeFieldSectionEventArgs.Cancel">
            <summary>
            Gets or sets a value that determines whether the operation should be canceled.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.ResizeFieldSectionEventArgs.#ctor(C1.Win.C1ReportDesigner.HitTestInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.ResizeFieldSectionEventArgs"/> class.
            </summary>
            <param name="ht"><see cref="F:C1.Win.C1ReportDesigner.ResizeFieldSectionEventArgs.HitTestInfo"/> value that describes the element being resized.</param>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.DeleteFieldEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.DeleteField"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.DeleteFieldEventArgs">
            <summary>
            Contains data for the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.DeleteField"/> event.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.DeleteFieldEventArgs.Cancel">
            <summary>
            Gets or sets a value that determines whether the operation should be canceled.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.DeleteFieldEventArgs.#ctor">
            <summary>
            Inializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.DeleteFieldEventArgs"/> class.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.RenderFieldEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderField"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.RenderFieldEventArgs">
            <summary>
            Contains data for the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderField"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.RenderFieldEventArgs.#ctor(C1.Win.C1ReportDesigner.C1ReportDesigner,System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Report.Field,C1.C1Report.Section,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.RenderFieldEventArgs"/> class.
            </summary>
            <param name="owner"><see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> object that contains the design surface.</param>
            <param name="g"><see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Graphics"/> object where the field will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/>, in client coordinates, where the field will be rendered.</param>
            <param name="field"><see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Field"/> that will be rendered.</param>
            <param name="section"><see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Section"/> that contains the field.</param>
            <param name="text">String that contains the text that will be rendered in the field.</param>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Graphics">
            <summary>
            Gets the <see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Graphics"/> object where the field will be rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Bounds">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> where the field will be rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Field">
            <summary>
            Gets the <see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Field"/> object that will be rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Section">
            <summary>
            Gets the <see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Section"/> that contains the field.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Text">
            <summary>
            Gets or sets the text that will be displayed by the designer in the field.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Handled">
            <summary>
            Gets or sets a value that determines whether the event has been handled.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Render">
            <summary>
            Renders the field into the designer surface.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.RenderSectionHeaderEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderSectionHeader"/> event.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs">
            <summary>
            Contains data for the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderSectionHeader"/> event.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.#ctor(C1.Win.C1ReportDesigner.C1ReportDesigner,System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Report.Section,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs"/> class.
            </summary>
            <param name="owner"><see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> object that contains the design surface.</param>
            <param name="g"><see cref="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Graphics"/> object where the section header will be rendered.</param>
            <param name="bounds"><see cref="T:System.Drawing.Rectangle"/>, in client coordinates, where the section header will be rendered.</param>
            <param name="section"><see cref="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Section"/> that that owns the section header.</param>
            <param name="sectionText">String that describes the section.</param>
            <param name="groupText">String that describes the group.</param>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Graphics">
            <summary>
            Gets the <see cref="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Graphics"/> object where the section header will be rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Bounds">
            <summary>
            Gets the <see cref="T:System.Drawing.Rectangle"/> where the section header will be rendered.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Section">
            <summary>
            Gets the <see cref="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Section"/> that owns the section header.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.SectionDescription">
            <summary>
            Gets or sets the text that describes the Section.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.GroupDescription">
            <summary>
            Gets or sets the text that describes the Group that owns the section.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Handled">
            <summary>
            Gets or sets a value that determines whether the event has been handled.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs.Render">
            <summary>
            Renders the section header into the designer surface.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.GridUnitsEnum">
            <summary>
            Use the members of this enumeration to set the value of 
            the <see cref="P:C1.Win.C1ReportDesigner.Grid.Units"/> property in the <see cref="T:C1.Win.C1ReportDesigner.Grid"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.GridUnitsEnum.Auto">
            <summary>
            Set the grid units based on system settings.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.GridUnitsEnum.Metric">
            <summary>
            Use metric units of measurement (cm, mm).
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.GridUnitsEnum.English">
            <summary>
            Use English units of measurement (inches).
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.GridUnitsEnum.Custom">
            <summary>
            Use custom units of measurement (twips).
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.Grid">
            <summary>
            The Grid object controls the appearance and behavior of the design grid.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Grid.Visible">
            <summary>
            Gets or sets whether the grid is visible.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Grid.Snap">
            <summary>
            Gets or sets whether mouse editing actions should snap to grid measurements.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Grid.Units">
            <summary>
            Gets or sets the grid units (Metric, English, Automatic, or Custom).
            </summary>
            <see cref="T:C1.Win.C1ReportDesigner.GridUnitsEnum"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Grid.CustomSpacing">
            <summary>
            Gets or sets the number of twips per tick mark when the <see cref="P:C1.Win.C1ReportDesigner.Grid.Units"/> property is set to <b>Custom</b>.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Grid.ColorMajor">
            <summary>
            Gets or sets the color of the major grid lines.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Grid.ColorMinor">
            <summary>
            Gets or sets the color of the minor grid lines.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Grid.PixelsPerTick">
            <summary>
            Gets the number of pixels between grid tick marks.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.HitCodeEnum">
            <summary>
            Use the members of this enumeration to set the value of 
            the <see cref="P:C1.Win.C1ReportDesigner.HitTestInfo.Code"/> property in the <see cref="T:C1.Win.C1ReportDesigner.HitTestInfo"/> structure.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.Nowhere">
            <summary>
            The upper left corner of the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.Empty">
            <summary>
            The empty design area to the right and below the report.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.RulerHorz">
            <summary>
            The horizontal ruler.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.RulerVert">
            <summary>
            The vertical ruler.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.EdgeRight">
            <summary>
            The right edge of the report.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.EdgeBottom">
            <summary>
            The bottom edge of the report.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.SectionHdr">
            <summary>
            The section header.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.SectionBox">
            <summary>
            The section box.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.SortBox">
            <summary>
            The sort box.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.Section">
            <summary>
            The specified section.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitCodeEnum.Field">
            <summary>
            The specified field.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.HitHandleFlags">
            <summary>
            Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1ReportDesigner.HitTestInfo.HitHandleFlags"/> property in the <see cref="T:C1.Win.C1ReportDesigner.HitTestInfo"/> Structure.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.None">
            <summary>
            The center of the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.Left">
            <summary>
            The left edge of the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.Center">
            <summary>
            The center of the horizontal edge.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.Right">
            <summary>
            The right edge of the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.Horz">
            <summary>
            Any horizontal flag (Left | Center | Right).
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.Top">
            <summary>
            The top edge of the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.CenterV">
            <summary>
            The center of the vertical edge.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.Bottom">
            <summary>
            The bottom edge of the field.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.HitHandleFlags.Vert">
            <summary>
            Any vertical flag (Top | CenterV | Bottom).
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.HitTestInfo">
            <summary>
            HitTestInfo represents hit-testing information for the report.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.Code">
            <summary>
            Gets a code that determines the type of element at the given point.
            </summary>
            <seealso cref="T:C1.Win.C1ReportDesigner.HitCodeEnum"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.HitHandleFlags">
            <summary>
            Gets a set of flags that determines whether the point is on a field resizing handle 
            (a field has eight handles, one at each corner and one along each edge).
            </summary>
            <seealso cref="P:C1.Win.C1ReportDesigner.HitTestInfo.HitHandleFlags"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.X">
            <summary>
            Get the client coordinates of the point.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.Y">
            <summary>
            Get the client coordinates of the point.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.Point">
            <summary>
            Gets the point.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.Field">
            <summary>
            Gets the field at the given point (or null if there is no field there).
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.Section">
            <summary>
            Gets the section at the given point (or null if the point is outside the design area).
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.SectionX">
            <summary>
            Gets the position in section coordinates (twips, relative to the left of the section).
            </summary>
            <remarks>
            This value takes into account the current scroll position.
            </remarks>
            <example>
            The code below takes a point in client coordinates and obains the x position relative to
            the section at that point.
            <code>
            HitTestInfo hti = c1rd.HitTest(clientX, clientY);
            double sectionX = hti.SectionX; // x position in section coordinates (in twips)
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.HitTestInfo.SectionY">
            <summary>
            Gets the position in section coordinates (twips, relative to the top of the section). 
            </summary>
            <remarks>
            This value takes into account the current scroll position.
            </remarks>
            <example>
            The code below takes a point in client coordinates and obains the y position relative to
            the section at that point.
            <code>
            HitTestInfo hti = c1rd.HitTest(clientX, clientY);
            double sectionY = hti.SectionY; // y position in section coordinates (in twips)
            </code>
            </example>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.KeyboardHandler">
            <summary>
            Summary description for KeyboardHandler.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.Strings">
            <summary>
            Static class containing UI strings used by the designer.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.Marquee">
            <summary>
            Summary description for Marquee.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.MouseHandler">
            <summary>
            The MouseHandler object provides mouse support for the <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.MouseHandler.#ctor(C1.Win.C1ReportDesigner.C1ReportDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.MouseHandler"/> class. 
            </summary>
            <param name="owner">Owner <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> component.</param>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.AutoAdjustEnum">
            <summary>
            Use the members of this enumeration to set the value of the 
            <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.AutoAdjustReportDimensions"/> property 
            in the <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> control.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AutoAdjustEnum.None">
            <summary>
            No adjustments.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AutoAdjustEnum.ReportWidth">
            <summary>
            Adjusts the width of the report.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AutoAdjustEnum.SectionHeight">
            <summary>
            Adjusts the height of the specified section.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AutoAdjustEnum.Both">
            <summary>
            Adjusts the height and width of the report.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.AlignOperationEnum">
            <summary>
            Defines the types of align operation that can be performed on fields
            selected in C1ReportDesigner.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.BringToFront">
            <summary>
            Bring to front.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.SendToBack">
            <summary>
            Send to back.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.AlignToGrid">
            <summary>
            Align to grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.SizeToGrid">
            <summary>
            Size to grid.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.AlignCenter">
            <summary>
            Center align.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.AlignMiddle">
            <summary>
            Middle align.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.AlignLeft">
            <summary>
            Left align.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.AlignRight">
            <summary>
            Right align.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.AlignTop">
            <summary>
            Top align.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.AlignBottom">
            <summary>
            Bottom align.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.HeightToTallest">
            <summary>
            Increase height to tallest element.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.HeightToShortest">
            <summary>
            Decrease height to shortest element.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.WidthToWidest">
            <summary>
            Increase width to widest element.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.WidthToNarrowest">
            <summary>
            Decrease width to narrowest element.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.EqualHorizontalSpacing">
            <summary>
            Equally space horizontally.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.IncreaseHorizontalSpacing">
            <summary>
            Increase horizontal spacing.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.DecreaseHorizontalSpacing">
            <summary>
            Decrease horizontal spacing.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.EqualVerticalSpacing">
            <summary>
            Equally space vertically.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.IncreaseVerticalSpacing">
            <summary>
            Increase vertical spacing.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.DecreaseVerticalSpacing">
            <summary>
            Decrease vertical spacing.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.AlignOperationEnum.FormatAsTableRow">
            <summary>
            Format as a table row.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.C1ReportDesigner">
            <summary>
            The C1ReportDesigner is a Windows Forms control that provides the ability 
            to design and edit report definitions that can be used with the <see cref="N:C1.C1Report"/>, 
            C1WebReport, and VSReport controls.
            </summary>
            <remarks>To use this control, drag it onto a new or existing form, 
            add a <see cref="N:C1.C1Report"/> component that will contain the report you want to edit, 
            and set the <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Report"/> property in the designer control. 
            Then add all the other UI elements your application needs.
            </remarks>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectionChanged">
            <summary>
            Fired when the user fields are selected or de-selected.
            </summary>
            <remarks>This event is mainly used to refresh the PropertyGrid controls 
            attached to the selection.
            </remarks>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ReportChanged">
            <summary>
            Fired when a new report is assigned to the control.
            </summary>
            <seealso cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Report"/>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactorChanged">
            <summary>
            Fired when the designer's <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> property has changed.
            </summary>
            <seealso cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ValuesChanged">
            <summary>
            Fired when the report changes (e.g. fields are moved/resized or copied with the mouse).
            </summary>
            <example>
            The code below shows how a typical application would handle the <b>ValuesChanged</b> event to refresh a
            <b>PropertyGrid</b> so it displays the new values, and to mark the current report definition document as 
            dirty (to indicate the document has changed and needs to be saved).
            <code>
            private void _designer_ValuesChanged(object sender, System.EventArgs e)
            {
                _dirty = true;
                _propGrid.Refresh();
                _designer.CreateFieldInfo = null;
                UpdateUI();
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateField">
            <summary>
            Fired when the user drops a new report field on the design surface.
            </summary>
            <remarks>This event tells the handler that the user wants to create a field, 
            and the parameters describe the new field's section and position. 
            It is up to the event handler to actually create the new field and initialize 
            its properties.
            </remarks>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.MoveCopyFields">
            <summary>
            Fired before the user moves or copies fields with the mouse. 
            </summary>
            <remarks>The event handler can examine the current selection and determine 
            whether the user is allowed to move and/or copy the fields.
            </remarks>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ResizeFieldSection">
            <summary>
            Fired before the user resizes fields, sections, or the report with the mouse.
            </summary>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.DeleteField">
            <summary>
            Fired before the user deletes the selected fields.
            </summary>
            <remarks>The event handler can examine the current selection and determine 
            whether the user is allowed to delete the fields.</remarks>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderField">
            <summary>
            Fired before a field is rendered by the designer.
            </summary>
            <remarks><para>The event handler can change the text displayed in the field and 
            the way the field is displayed.</para>
            <para>To change the text displayed in the field, change the value of the <see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Text"/> 
            property in the <see cref="T:C1.Win.C1ReportDesigner.RenderFieldEventArgs"/> event arguments (the designer shows the field's <see cref="P:C1.C1Report.Field.Text"/> property by default).</para>
            <para>To customize the way the field is displayed, use the <see cref="M:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Render"/>
            method in the <see cref="T:C1.Win.C1ReportDesigner.RenderFieldEventArgs"/> event arguments. You can either change some 
            field properties, call the <b>Render</b> method, then restore the properties, or use the <see cref="P:C1.Win.C1ReportDesigner.RenderFieldEventArgs.Graphics"/>
            object to draw on the design surface.</para>
            </remarks>
            <example>
            The code below shows calculated fields using a red background, and draws a blue diagonal
            over barcode fields:
            <code>
            private void c1ReportDesigner1_RenderField(object sender, RenderFieldEventArgs e)
            {
              C1.Win.C1Report.Field f = e.Field;
            
              // save field's current backcolor
              Color color = f.BackColor;
            
              // render calculated fields in red
              if (f.Calculated)
                f.BackColor = Color.Red;
            
              // let the designer render the field
              e.Render();
            
              // draw a diagonal line over barcode fields
              if (f.BarCode != C1.Win.C1Report.BarCodeEnum.None)
              {
                Rectangle rc = e.Bounds;
                e.Graphics.DrawLine(Pens.Blue, rc.X, rc.Y, rc.Right, rc.Bottom);
              }
            
              // restore original background color.
              f.BackColor = color;
            }
            </code>
            </example>
        </member>
        <member name="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderSectionHeader">
            <summary>
            Fired before a section header is rendered by the designer.
            </summary>
            <remarks>The event handler can change the text displayed for the section 
            and group information.</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> class. 
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Report">
            <summary>
            Gets or sets the <see cref="N:C1.C1Report"/> control that contains the report being edited.
            </summary>
            <remarks>
            <para>This is the main property in the control. To edit a report, you have to load it into a <see cref="N:C1.C1Report"/> 
            component and connect the component to the designer using the <b>Report</b> property.</para>
            <para>Any changes made to the report via the designer are applied to the report in the <b>C1Report</b> component.</para>
            <para>To save the changes, you should call the <see cref="M:C1.C1Report.C1Report.Save(System.String)"/> method in the <b>C1Report</b> component.</para>
            </remarks>
            <example>
            The <b>C1ReportDesigner</b> application allows the user to load a report definition file, then creates a separate 
            <b>C1Report</b> component for each report in the file. The <b>C1Report</b> components are stored in a list (the one you 
            see on the left of the main form). When the user selects a report from the list, the report is displayed in the designer 
            control using the following code.
            <code>
            private void _reportList_SelectedIndexChanged(object sender, EventArgs e)
            {
                // make sure we're in design view
                ReportDesignMode = true;
                
                // reset any create field information
                _designer.CreateFieldInfo = null;
                
                // assign selected report to designer component
                ReportItem rw = _reportList.SelectedItem;
                _designer.Report = (rw != null)? rw._report: null;
                
                // update UI
                UpdateUI();
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor">
            <summary>
            Gets or sets the zoom factor (<c>1</c> is actual size).
            </summary>
            <remarks>
            The zoom factor must be not less than <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.MinZoomFactor"/>
            and not greater than <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.MaxZoomFactor"/>.
            </remarks>
            <seealso cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.MinZoomFactor"/>
            <seealso cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.MaxZoomFactor"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.MinZoomFactor">
            <summary>
            Gets the minimum allowed zoom factor (<c>0.1</c>).
            </summary>
            <seealso cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.MaxZoomFactor">
            <summary>
            Gets the maximum allowed zoom factor (<c>10</c>).
            </summary>
            <seealso cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectedFields">
            <summary>
            Gets or sets the report fields that are currently selected in the editor.
            </summary>
            <remarks>
            <para>This property exposes the selected fields, usually for editing with a <see cref="T:System.Windows.Forms.PropertyGrid"/> control.</para>
            <para>This is one of the most important properties in the designer control. The designer control exposes a design 
            pane that allows users to select, move, resize, copy, and delete fields. It also manages user selections, which are 
            exposed through the <b>SelectedFields</b> and <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectedSection"/> properties.</para>
            <para>The control does not provide any means for editing most field and section properties (e.g. BackColor, ForeColor, 
            Visible, etc). For this, the application should use a <b>PropertyGrid</b> control connected to the current selection, 
            and it should update the property grid in response to events that indicate the selection has changed.</para>
            <para>When several fields are selected, the last one in the selection is highlighted in a different color and is 
            referred to as the <i>reference</i> field. When multiple fields are to be aligned or resized, the reference field 
            provides the position and size to be used for the others. The second example below illustrates this.</para>
            </remarks>
            <example>
            <para>The code below shows how the <b>C1ReportDesigner</b> application manages the connection between the <b>PropertyGrid</b>
            and the objects selected in the designer. The connection is made through the designer's <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectionChanged"/> event.</para>
            <para>Depending on the selection, the grid shows the properties of the selected fields, the selected section, or the whole 
            report.</para>
            <code>
            // selection changed, update property grid
            private void _designer_SelectionChanged(object sender, EventArgs e)
            {
                // show field properties
                object[] sel = _designer.SelectedFields;
                if (sel.Length > 0)
                {
                    _propLabel.Text = " Field Properties";
                    _propGrid.SelectedObjects = sel;
                }
                // show section properties
                else if (_designer.SelectedSection != null) 
                {
                    _propLabel.Text = " Section Properties";
                    _propGrid.SelectedObject = _designer.SelectedSection;
                }
                // show report properties
                else if (_designer.Report != null) 
                {
                    _propLabel.Text = " Report Properties";
                    _propGrid.SelectedObject = _designer.Report;
                }
                // nothing to show...
                else 
                {
                    _propLabel.Text = " Properties";
                    _propGrid.SelectedObject = null;
                }
                
                // update UI (_menus, toolbars, etc)
                _designer.CreateFieldInfo = null;
                UpdateUI();
            }
            </code>
            The <b>SelectedFields</b> property is also useful for implementing commands that act on a field or group of fields. 
            For example, the <b>C1ReportDesigner</b> application has commands that allow the user to align the selected fields. 
            The code below shows how you might implement some of these commands (note that the last field in the selection is 
            used as a reference for aligning the others):
            <code>
            // format toolbar 
            private void _tbFormat_ButtonClick(object sender, ToolBarButtonClickEventArgs e)
            {
              // get ready to work
              Field[] sel = _designer.SelectedFields;
              Debug.Assert(sel.Length > 0);
              
              // get reference field (last in the selection)
              Field refFld = (Field)sel[sel.Length-1];
              
              // save undo info
              _designer.UndoStack.SaveState();
              
              // align fields
              if (e.Button == _btnAlignLeft)
              {
                  for (int i = 0; i &lt; sel.Length; i++)
                      sel[i].Left = refFld.Left;
              } 
              else if (e.Button == _btnAlignCenter)
              {
                  double mid = refFld.Left + refFld.Width/2;
                  for (int i = 0; i &lt; sel.Length; i++)
                      sel[i].Left = mid - sel[i].Width/2;
              }
              else if (e.Button == _btnAlignRight)
              {
                  double right = refFld.Left + refFld.Width;
                  for (int i = 0; i &lt; sel.Length; i++)
                      sel[i].Left = right - sel[i].Width;
              }
              else if (e.Button == _btnAlignTop)
              {
                  for (int i = 0; i &lt; sel.Length; i++)
                      sel[i].Top = refFld.Top;
              }
              else if (e.Button == _btnAlignMiddle)
              {
                  double mid = refFld.Top + refFld.Height/2;
                  for (int i = 0; i &lt; sel.Length; i++)
                      sel[i].Top = mid - sel[i].Height/2;
              }
              else if (e.Button == _btnAlignBottom)
              {
                  double bottom = refFld.Top + refFld.Height;
                  for (int i = 0; i &lt; sel.Length; i++)
                      sel[i].Top = bottom - sel[i].Height;
              }
               
              // show the changes
              _designer.Refresh();
              UpdateUI();
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectedFieldCount">
            <summary>
            Gets the report fields that are currently selected in the editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectedSection">
            <summary>
            Gets or sets the report section that is currently selected in the editor.
            </summary>
            <remarks>
            <para>This property exposes the selected <see cref="T:C1.C1Report.Section"/> for editing with a <see cref="T:System.Windows.Forms.PropertyGrid"/> control 
            (when the <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectedFields"/> property returns an empty array).</para>
            <para>For an example, see the <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectedFields"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Grid">
            <summary>
            Gets the <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Grid"/> object that controls the grid appearance and behavior.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Ruler">
            <summary>
            Gets the <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Ruler"/> object that controls the ruler appearance and behavior.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Cursor">
            <summary>
            Gets or sets the cursor that appears when the mouse passes over the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.UndoStack">
            <summary>
            Gets the <see cref="T:C1.Win.C1ReportDesigner.UndoStack"/> object used for undo/redo operations.
            </summary>
            <remarks>
            <para>The <b>UndoStack</b> allows you to save the state of the designer and restore it on demand.</para>
            <para>The <b>UndoStack</b> is used internally by the designer control. For example, when the user moves a 
            group of fields with the mouse, the control automatically saves the state of the report before the change 
            so it can be undone.</para>
            <para>Before changing the report using code, you should also save the state of the control by calling the 
            <see cref="M:C1.Win.C1ReportDesigner.UndoStack.SaveState"/> method.</para>
            </remarks>
            <example>
            The code below shows how to use the <see cref="M:C1.Win.C1ReportDesigner.UndoStack.SaveState"/> method to 
            save the report state before performing clipboard operations such as Cut, Paste, and Delete.
            <code>
            // handle clipboard commands (for reports and fields)
            private void HandleClipboard(ToolBarButton cmd)
            {
                // save undo state for all but copy
                if (cmd != _btnCopy)
                {
                    _designer.UndoStack.SaveState();
                    _dirty = true;
                }
                
                // execute command
                ClipboardHandler clip = _designer.ClipboardHandler;
                if (cmd == _btnCut)    clip.Cut();
                if (cmd == _btnCopy)   clip.Copy();
                if (cmd == _btnPaste)  clip.Paste();
                if (cmd == _btnDelete) clip.Delete();
                
                // update UI when done
                UpdateUI();
            }
            </code>
            <para>Note that after performing the action, the code calls an <b>UpdateUI</b> method. This method is implemented by the 
            application to update the enabled state of several UI elements and indicate to the user whether he can perform 
            operations such as Undo/Redo, Cut/Copy/Paste, etc.</para>
            <para>Here is a simple implementation of a UpdateUI method in a report designer application.</para>
            <code>
            // update UI (_menus, toolbars, etc)
            private void UpdateUI()
            {
                _btnUndo.Enabled   = _designer.UndoStack.CanUndo;
                _btnRedo.Enabled   = _designer.UndoStack.CanRedo;
                _btnCut.Enabled    =
                _btnCopy.Enabled   = 
                _btnDelete.Enabled = _designer.ClipboardHandler.CanCut;
                _btnPaste.Enabled  = _designer.ClipboardHandler.CanPaste;
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ClipboardHandler">
            <summary>
            Gets the <see cref="T:C1.Win.C1ReportDesigner.ClipboardHandler"/> object used for clipboard operations.
            </summary>
            <remarks>
            <para>The <b>ClipboardHandler</b> object provides support for standard Cut/Copy/Paste/Delete operations 
            for report fields using the system clipboard.</para>
            <para>For an example, see the <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.UndoStack"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateFieldInfo">
            <summary>
            Gets or sets an object that contains information about a field to be created by the designer.
            </summary>
            <remarks>
            <para>When you set this property to a non-null value, the designer assumes you want to create a new field. 
            It will change the mouse cursor into a cross-hair and will allow the user to mark the position of the new 
            field on the report.</para>
            <para>When the user concludes the mouse operation, the control fires the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateField"/> event. 
            At this point, the event handler can refer to the <b>CreateInfo</b> property and use the information in 
            the event parameters to create a new field and initialize it.</para>
            </remarks>
            <example>
            <para>The <b>C1ReportDesigner</b> application has a toolbar that is used for creating new fields. The toolbar 
            contains buttons for several different types of fields.</para>
            <para>When a button is clicked, the application stores a reference to the button that was clicked in the 
            <b>CreateFieldInfo</b> property and waits for the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateField"/> event. When the user moves the 
            mouse over the designer, the cursor changes into a crosshair to indicate to the user that he can mark the 
            location for the new field.</para>
            <para>When the user is done marking the location of the new field, the control fires the 
            <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateField"/> event and the application uses the information in the event parameters to create the field.</para>
            <para>Here is a simplified version of the code in the <b>C1ReportDesigner</b>:</para>
            <code>
            private void _tbCreate_ButtonClick(object sender, ToolBarButtonClickEventArgs e)
            {
                // save type of field to create and wait for the CreateField event
                _designer.CreateFieldInfo = e.Button;
            }
            
            // user is creating a field with the mouse
            // (in response to setting the _designer.CreateFieldInfo property)
            private void _designer_CreateField(object sender, CreateFieldEventArgs e)
            {
                // save undo info
                _designer.UndoStack.SaveState();
                
                // create new field in this section
                string fldName = GetUniqueFieldName();
                FieldCollection fields = e.Section.Fields;
                Field field = fields.Add(fldName, null, e.FieldBounds);
                
                // set new field properties based on CreateFieldInfo
                object btn = e.CreateFieldInfo;
                if (btn == _btnLabel)
                {
                    field.Text = field.Name;
                    field.Calculated = false;
                }
                else if (btn == _btnPageBreak)
                {
                    field.ForcePageBreak = ForcePageBreakEnum.After;
                    field.Calculated = false;
                }
                else if (btn == _btnRectangle)
                {
                    field.BorderStyle = BorderStyleEnum.Solid;
                    field.Calculated = false;
                }
                else
                {
                    Debug.Assert(false, "Unknown field creator object");
                }
                
                // reset creator, select the new field
                _designer.CreateFieldInfo = null;
                _designer.SelectedFields = new Field[] { field };
             }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.BorderStyleSection">
            <summary>
            Gets or sets the border style for the <see cref="T:C1.C1Report.Section"/> headers.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ForeColorSection">
            <summary>
            Gets or sets the color used to draw the <see cref="T:C1.C1Report.Section"/> names.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.BackColorSection">
            <summary>
            Gets or sets the background color of the <see cref="T:C1.C1Report.Section"/> headers.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ForeColorGroup">
            <summary>
            Gets or sets the color used to draw the <see cref="T:C1.C1Report.Group"/> information.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.BackColorEmpty">
            <summary>
            Gets or sets the background color for the empty area.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ColorReportEdge">
            <summary>
            Gets or sets the color of the edge drawn around the work area.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ColorFieldEdge">
            <summary>
            Gets or sets the color of the edge drawn around the report fields.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.GroupNameFont">
            <summary>
            Gets or sets the font used to display <see cref="T:C1.C1Report.Group"/> names.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.AutoAdjustReportDimensions">
            <summary>
            Gets or sets whether the control should automatically adjust the report dimensions after fields are moved.
            </summary>
            <remarks>
            If this property is set to true and the user drags a field beyond the edge of the report, the report width 
            is automatically adjusted so the field will fit.
            </remarks>
            <seealso cref="T:C1.Win.C1ReportDesigner.AutoAdjustEnum"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.Locked">
            <summary>
            Gets or sets whether the fields are locked in the designer.
            </summary>
            <remarks>
            This property works as a global toggle and affects all fields in the report. 
            You cannot lock some fields and leave others unlocked.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.AutoScroll">
            <summary>
            Gets or sets whether the designer should scroll automatically when the user drags the mouse 
            close to the edges of the control.
            </summary>
            <remarks>
            If this property is set to true and the user drags the mouse near the edge of the control 
            (while moving or resizing fields), the control will scroll automatically to bring the area being 
            worked on into view.
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <remarks>
            This property only affects the appearance of the designer control, and has no effect on the report definition.
            </remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.AllowInPlaceEditing">
            <summary>
            Gets or sets whether the user should be able to edit field text in place.
            </summary>
            <remarks>
            <para>If this property is set to true, then the user can select <see cref="T:C1.C1Report.Field"/> objects in the designer 
            and type text directly into them. The text is assigned to the field's <see cref="P:C1.C1Report.Field.Text"/> property.</para>
            <para>If the property is set to false, then the user must edit the field text using a property grid control 
            attached to the field object.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.FieldEditor">
            <summary>
            Gets a reference to the in-place field editor.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.HiddenSections">
            <summary>
            Gets or sets a list of report sections to be hidden in the designer.
            </summary>
            <seealso cref="T:C1.C1Preview.SectionTypeEnum"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ShowSubreportContent">
            <summary>
            Gets or sets whether the designer should display subreport content.
            </summary>
            <remarks>
            <para>By default, subreports are displayed as gray boxes with the subreport
            name at the center.</para>
            <para>Setting this property to true causes the designer to paint the
            content of the subreports on the design surface.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ForeColor">
            <summary>
            This property is inherited from the base class and is not used in
            the <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.IsFieldLocked(C1.C1Report.Field)">
            <summary>
            TODO:
            Gets a value indicating whether specified <see cref="T:C1.C1Report.Field"/> is locked, i.e. it can not
            be moved, resized etc.
            </summary>
            <param name="field"><see cref="T:C1.C1Report.Field"/> to test.</param>
            <returns><b>true</b> if <see cref="T:C1.C1Report.Field"/> locked.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.IsSelectedFieldsLocked">
            <summary>
            TODO:
            Gets a value indicating whether all currently selected fields are locked.
            </summary>
            <returns><b>true</b> if all selected fields are locked, <b>false</b> otherwise, returns <b>null</b> if some of selected fields are locked and some not.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToggleLockOfSelectedFields">
            <summary>
            TODO:
            Toggles lock of selected fields.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.LockSelectedFields">
            <summary>
            TODO:
            Lock currently selected fields.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.UnlockSelectedFields">
            <summary>
            TODO:
            Unlock currently selected fields.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.LockField(C1.C1Report.Field)">
            <summary>
            TODO:
            Lock specified <see cref="T:C1.C1Report.Field"/>.
            </summary>
            <param name="field"><see cref="T:C1.C1Report.Field"/> to lock.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.UnlockField(C1.C1Report.Field)">
            <summary>
            TODO:
            Unlock specified <see cref="T:C1.C1Report.Field"/>.
            </summary>
            <param name="field"><see cref="T:C1.C1Report.Field"/> to unlock.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.SetFieldLocked(C1.C1Report.Field,System.Boolean)">
            <summary>
            TODO:
            Lock or unlock specified <see cref="T:C1.C1Report.Field"/>.
            </summary>
            <param name="field"><see cref="T:C1.C1Report.Field"/> to lock or unlock.</param>
            <param name="locked"><b>true</b> to lock field, <b>false</b> to unlock.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToPixelsX(System.Double)">
            <summary>
            Converts twips to pixels, not taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            </summary>
            <param name="twip">Value in twips.</param>
            <returns>Value in pixels.</returns>
            <remarks>This method is useful to translate report coordinates (expressed in twips) 
            into mouse/screen coordinates (expressed in pixels).</remarks>
            <seealso cref="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToZoomedPixelsX(System.Double)"/>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToPixelsY(System.Double)">
            <summary>
            Converts twips to pixels, not taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            </summary>
            <param name="twip">Value in twips.</param>
            <returns>Value in pixels.</returns>
            <remarks>This method is useful to translate report coordinates (expressed in twips) 
            into mouse/screen coordinates (expressed in pixels).</remarks>
            <seealso cref="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToZoomedPixelsY(System.Double)"/>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToTwipsX(System.Int32)">
            <summary>
            Converts pixels to twips, not taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            </summary>
            <param name="pixels">Value in pixels.</param>
            <returns>Value in twips.</returns>
            <remarks>This method is useful to translate mouse/screen coordinates 
            (expressed in pixels) into report coordinates (expressed in twips).</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToTwipsY(System.Int32)">
            <summary>
            Converts pixels to twips, not taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            </summary>
            <param name="pixels">Value in pixels.</param>
            <returns>Value in twips.</returns>
            <remarks>This method is useful to translate mouse/screen coordinates 
            (expressed in pixels) into report coordinates (expressed in twips).</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToZoomedPixelsX(System.Double)">
            <summary>
            Converts twips to pixels, taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            </summary>
            <param name="twip">Value in twips.</param>
            <returns>Value in pixels.</returns>
            <remarks>This method is useful to translate report coordinates (expressed in twips) 
            into mouse/screen coordinates (expressed in pixels).</remarks>
            <seealso cref="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToPixelsX(System.Double)"/>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToZoomedPixelsY(System.Double)">
            <summary>
            Converts twips to pixels, taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            </summary>
            <param name="twip">Value in twips.</param>
            <returns>Value in pixels.</returns>
            <remarks>This method is useful to translate report coordinates (expressed in twips) 
            into mouse/screen coordinates (expressed in pixels).</remarks>
            <seealso cref="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToPixelsY(System.Double)"/>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToUnZoomedTwipsX(System.Int32)">
            <summary>
            Converts pixels to twips, taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            Note that the return value is rounded to the nearest integral value.
            </summary>
            <param name="pixels">Value in pixels.</param>
            <returns>Value in twips.</returns>
            <remarks>This method is useful to translate mouse/screen coordinates 
            (expressed in pixels) into report coordinates (expressed in twips).</remarks>
            <seealso cref="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToTwipsX(System.Int32)"/>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToUnZoomedTwipsY(System.Int32)">
            <summary>
            Converts pixels to twips, taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account.
            Note that the return value is rounded to the nearest integral value.
            </summary>
            <param name="pixels">Value in pixels.</param>
            <returns>Value in twips.</returns>
            <remarks>This method is useful to translate mouse/screen coordinates 
            (expressed in pixels) into report coordinates (expressed in twips).</remarks>
            <seealso cref="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ToTwipsY(System.Int32)"/>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.HitTest(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:C1.Win.C1ReportDesigner.HitTestInfo"/> object that describes the contents of the control at a given position on the screen.
            </summary>
            <param name="x">Horizontal position to test, in client coordinates.</param>
            <param name="y">Vertical position to test, in client coordinates.</param>
            <returns>A <see cref="T:C1.Win.C1ReportDesigner.HitTestInfo"/> that describes the contents of the control at a given position on the screen.</returns>
            <remarks>
            The <b>HitTest</b> method allows you to determine whether a given point (e.g. mouse position) is over a report element 
            (field/section) or other parts of the designer (rulers, section headers, empty area, resizing edges, etc.).
            </remarks>
            <example>
            The code below shows how the <b>C1ReportDesigner</b> application uses the <b>HitTest</b> method to handle right-clicks 
            on the report designer. The code checks to see if the click was on a field, and changes the selection and context menu 
            accordingly:
            <code>
            // handle context-sensitive designer menu
            private void _designerMenu_Popup(object sender, System.EventArgs e)
            {
                // make sure the designer has the focus
                _designer.Focus();
                
                // get field under the mouse
                Point pt = _designer.PointToClient(Control.MousePosition);
                HitTestInfo hti = _designer.HitTest(pt.X, pt.Y);
                Field f = hti.Field;
                
                // no field there? clear selection
                if (f == null) 
                    _designer.SelectedFields = null;
                    
                // field not in selection? then select it
                if (f != null)
                {
                    bool selected = false;
                    foreach (Field sf in _designer.SelectedFields)
                    {
                        if (sf != f) continue;
                        selected = true;
                        break;
                    }
                    if (!selected)
                      _designer.SelectedFields = new Field[] { f };
                }
                
                // show cut/copy/delete only when a field was clicked
                _menuCopyField.Visible   = 
                _menuCutField.Visible    = 
                _menuDeleteField.Visible = (f != null);
            }
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.SubreportDesigner">
            <summary>
            Gets or sets the sub-report designer.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.CxRuler">
            <summary>
            Gets vertical ruler width, in pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.CyRuler">
            <summary>
            Gets horizontal ruler height, in pixels.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomValue(System.Int32)">
            <summary>
            Zooms (multiplies) the specified value by <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomValue(System.Single)">
            <summary>
            Zooms (multiplies) the specified value by <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomValue(System.Double)">
            <summary>
            Zooms (multiplies) the specified value by <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.UnZoomValue(System.Int32)">
            <summary>
            Un-zooms (divides) the specified value by <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.UnZoomValue(System.Single)">
            <summary>
            Un-zooms (divides) the specified value by <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.UnZoomValue(System.Double)">
            <summary>
            Un-zooms (divides) the specified value by <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectionChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnValuesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ValuesChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnReportChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ReportChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnZoomFactorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactorChanged"/> event.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnRenderField(C1.Win.C1ReportDesigner.RenderFieldEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderField"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1ReportDesigner.RenderFieldEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnRenderSectionHeader(C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.RenderSectionHeader"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnCreateField(C1.Win.C1ReportDesigner.CreateFieldEventArgs)">
            <summary>
            Raises the <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.CreateField"/> event.
            </summary>
            <param name="e"><see cref="T:C1.Win.C1ReportDesigner.RenderSectionHeaderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.AlignSelectedFields(C1.Win.C1ReportDesigner.AlignOperationEnum)">
            <summary>
            Aligns selected fields.
            </summary>
            <param name="ao">Alignment option.</param>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ScrollableRectangle">
            <summary>
            Gets the rectangle that represents the client area of the control. 
            The <see cref="T:C1.Win.C1ReportDesigner.Util.ScrollableControl"/> uses this property to set the scroll page size.  
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
            <remarks>
            Use this method when you change field properties, create new fields or change report/section dimensions 
            outside the designer, to ensure that the report and sections are wide enough to accommodate the new fields.
            </remarks>
            <example>
            The code below shows the event handler for the <b>PropertyGrid</b> control that is bound to the designer 
            selection. When the user changes a field, section, or report property using the designer, the application 
            calls the <b>Refresh</b> method so the changes will be visible in the designer.
            <code>
            // property value changed, update designer
            private void _propGrid_PropertyValueChanged(object s,
                                 PropertyValueChangedEventArgs e)
            {
                // show changes in the designer
                _designer.Refresh();
                
                // remember the document is dirty
                if (!_dirty)
                {
                    _dirty = true;
                    UpdateUI();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnParentChanged(System.EventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.ParentChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information 
            about the control to paint. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnMouseEnter(System.EventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnMouseLeave(System.EventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnDoubleClick(System.EventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.DoubleClick"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or 
            a special key that requires preprocessing.
            </summary>
            <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"/> values.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Special handling for the <see cref="E:System.Windows.Forms.Control.KeyPress"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.GetFieldRect(C1.C1Report.Field,System.Boolean)">
            <summary>
            Gets rectangle for the specified <see cref="T:C1.C1Report.Field"/>, taking <see cref="P:C1.Win.C1ReportDesigner.C1ReportDesigner.ZoomFactor"/> into account
            (i.e. for 200% zoom, the size of the rectangle will be twice as big as for 100% zoom).
            </summary>
            <param name="f">The field to get the rectangle for.</param>
            <param name="client">Indicates whether to take scroll offset and adornments (rulers etc) into account.</param>
            <returns>Rectangle corresponding to the specified field.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ClientToSection(C1.C1Report.Section,System.Drawing.Rectangle)">
            <summary>
            Converts client rectangle (zoomed) to twips within section.
            </summary>
            <param name="s">The target <see cref="T:C1.C1Report.Section"/>.</param>
            <param name="rc">Zoomed client rectangle.</param>
            <returns>Rectangle within section, in twips.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.SetFieldRect(C1.C1Report.Field,System.Drawing.Rectangle,C1.C1Report.SectionTypeEnum,System.Boolean,System.Boolean)">
            <summary>
            Sets the specified <see cref="T:C1.C1Report.Field"/>'s rectangle from zoomed editor client rectangle.
            </summary>
            <param name="f">The garget <see cref="T:C1.C1Report.Field"/>.</param>
            <param name="rc">Zoomed editor client rectangle.</param>
            <param name="secType">Section type.</param>
            <param name="setWidth">True if the field's width was changed, if false width is NOT applied).</param>
            <param name="setHeight">True if the field's height was changed, if false height is NOT applied).</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.InvalidateField(C1.C1Report.Field)">
            <summary>
            Invalidates rectangle corresponding to the specified <see cref="T:C1.C1Report.Field"/>.
            </summary>
            <param name="f">The field to invalidate.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.Reset">
            <summary>
            reset editing state (called when the Report property changes)
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.OffsetSelection(System.Int32,System.Int32,System.Int32)">
            <summary>
            Offsets the current selection by the specified amount, in zoomed pixels
            (i.e. the larger the current zoom, the less will the resulting offset be;
            this allows finer movements when zoomed in, coarser when zoomed out).
            </summary>
            <param name="pixelX">Horizontal offset.</param>
            <param name="pixelY">Vertical offset.</param>
            <param name="newSection">New section index (can be -1).</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ResizeSelection(System.Int32,System.Int32)">
            <summary>
            Resizes the current selection by the specified amount, in zoomed pixels
            (i.e. the larger the current zoom, the less will the resulting size difference be;
            this allows finer adjustments when zoomed in, coarser when zoomed out).
            </summary>
            <param name="pixelX">Horizontal delta.</param>
            <param name="pixelY">Vertical delta.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ClearSelection">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.DeleteSelection">
            <summary>
            Deletes the currently selected fields.
            Prior to deleting, fires <see cref="E:C1.Win.C1ReportDesigner.C1ReportDesigner.DeleteField"/> event, bails out if it
            sets <c>Cancel</c> to true.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.InvalidateSelection">
            <summary>
            Invalidates the current selection.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.IsFieldSelected(C1.C1Report.Field)">
            <summary>
            Tests whether a field is selected.
            </summary>
            <param name="f">The field to test.</param>
            <returns>Whether the field is selected.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.SelectField(C1.C1Report.Field,C1.Win.C1ReportDesigner.SelectCmd)">
            <summary>
            Changes the selected state of a field.
            </summary>
            <param name="f">The target field.</param>
            <param name="select">Selection command.</param>
            <returns><c>true</c>.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ShiftSelection(System.Boolean)">
            <summary>
            Moves selection to next or previous field.
            </summary>
            <param name="back">Indicates whether to move selection backwards.</param>
            <returns><c>true</c> if selection was changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.ValidateSelection">
            <summary>
            Ensures that all currently selected fields exist in the report.
            If that is not so, the current selection is cleared.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.C1ReportDesigner.DrawDesigner(System.Windows.Forms.PaintEventArgs)">
            <summary>
            main drawing routine
            </summary>
            <param name="e">Paint event args.</param>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.C1ReportDesigner.SectionHeaderAttrs">
            <summary>
            Contains attributes of the section header.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.C1ReportDesigner.SpacingFieldComparer">
            <summary>
            FieldComparer: helper class used for sorting fields
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.C1ReportDesigner.AlignFieldComparer">
            <summary>
            AlignFieldComparer: helper class used for sorting fields (???)
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.C1ReportDesigner.FieldComparer">
            <summary>
            Class used to sort fields by comparing their Top properties
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.C1ReportDesigner.ArrayListChecked">
            <summary>
            ArrayList that keeps track of changes
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.ShowRulerFlags">
            <summary>
            Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1ReportDesigner.Ruler.Visible"/> property in the <see cref="T:C1.Win.C1ReportDesigner.Ruler"/> class.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.ShowRulerFlags.None">
            <summary>
            No rulers are displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.ShowRulerFlags.Horizontal">
            <summary>
            The horizontal ruler is displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.ShowRulerFlags.Vertical">
            <summary>
            The vertical ruler is displayed.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.ShowRulerFlags.Both">
            <summary>
            Both the vertical and horizontal rulers are displayed.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.Ruler">
            <summary>
            The Ruler object controls the appearance of the rulers along the top 
            and left-hand side of the <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> control.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.BorderStyle">
            <summary>
            Gets or sets the style of the border drawn around the ruler.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.BorderColor">
            <summary>
            Gets or sets the color of the border drawn around the ruler. If
            this property is <see cref="F:System.Drawing.Color.Empty"/> then this property is ignored and border is drawn
            using predefined style and color specified by <see cref="P:C1.Win.C1ReportDesigner.Ruler.BorderStyle"/> property,
            if this property is <see cref="P:System.Drawing.Color.Transparent"/> then no border is drawn,
            otherwise one pixel border is drawn around the ruler.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.Font">
            <summary>
            Gets or sets the font used to paint values on the ruler.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.BackColor">
            <summary>
            Gets or sets the background color of the ruler over the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.BackColorEmpty">
            <summary>
            Gets or sets the background color of the ruler beyond the edge of the page.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.Highlight">
            <summary>
            Gets or sets the color used to highlight the ruler during selection.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.ForeColor">
            <summary>
            Gets or sets the color used to paint values on the ruler.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.Visible">
            <summary>
            Specifies whether the ruler should be displayed.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Ruler.AllowSelection">
            <summary>
            Specifies whether the ruler can be used for field selection.
            </summary>
            <remarks>
            If this property is set to true, the user can select fields by clicking and dragging the mouse over the rulers 
            (horizontal or vertical). While dragging the mouse, the ruler will display a selection band. When the mouse is 
            released, any controls that touch or lie within the selection band will be selected.
            </remarks>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.SectionInfo">
            <summary>
            SectionInfo
            cache section information in a format that is useful
            for painting and hit testing.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.SectionInfo.RcBody">
            <summary>
            Gets section rectangle in pixels, accounting for rulers and separators,
            relative to report top/left.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.SectionInfo.RcHeader">
            <summary>
            Gets section header area rectangle , in pixels, accounting for rulers and separators,
            relative to report top/left.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.SectionInfoCollection">
            <summary>
            SectionInfoCollection
            manage a list of SectionInfo objects
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.UndoStack">
            <summary>
            The UndoStack object provides undo/redo services for the <see cref="T:C1.Win.C1ReportDesigner.C1ReportDesigner"/> control. 
            It has methods that allow you to save and restore the state of the report being edited.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.UndoStack.Enabled">
            <summary>
            Gets or sets whether the designer should save the state of the report 
            before applying any changes (e.g., when the user moves a field with the mouse).
            </summary>
            <remarks>The <see cref="T:C1.Win.C1ReportDesigner.UndoStack"/> is enabled by default, because it provides 
            a valuable service to users. However, if you choose not to expose its functionality 
            (with undo/redo buttons in your app), then you should disable the <see cref="T:C1.Win.C1ReportDesigner.UndoStack"/> 
            to improve efficiency.
            </remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.UndoStack.Clear">
            <summary>
            Clears the undo/redo stack.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.UndoStack.CanUndo">
            <summary>
            Returns true if the undo stack is not empty.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.UndoStack.Undo">
            <summary>
            Undo changes and restore the report to the last saved state.
            </summary>
            <returns>Returns false if the undo stack is empty.</returns>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.UndoStack.CanRedo">
            <summary>
            Returns true if the redo stack is not empty.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.UndoStack.Redo">
            <summary>
            Redo changes, cancelling the last undo operation.
            </summary>
            <returns>Returns false if the redo stack is empty.</returns>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.UndoStack.SaveState">
            <summary>
            Save the current report state into the undo stack.
            </summary>
            <returns>Returns false if there is no report.</returns>
            <remarks>The designer calls this method automatically before it changes 
            the report in any way. If your code changes the report, 
            you should also call this method before making the changes so they can be undone.</remarks>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.Util.BorderStyleEnum">
            <summary>
            Specifies the type of border to be drawn around the control.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.Util.BorderStyleEnum.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.Util.BorderStyleEnum.FixedSingle">
            <summary>
            A single-line border.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.Util.BorderStyleEnum.Fixed3D">
            <summary>
            A three-dimensional border.
            </summary>
        </member>
        <member name="F:C1.Win.C1ReportDesigner.Util.BorderStyleEnum.Light3D">
            <summary>
            A three-dimensional border for items that do not accept user input.
            </summary>
        </member>
        <member name="T:C1.Win.C1ReportDesigner.Util.ScrollableControl">
            <summary>
            Base class for controls that support auto-scrolling behavior.
            </summary>
            <remarks>
            This class is similar to the WinForms <see cref="T:System.Windows.Forms.ScrollableControl"/>, but provides 
            extra customization, better scroll notification, and support for scroll tracking and Windows Xp themes.
            </remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1ReportDesigner.Util.ScrollableControl"/> class. 
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.ScrollBars">
            <summary>
            Gets or sets which scroll bars should appear on the control.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.ScrollPosition">
            <summary>
            Gets or sets the current scroll position.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.ScrollTrack">
            <summary>
            Gets or sets whether the control should scroll as the user drags the scrollbar thumb.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.ScrollTips">
            <summary>
            Gets or sets whether the control should display tooltips as the user scrolls vertically.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.ScrollTipText">
            <summary>
            Gets or sets the tooltip text displayed as the user scrolls vertically.
            </summary>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.BorderStyle">
            <summary>
            Gets or sets the type of border around the control.
            </summary>
            <seealso cref="T:C1.Win.C1ReportDesigner.Util.BorderStyleEnum"/>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.Cursor">
            <summary>
            Gets or sets the cursor that appears when the mouse moves over the control.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.DrawComboButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws a drop-down button on a combo box control in the specified state, 
            on the specified graphics surface, and within the specified bounds.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw on. </param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the combo box.</param>
            <param name="bs">A bitwise combination of the <see cref="T:System.Windows.Forms.ButtonState"/> values 
            that specifies the state to draw the combo box in. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws a button control in the specified state, on the specified graphics surface, 
            and within the specified bounds.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw on. </param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the combo box.</param>
            <param name="bs">A bitwise combination of the <see cref="T:System.Windows.Forms.ButtonState"/> values 
            that specifies the state to draw the combo box in. </param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.DrawHeader(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Brush,System.Windows.Forms.Border3DStyle,System.Boolean)">
            <summary>
            Draws a header area on the specified graphics surface, within the specified bounds,
            with specified parameters.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw on. </param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the combo box.</param>
            <param name="br">The <see cref="T:System.Drawing.Brush"/> to draw with.</param>
            <param name="bs">The <see cref="T:System.Windows.Forms.Border3DStyle"/> style.</param>
            <param name="selected">Whether the header is selected.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.DrawHeader(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Brush,System.Boolean)">
            <summary>
            Draws a header area on the specified graphics surface, within the specified bounds,
            with specified parameters.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw on. </param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the combo box.</param>
            <param name="br">The <see cref="T:System.Drawing.Brush"/> to draw with.</param>
            <param name="selected">Whether the header is selected.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.DrawHeader(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Border3DStyle,System.Boolean)">
            <summary>
            Draws a header area on the specified graphics surface, within the specified bounds,
            with specified parameters.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw on. </param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the combo box.</param>
            <param name="bs">The <see cref="T:System.Windows.Forms.Border3DStyle"/> style.</param>
            <param name="selected">Whether the header is selected.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.OnImeStartComposition">
            <summary>
            This method called when the window receives the WM_IME_STARTCOMPOSITION message. 
            The WM_IME_STARTCOMPOSITION message is sent immediately before the 
            IME generates the composition string as a result of a keystroke. 
            The message is a notification to an IME window to open its composition window. 
            An application should process this message if it displays composition characters itself.
            </summary>
            <remarks>This base implementation does nothing.</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.OnScroll(System.Windows.Forms.ScrollBars)">
            <summary>
            Fires OnScroll event. Occurs when the scroll box has been moved by either 
            a mouse or keyboard action.
            </summary>
            <param name="sb">Specifies which scroll bar was scrolled.</param>
            <remarks>Override this method to get notifications when the control scrolls.
            The base implementation invalidates control.</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.OnScrollTip(System.Int32)">
            <summary>
            Fires OnScrollTip event.
            </summary>
            <param name="newValue">New position of scroll tip.</param>
            <remarks>Override this method to update <see cref="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.ScrollTipText"/> property.</remarks>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.ScrollableRectangle">
            <summary>
            Gets the rectangle that represents the client area of the control. 
            The <see cref="T:C1.Win.C1ReportDesigner.Util.ScrollableControl"/> uses this property to set the scroll page size.  
            </summary>
            <remarks>Override this property to customize scrolling behavior.</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.BuildScrollableRectangle(System.Int32,System.Int32)">
            <summary>
            The <see cref="T:C1.Win.C1ReportDesigner.Util.ScrollableControl"/> uses this method to set the scroll rectangle.
            </summary>
            <remarks>Override this method to customize scrolling behavior.</remarks>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            Sets the size of the client area of the control.
            </summary>
            <param name="x">The client area width, in pixels.</param>
            <param name="y">The client area height, in pixels.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data. </param>
        </member>
        <member name="P:C1.Win.C1ReportDesigner.Util.ScrollableControl.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="M:C1.Win.C1ReportDesigner.Util.ScrollableControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process. </param>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AllowedCallerAttribute">
            <summary>
            Attribute used to specify assemblies that can use this product without a license.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VerString">
            <summary>
            WinForms version string representation (4 dot-delimited numbers).
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.VersionConst.VersionStr">
            <summary>
            Same as <see cref="F:C1.Util.Licensing.VersionConst.VerString"/>.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.AssemblyNames">
            <summary>
            Specifies assembly name parts, used by AssemblyCommonInfo to generate actual assembly names.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            Localization tables and methods for looking up localized strings.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.GcNetFxLicenseProvider`1.VerifyDesignTimeEnvironment">
            <summary>
              Verify the environment to get whether the component is in design-time. 
            </summary>
            <returns>
              <c>true</c> if it is in design-time; otherwise <c>false</c>.
            </returns>
            <remarks>
              In DesignTime, because of IDE bugs, some component are not created with DesigntimeLicenseContext. 
              For example, when drag a control from Win Forms DataSource tool window, or use a web control in a ASP.NET Template.
              This may cause the control do run-time license validation and found that there is no license.
              To resolve this problem, we will check the environment and decide whether to do design-time license validation again.
            </remarks>
        </member>
        <member name="F:GrapeCity.Common.LicenseDialog`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GrapeCity.Common.LicenseDialog`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.WinFormLicenseProvider`1">
            <summary>
              Represents a license provider of a Windows Forms PowerTools component.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseResource">
            <summary>
              Contains the resource for PowerToolsLicenseProvider
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.ErrorIcon">
            <summary>
              Gets the Error icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.InfoIcon">
            <summary>
              Gets the Info icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.WarningIcon">
            <summary>
              Gets the Warning icon for license dialog.
            </summary>
        </member>
        <member name="P:GrapeCity.Common.Resources.LicenseResource.GrapeCityIcon">
            <summary>
              Gets the GrapeCity icon for license dialog.
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String)">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetString(System.String,System.Object[])">
            <summary>
              Gets the localized string.
            </summary>
            <param name="name">
              The name of the string. It could be a const value in <see cref="T:GrapeCity.Common.Resources.LicenseResource"/>.
            </param>
            <param name="args">
              The data used in the string.
            </param>
            <returns>
              The localized string.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
              Get the file version description of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose file version description should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the file version description of the specified assembly.
            </returns>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
              Get the name of the specified assembly.
            </summary>
            <param name="assembly">
              The <see cref="T:System.Reflection.Assembly"/> whose name should be get.
            </param>
            <returns>
              A <see cref="T:System.String"/> indicates the name of the specified assembly.
            </returns>
            <remarks>
              Please use this method to get assembly name. It is because that the Assembly.GetName method need FileIO permission.
            </remarks>
        </member>
        <member name="M:GrapeCity.Common.Resources.LicenseResource.FormatSerialKey(System.String)">
            <summary>
              Format the product key as "xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".
            </summary>
            <param name="productKey">
              A <see cref="T:System.String"/> indicates the original product key which is a sequence of 24 digits.
            </param>
            <returns>
              A readable text indicates the product key.
            </returns>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogKind">
            <summary>
              Represents the kind of license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Info">
            <summary>
              Info dialog. It is shown for a trial license.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Warning">
            <summary>
              Warning dialog. It is shown for a trial license which is expired.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogKind.Error">
            <summary>
              Error dialog. It is shown for an invalid license or other errors.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget">
            <summary>
              Represents the target web site for the link in license dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.None">
            <summary>
              None target.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebFAQ">
            <summary>
              Goto web site http://www.grapecity.com/support/portal/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebActivation">
            <summary>
              Goto web site http://www.grapecity.com/componentone/.
            </summary>
        </member>
        <member name="F:GrapeCity.Common.Resources.LicenseDialogWebLinkTarget.GotoWebShop">
            <summary>
              Goto web site http://www.grapecity.com/pricing/componentone/.
            </summary>
        </member>
    </members>
</doc>
