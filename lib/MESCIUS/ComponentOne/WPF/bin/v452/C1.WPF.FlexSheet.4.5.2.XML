<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF.FlexSheet.4.5.2</name>
  </assembly>
  <members>
    <member name="T:C1.Silverlight.Resources.Common`1">
      <summary>
            A helper base for resource strongly-typed resource class
            that reads resources from the application assembly.
            </summary>
      <typeparam name="R">The strongly-typed resource subclass</typeparam>
    </member>
    <member name="T:C1.Silverlight.Resources.Common`1.S">
      <summary>
            Dummy class to make GetString work.
            </summary>
    </member>
    <member name="M:C1.Silverlight.Resources.Common`1.S.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>
            Calls resourceManApp.GetString and if that fails, resourceManC1.GetString.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.Common`1.ResourceManager">
      <summary>
            Loads resource managers for the application and the assembly.
            </summary>
    </member>
    <member name="T:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.AddLevel">
      <summary>
              Looks up a localized string similar to Add Level.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Cancel">
      <summary>
              Looks up a localized string similar to Cancel.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Column">
      <summary>
              Looks up a localized string similar to Column.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.CopyLevel">
      <summary>
              Looks up a localized string similar to Copy Level.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.DeleteLevel">
      <summary>
              Looks up a localized string similar to Delete Level.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.OK">
      <summary>
              Looks up a localized string similar to OK.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Order">
      <summary>
              Looks up a localized string similar to Order.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.SortDialogTitle">
      <summary>
              Looks up a localized string similar to Sort.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Cut">
      <summary>
              Looks up a localized string similar to Cut.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Copy">
      <summary>
              Looks up a localized string similar to Copy.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Paste">
      <summary>
              Looks up a localized string similar to Paste.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.InsertRows">
      <summary>
              Looks up a localized string similar to InsertRows.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.DeleteRows">
      <summary>
              Looks up a localized string similar to DeleteRows.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.InsertColumns">
      <summary>
              Looks up a localized string similar to InsertRows.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.DeleteColumns">
      <summary>
              Looks up a localized string similar to DeleteColumns.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.SortAscending">
      <summary>
              Looks up a localized string similar to SortAscending.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.SortDescending">
      <summary>
              Looks up a localized string similar to SortDescending.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.ClearFilter">
      <summary>
              Looks up a localized string similar to SortDescending.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.SelectAll">
      <summary>
              Looks up a localized string similar to SelectAll.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.ShowItems">
      <summary>
              Looks up a localized string similar to ShowItems.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.And">
      <summary>
              Looks up a localized string similar to And.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Or">
      <summary>
              Looks up a localized string similar to Or.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Ascending">
      <summary>
              Looks up a localized string similar to Ascending.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Descending">
      <summary>
              Looks up a localized string similar to Descending.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.EmptySortMsg">
      <summary>
              Looks up a localized string similar to EmptySortMsg.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.DuplicateSortMsg">
      <summary>
              Looks up a localized string similar to DuplicateSortMsg.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Insert">
      <summary>
              Looks up a localized string similar to Insert.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Delete">
      <summary>
              Looks up a localized string similar to Delete.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Rename">
      <summary>
              Looks up a localized string similar to Rename.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Hide">
      <summary>
              Looks up a localized string similar to Hide.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.Unhide">
      <summary>
              Looks up a localized string similar to Unhide.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.SheetNameMustBeUniqueMsg">
      <summary>
              Looks up a localized string similar to SheetNameMustBeUniqueMessage.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.SheetNameCannotBeBlankMsg">
      <summary>
              Looks up a localized string similar to SheetNameCannotBeBlankMessage.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.SheetNameMessageBoxTitle">
      <summary>
              Looks up a localized string similar to SheetNameMessageBoxTitle.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexGrid.Resources.C1_Silverlight_FlexSheet.PrintPreview">
      <summary>
              Looks up a localized string similar to PrintPreview.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.C1FlexSheet">
      <summary>
            Class that extends the C1FlexGrid control to provide Excel-like look and 
            feel including a multi-sheet tabbed interface, support for cell formatting, 
            outlining, and XLSX file import and export.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.TopLeftCellPolygonBackground">
      <summary>
            Gets or sets top left cell polygon background
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FlexSheet.TopLeftCellPolygonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.TopLeftCellPolygonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.EditOptions">
      <summary>
            Gets or sets the edit options of Flex sheet tabs 
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FlexSheet.EditOptionsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.EditOptions" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.ShowSingleTab">
      <summary>
            Gets or sets a value that determines whether the tab strip is shown when the control has only one sheet.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FlexSheet.ShowSingleTabProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.ShowSingleTab" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.TabItemShape">
      <summary>
            Gets or sets the geometric shape of the sheet tabs.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FlexSheet.TabItemShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.TabItemShape" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.#ctor">
      <summary>
            Initializes a new instance of a C1FlexSheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.FindNext(System.String,C1.WPF.FlexGrid.FindOption)">
      <summary>
            Find the value according to user inputted.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.FindAll(System.String,C1.WPF.FlexGrid.FindOption)">
      <summary>
            Find all values according to user inputted.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.FlexGrid.C1FlexSheet" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.DataContext">
      <summary>
            Invalidate when the DataContext changes (since we don't get notifications in SL4).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.Sheets">
      <summary>
            Gets the collection of sheets on this book.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.AddSheet(System.String,System.Int32,System.Int32)">
      <summary>
            Adds a new sheet to this book.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.AddSheet(System.String,System.Collections.IEnumerable)">
      <summary>
            Adds a new bound sheet to this book and selects the new sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.Load(System.IO.Stream,C1.WPF.FlexGrid.ImportFileFormat)">
      <summary>
            Load file to C1FlexSheet.
            </summary>
      <param name="stream">
      </param>
      <param name="format">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SaveTxt(System.IO.Stream,C1.WPF.FlexGrid.SaveOptions)">
      <summary>
            Save txt file to stream.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> where the contents will be saved.</param>
      <param name="options">
        <see cref="T:C1.WPF.FlexGrid.SaveOptions" /> value that specifies options to use when saving the file.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SaveHtml(System.IO.Stream,C1.WPF.FlexGrid.SaveOptions)">
      <summary>
            Save html file to stream.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> where the contents will be saved.</param>
      <param name="options">
        <see cref="T:C1.WPF.FlexGrid.SaveOptions" /> value that specifies options to use when saving the file.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SaveXls(System.IO.Stream)">
      <summary>
            Save xls file to stream.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SaveXlsx(System.IO.Stream)">
      <summary>
            Save xlsx file to stream.
            </summary>
      <param name="stream">
      </param>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.Item(System.String)">
      <summary>
            Gets or sets the value stored in a grid cell using Excel range notation.
            </summary>
      <param name="cellReference">Cell reference using Excel notation (e.g. "A1", "AB32").</param>
      <returns>The value stored in the cell.</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.GetAddress(C1.WPF.FlexGrid.CellRange,System.Boolean)">
      <summary>
            Gets the address of a range using Excel notation (e.g. A1).
            </summary>
      <param name="rng">
        <see cref="T:C1.WPF.FlexGrid.CellRange" /> that defines the range.</param>
      <param name="fullRange">
      </param>
      <returns>The address of the range using Excel notation (e.g. A1).</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.Evaluate(System.String)">
      <summary>
            Evaluates an expression and returns the result.
            </summary>
      <param name="expression">String containing the expression to evaluate.</param>
      <returns>The result of the expression.</returns>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.ContextMenu">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.ContextMenu" /> associated with this <see cref="T:C1.WPF.FlexGrid.C1FlexSheet" />.
            </summary>
      <remarks>
            Callers may customize the context menu by modifying the content of the Items property.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.UndoStack">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.UndoStack" /> associated with this <see cref="T:C1.WPF.FlexGrid.C1FlexSheet" />.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.FlexGrid.IUndoableAction" /> elements added to the UndoStack can be undone/re-done later.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.RemoveDuplicates(C1.WPF.FlexGrid.CellRange,System.Collections.Generic.List{System.Int32})">
      <summary>
            Delete duplicated rows.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.InsertImage(System.Windows.Media.ImageSource)">
      <summary>
            Insert image to FlexSheet
            </summary>
      <param name="imageSource">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.InsertSparkLine(C1.WPF.FlexGrid.SparkLineType,System.Collections.Generic.IEnumerable{System.Double},C1.WPF.FlexGrid.Sheet,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Insert SparkLine to C1FlexSheet
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.GetComment(System.Int32,System.Int32)">
      <summary>
            Get comment from cell.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.InsertComment(C1.WPF.FlexGrid.CellRange)">
      <summary>
            Insert comment.
            </summary>
      <param name="cell">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.RemoveComment(C1.WPF.FlexGrid.CellRange)">
      <summary>
            Remove comment
            </summary>
      <param name="cell">Deleting comment of the Cell</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.UpdateComment(C1.WPF.FlexGrid.CellRange,System.String)">
      <summary>
            Update comment
            </summary>
      <param name="cell">Updating comment of the Cell</param>
      <param name="content">Content can be raw string or RTF format</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.InsertChart(C1.WPF.C1Chart.C1Chart)">
      <summary>
            Insert chart to FlexSheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SavePdf(System.IO.Stream,C1.WPF.FlexGrid.PdfExportOptions)">
      <summary>
            Saves the grid to a PDF stream.
            </summary>
      <param name="stream">Stream where the file is to be saved.</param>
      <param name="options">
        <see cref="T:C1.WPF.FlexGrid.PdfExportOptions" /> class with parameters 
            that customize the PDF output.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SetCellFormat(System.Collections.Generic.IEnumerable{C1.WPF.FlexGrid.CellRange},C1.WPF.FlexGrid.CellFormat,System.Object)">
      <summary>
            Set format for cell.
            eg:SetCellFormat(flex.Selection.Cells, C1.WPF.FlexSheet.CellFormat.Background, new SolidColorBrush(Colors.Red));
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SetCellAngle(System.Collections.Generic.IEnumerable{C1.WPF.FlexGrid.CellRange},System.Double,System.Double)">
      <summary>
            Set rotate text for cell
            </summary>
      <param name="cells">cells to be rotate</param>
      <param name="angle">value of angle</param>
      <param name="extra">Extra height to add to the row, in pixels.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.SetCellIndent(System.Collections.Generic.IEnumerable{C1.WPF.FlexGrid.CellRange},System.Double)">
      <summary>
            Set text indent for cell
            </summary>
      <param name="cells">cells to have indent</param>
      <param name="indent">value of indent</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.Undo">
      <summary>
            Undoes the last action (valid only when <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.CanUndo" /> returns true).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.CanUndo">
      <summary>
            Gets a value that determines whether the undo stack contains any actions.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FlexSheet.CanUndoProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.CanUndo" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.Redo">
      <summary>
            Repeats the last action (valid only when <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.CanRedo" /> returns true).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.CanRedo">
      <summary>
            Gets a value that determines whether the redo stack contains any actions.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FlexSheet.CanRedoProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.FlexGrid.C1FlexSheet.CanUndo" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.GroupRows(System.Nullable{C1.WPF.FlexGrid.CellRange})">
      <summary>
            Group rows and create an outline.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.UnGroupRows(System.Nullable{C1.WPF.FlexGrid.CellRange})">
      <summary>
            Ungroup rows and create an outline. 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.EnableColumnFilters">
      <summary>
            Gets or sets whether the grid should provide column filters.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FlexSheet.EnableColumnFiltersProperty">
      <summary>
            Identifies the <see cref="F:C1.WPF.FlexGrid.C1FlexSheet.EnableColumnFiltersProperty" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.ShowFilterEditor">
      <summary>
            Show the filter editor for the currently selected column.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.CalcEngine">
      <summary>
            Gets a reference to the FlexGrid calc engine.
            </summary>
      <remarks>
            The CalcEngine responsible for all calculation jobs underlying the FlexSheet. The major jobs are parsing and evaluating the expressions.
            </remarks>
      <example>
            This sample showing how to register a custom function to the CalcEngine.
            <code>
            flexSheet.CalcEngine.RegisterFunction("GREATEST", 1, (expressions) =&gt;
            {
                CellRangeReference rangeReference = (expressions[0] as XObjectExpression).Value as CellRangeReference;
                if (rangeReference != null)
                {
                    var enumerator = rangeReference.GetEnumerator();
                    double greatest = double.MinValue;
                    while (enumerator.MoveNext())
                    {
                        double? v = (enumerator.Current as double?);
                        if (v.HasValue)
                            greatest = Math.Max(greatest, v.Value);
                    }
                    return greatest;
                }
                return null;
            });
            </code></example>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            Overridden to handle keyboard shortcuts.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.ClearSelection">
      <summary>
            Clears all nullable cells in the selection.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.ClearRange(C1.WPF.FlexGrid.CellRange)">
      <summary>
            Clears all nullable/editable cells in a given range.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.Paste">
      <summary>
            Overridden to enable undoing paste actions.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.Copy">
      <summary>
            Overridden to copy editor content if the editor is active.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FlexSheet.Item(System.Int32,C1.WPF.FlexGrid.Column)">
      <summary>
            Overridden to record individual cell assignments during a paste operation.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.ArrangeOverride(System.Windows.Size)">
      <summary>
            Overridden to update the layout of the panel with sheet tabs and horizontal scrollbar.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.OnCellEditEnded(C1.WPF.FlexGrid.CellEditEventArgs)">
      <summary>
            Invalidate all formula cells after any edits.
            </summary>
      <param name="e">
        <see cref="T:C1.WPF.FlexGrid.CellEditEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.CreateBoundRow(System.Object)">
      <summary>
            Create a row bound to the data item.
            </summary>
      <param name="dataItem">The data item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FlexSheet.OnItemsSourceChanging(System.EventArgs)">
      <summary>
            Raises the <see cref="!:ItemsSourceChanging" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:C1.WPF.FlexGrid.ImportFileFormat">
      <summary>
            Provide the file format can be imported.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ImportFileFormat.XLS">
      <summary>
            Excel 97/2003 format (Binary Interchange File Format revision 8).
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ImportFileFormat.XLSX">
      <summary>
            Office 2007/2010 format. (Compressed Xml format).
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ImportFileFormat.TXT">
      <summary>
            TXT format
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.CellFormat">
      <summary>
            Provide formats can be set.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.FontFamily">
      <summary>
            FontFamily format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.FontWeight">
      <summary>
            FontWeight format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.FontStyle">
      <summary>
            FontStyle format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.FontSize">
      <summary>
            FontSize format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.TextDecorations">
      <summary>
            TextDecorations format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.TextWrapping">
      <summary>
            TextWrapping format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.TextTrimming">
      <summary>
            TextTrimming format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.Background">
      <summary>
            Background format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.Foreground">
      <summary>
            Foreground format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.HorizontalAlignment">
      <summary>
            HorizontalAlignment format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.VerticalAlignment">
      <summary>
            VerticalAlignment format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.BorderBrush">
      <summary>
            BorderBrush format
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:C1.WPF.FlexGrid.CellFormat.BorderThickness" -->
    <member name="F:C1.WPF.FlexGrid.CellFormat.CornerRadius">
      <summary>
            CornerRadius format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.Tag">
      <summary>
            Tag format
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.CellFormat.Orientation">
      <summary>
            Orientation format
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.FlexSheetEditOptions">
      <summary>
            Specifies constants that define edit option.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.None">
      <summary>
            Not show contextMenu of FlexSheet tabs.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.Insert">
      <summary>
            Show contextMenu that insert a new sheet.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.Delete">
      <summary>
            Show contextMenu that delete a selected sheet.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.Rename">
      <summary>
            Show contextMenu that rename a selected sheet.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.Hide">
      <summary>
            Show contextMenu that hide a selected sheet.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.Unhide">
      <summary>
            Show contextMenu that unhide all of hidden sheet.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.AllowDrag">
      <summary>
            Allow drag the sheet tabs.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FlexSheetEditOptions.All">
      <summary>
            Show all of edit option contextMenus and allow drag sheet tabs. 
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelMergeManager">
      <summary>
            Merge manager based on range list
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelMergeManager.#ctor">
      <summary>
             ** ctor
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelMergeManager.GetMergedRange(C1.WPF.FlexGrid.C1FlexGrid,C1.WPF.FlexGrid.CellType,C1.WPF.FlexGrid.CellRange)">
      <summary>
            IMergeManager
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelMergeManager.GetMergedRanges(C1.WPF.Excel.XLSheet)">
      <summary>
            get merged ranges from an Excel sheet
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelMergeManager.SetMergedRanges(C1.WPF.Excel.XLSheet)">
      <summary>
            save merged ranges to an Excel sheet
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelMergeManager.RemoveRange(C1.WPF.FlexGrid.CellRange)">
      <summary>
            remove merges that contain a given range
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelMergeManager.AddRange(C1.WPF.FlexGrid.CellRange)">
      <summary>
            merge the given range
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.C1FormulaBar">
      <summary>
            Formula bar defines for C1FlexSheet
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FormulaBar.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.C1FormulaBar" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.C1FormulaBar.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.FlexGrid.C1FormulaBar" /> control when a new template is applied.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.C1FormulaBar.FlexSheet">
      <summary>
            Source to bind to Formular bar.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.C1FormulaBar.FlexSheetProperty">
      <summary>
            Identifies the <see cref="N:C1.WPF.FlexGrid" /> dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.Comment">
      <summary>
            Comment in FlexSheet
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.Comment.Content">
      <summary>
            Content of Comment, it supports RTF and raw string format 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.Comment.Text">
      <summary>
            Raw text content of Comment
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.Comment.IsShow">
      <summary>
            Get and set the comment visibility on C1FlexSheet.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelCalcEngine">
      <summary>
            Extends CalcEngine to deal with cell ranges and to use the grid's DataContext.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCalcEngine.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.ExcelCalcEngine" />.
            </summary>
      <param name="grid">
      </param>
    </member>
    <member name="P:C1.WPF.FlexGrid.ExcelCalcEngine.DataContext">
      <summary>
            Exposes the grid's DataContext to the CalcEngine.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCalcEngine.GetExternalObject(System.String)">
      <summary>
            Parses references to cell ranges.
            </summary>
      <param name="identifier">String representing a cell range (e.g. "A1" or "A1:B12".</param>
      <returns>A <see cref="T:C1.WPF.FlexGrid.CellRange" /> object that represents the given range.</returns>
    </member>
    <member name="T:C1.WPF.FlexGrid.CellRangeReference">
      <summary>
            Represents a cell range reference.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.CellRangeReference.Range">
      <summary>
            Return the range of this cell range instance.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.CellRangeReference.#ctor(C1.WPF.FlexGrid.C1FlexGrid,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Instantiate a cell range reference.
            </summary>
      <param name="grid">
      </param>
      <param name="rng">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.CellRangeReference.GetValue">
      <summary>
            Get the value at the top/left position of the cell range.
            </summary>
      <returns>The value</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.CellRangeReference.GetEnumerator">
      <summary>
            Get the enumerator to enumerate all the values in the cell range.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelCellFactory">
      <summary>
            Custom cell factory that displays Excel-style row and column headers.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.#ctor(C1.WPF.FlexGrid.C1FlexGrid)">
      <summary>
            Initializes a new instance of an <see cref="T:C1.WPF.FlexGrid.ExcelCellFactory" />.
            </summary>
      <param name="flex">
        <see cref="T:C1.WPF.FlexGrid.C1FlexGrid" /> that owns this cell factory.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.GetBorderThickness(C1.WPF.FlexGrid.C1FlexGrid,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Gets a <see cref="T:System.Windows.Thickness" /> value that represents the thickness of the cell borders.
            </summary>
      <param name="grid">
        <see cref="T:C1.WPF.FlexGrid.C1FlexGrid" /> that owns the cell.</param>
      <param name="rng">
        <see cref="T:C1.WPF.FlexGrid.CellRange" /> that specifies the row and column represented by the cell.</param>
      <returns>A <see cref="T:System.Windows.Thickness" /> value that represents the thickness of the cell borders.</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.CreateCellBorder(C1.WPF.FlexGrid.C1FlexGrid,C1.WPF.FlexGrid.CellType,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Creates a <see cref="T:System.Windows.Controls.Border" /> element that represents the background and 
            border of a grid cell and contains the cell data.
            </summary>
      <param name="grid">
        <see cref="T:C1.WPF.FlexGrid.C1FlexGrid" /> that owns the cell.</param>
      <param name="cellType">
        <see cref="T:C1.WPF.FlexGrid.CellType" /> that specifies the type of cell to be created.</param>
      <param name="rng">
        <see cref="T:C1.WPF.FlexGrid.CellRange" /> that specifies the row and column represented by the cell.</param>
      <returns>A <see cref="T:System.Windows.Controls.Border" /> element that represents the background and 
            border of a grid cell.</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.CreateTopLeftContent(C1.WPF.FlexGrid.C1FlexGrid,System.Windows.Controls.Border,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Provides content for the cells in the top left panel of the grid.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.CreateRowHeaderContent(C1.WPF.FlexGrid.C1FlexGrid,System.Windows.Controls.Border,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Provides content for the row header cells.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.CreateColumnHeaderContent(C1.WPF.FlexGrid.C1FlexGrid,System.Windows.Controls.Border,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Provides content for the column header cells.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.CreateCellContent(C1.WPF.FlexGrid.C1FlexGrid,System.Windows.Controls.Border,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Provides content for the grid cells.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.CreateCellEditor(C1.WPF.FlexGrid.C1FlexGrid,C1.WPF.FlexGrid.CellType,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Provides editable content for the grid cells.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellFactory.ApplyCellStyles(C1.WPF.FlexGrid.C1FlexGrid,C1.WPF.FlexGrid.CellType,C1.WPF.FlexGrid.CellRange,System.Windows.Controls.Border)">
      <summary>
            Applies custom styles to the outline row.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelCellStyle">
      <summary>
            Extends the CellStyle class to provide Excel-style cell borders and a format string.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.ExcelCellStyle.CellBorderThickness">
      <summary>
            Border thickness for cell.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.ExcelCellStyle.CellBorderBrushLeft">
      <summary>
            Border brush for cell.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.ExcelCellStyle.CellBorderBrushTop">
      <summary>
            Border brush for the top of cell.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.ExcelCellStyle.CellBorderBrushRight">
      <summary>
            Border brush for the right of cell.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.ExcelCellStyle.CellBorderBrushBottom">
      <summary>
            Border brush for the bottom of cell
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.ExcelCellStyle.Rotation">
      <summary>
            Rotaion for content.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelCellStyle.Apply(System.Windows.Controls.Border)">
      <summary>
            oveerrides apply border
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ContextMenuCommands">
      <summary>
            Specifies commands that may be executed from the context menu.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.Cut">
      <summary>
            Cut the selection to the clipboard.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.Copy">
      <summary>
            Copy the selection to the clipboard.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.Paste">
      <summary>
            Paste the contents of the selection over the current selection.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.Clear">
      <summary>
            Clear the content of the selection without copying it to the clipboard.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.InsertRows">
      <summary>
            Insert new rows at the cursor.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.DeleteRows">
      <summary>
            Delete the selected rows.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.InsertColumns">
      <summary>
            Insert new columns at the cursor.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.ContextMenuCommands.DeleteColumns">
      <summary>
            Delete the selected columns.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelContextMenu">
      <summary>
            Context menu customized for use with the C1FlexSheet control.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelContextMenu.GetMenuItem(C1.WPF.FlexGrid.ContextMenuCommands)">
      <summary>
            Get a <see cref="T:System.Windows.Controls.MenuItem" /> based on a command code.
            </summary>
      <param name="cmd">
        <see cref="T:C1.WPF.FlexGrid.ContextMenuCommands" /> that determines the item to be retrieved.</param>
      <returns>
        <see cref="T:System.Windows.Controls.MenuItem" /> that matches the given <paramref name="cmd" />.</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelContextMenu.ExecuteCommand(C1.WPF.FlexGrid.ContextMenuCommands)">
      <summary>
            Executes a context menu command.
            </summary>
      <param name="cmd">
        <see cref="T:C1.WPF.FlexGrid.ContextMenuCommands" /> that specifies which 
            command should be executed.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelContextMenu.OnOpened(System.Windows.RoutedEventArgs)">
      <summary>
            Overridden to disable paste command if the clipboard is empty when the context menu opens.
            </summary>
      <param name="e">
        <see cref="T:System.Windows.RoutedEventArgs" /> that provides the event data.</param>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelFilterEditor">
      <summary>
            Excel-style value filter editor.
            </summary>
      <remarks>
        <para>This control inherits from the standard <see cref="T:C1.WPF.FlexGrid.ColumnFilterEditor" />
            to modify the control appearance and to add the following functionality:</para>
        <list>
          <item>Filtered value list (users may show only a subset of the values present
            on the columns to filter on).</item>
          <item>Column sorting commands (ascending, descending, clear).</item>
          <item>Resizing (users can drag the bottom right corner of the editor to adjust
            its size.</item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelFilterEditor.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:C1.WPF.FlexGrid.ExcelFilterEditor" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelFilterEditor.OnApplyTemplate">
      <summary>
            Build the control layout.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelFilterEditor.InitializeUI">
      <summary>
            Overridden to initialize value list filter.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelFilterEditor.AddValueCheckBox(System.Object,System.Boolean)">
      <summary>
            Overridden to honor the value list filter.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelBoundRow">
      <summary>
            The row is bound to the data item int the C1FlexSheet data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelBoundRow.#ctor(System.Object)">
      <summary>
            Instantiate a new instance of <see cref="T:C1.WPF.FlexGrid.ExcelBoundRow" />.
            </summary>
      <param name="dataItem">The data item.</param>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelRow">
      <summary>
            Grid row that can be edited, used as a tree node, maintains a 
            collection of cell styles associated with each column, and 
            evaluates cells that contain formulas (strings starting with
            an equals sign).
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetFormula(C1.WPF.FlexGrid.Column)">
      <summary>
            Gets the formula in a cell.
            </summary>
      <param name="col">Column that defines the cell to retrieve.</param>
      <returns>A formula string or null.</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetDataEditor(C1.WPF.FlexGrid.Column)">
      <summary>
            Gets the data in a cell as it should be shown in the editor
            (full formulas, raw values).
            </summary>
      <param name="col">Column that defines the cell to retrieve.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetValue(C1.WPF.FlexGrid.Column)">
      <summary>
            Gets the value in a cell, evaluating expressions represented by 
            strings that start with an equals sign.
            </summary>
      <param name="col">Column that defines the cell to retrieve.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetDataRaw(C1.WPF.FlexGrid.Column)">
      <summary>
            Gets the raw data in a cell (evaluates formulas but does not format the values).
            </summary>
      <param name="col">Column that defines the cell to retrieve.</param>
      <returns>An object representing the cell value.</returns>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetDataFormatted(C1.WPF.FlexGrid.Column)">
      <summary>
            Overridden to apply formatting when getting data.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.SetCellStyle(C1.WPF.FlexGrid.Column,C1.WPF.FlexGrid.CellStyle)">
      <summary>
            Applies a style to a cell in this row.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetCellStyle(C1.WPF.FlexGrid.Column)">
      <summary>
            Gets the style applied to a cell in this row.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetCellAngle(C1.WPF.FlexGrid.Column)">
      <summary>
            Gets the angle to a cell in this row.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.SetCellAngle(C1.WPF.FlexGrid.Column,System.Double)">
      <summary>
            Applies a angle to a cell in this row.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.GetCellIndent(C1.WPF.FlexGrid.Column)">
      <summary>
            Gets the Indent to a cell in this row.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelRow.SetCellIndent(C1.WPF.FlexGrid.Column,System.Double)">
      <summary>
            Applies Indent to a cell in this row.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.SortDialog">
      <summary>
            Dialog used to edit the grid's sort parameters.
            </summary>
      <summary>
            SortDialog
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortDialog.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.SortDialog" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortDialog.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.SortDialog" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortDialog.Show">
      <summary>
            Shows the dialog to allow users to edit the sort parameters.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortDialog.Close(System.Boolean)">
      <summary>
            Closes the dialog and raises the <see cref="E:C1.WPF.FlexGrid.SortDialog.DialogClosed" /> event.
            </summary>
      <param name="cancel">Whether the changes made by the user should be
            ignored or applied to the source collection.</param>
    </member>
    <member name="E:C1.WPF.FlexGrid.SortDialog.DialogClosed">
      <summary>
            Occurs when the user closes the dialog.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortDialog.OnDialogClosed(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexGrid.SortDialog.DialogClosed" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.ComponentModel.CancelEventArgs" /> that indicates whether
            the new sort parameters should be applied or discarded.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortDialog.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.UnboundSort">
      <summary>
            Utility for sorting unbound grids.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UnboundSort.SortUnboundGrid(C1.WPF.FlexGrid.C1FlexGrid,System.Collections.Generic.IList{C1.WPF.FlexGrid.UnboundSortDescription},System.Int32,System.Int32)">
      <summary>
            Sorts the rows in an unbound grid.
            </summary>
      <param name="flex">Grid to be sorted.</param>
      <param name="sortDescriptions">List of <see cref="T:C1.WPF.FlexGrid.UnboundSortDescription" /> objects that specify the columns to sort on.</param>
      <param name="startRow">First row in the range to be sorted.</param>
      <param name="endRow">Last row in the range to be sorted.</param>
    </member>
    <member name="M:C1.WPF.FlexGrid.UnboundSort.SortUnboundGrid(C1.WPF.FlexGrid.C1FlexGrid,System.Collections.Generic.IList{C1.WPF.FlexGrid.UnboundSortDescription})">
      <summary>
            Sorts the selected rows in an unbound grid.
            </summary>
      <remarks>
            If only one row is selected, this method sorts the whole grid.
            </remarks>
      <param name="flex">Grid to be sorted.</param>
      <param name="sortDescriptions">List of <see cref="T:C1.WPF.FlexGrid.UnboundSortDescription" /> objects that specify the columns to sort on.</param>
    </member>
    <member name="T:C1.WPF.FlexGrid.UnboundSortDescription">
      <summary>
            Specifies a column to be sorted and the sort direction.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UnboundSortDescription.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.UnboundSortDescription" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UnboundSortDescription.#ctor(C1.WPF.FlexGrid.Column,System.ComponentModel.ListSortDirection)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.UnboundSortDescription" />.
            </summary>
      <param name="column">The column to sort the list by.</param>
      <param name="direction">The sort order.</param>
    </member>
    <member name="P:C1.WPF.FlexGrid.UnboundSortDescription.Column">
      <summary>
            Gets or sets the column to sort the list by.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.UnboundSortDescription.Direction">
      <summary>
            Gets or sets the sort direction.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UnboundSortDescription.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexGrid.UnboundSortDescription.PropertyChanged" /> event.
            </summary>
      <param name="propName">Name of the property whose value changed.</param>
    </member>
    <member name="E:C1.WPF.FlexGrid.UnboundSortDescription.PropertyChanged">
      <summary>
            Occurs when the value of a property changes.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.FindOption">
      <summary>
            Specifies class that define for Find Option.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.FindOption.FindRange">
      <summary>
            Gets or sets find range for find
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.FindOption.FindPriority">
      <summary>
            Gets or sets find priorty for find
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.FindOption.IsMatchCase">
      <summary>
            Gets or sets match case for find
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.FindOption.IsMatchEntireContent">
      <summary>
            Gets or sets match entire Ccontent for find
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.FindRange">
      <summary>
            Specifies constants that define for Find Range.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FindRange.Sheet">
      <summary>
            Find in current sheet
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FindRange.Workbook">
      <summary>
            Find in whole workbook
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.FindPriority">
      <summary>
            Specifies constants that define for Find Priority.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FindPriority.ByRows">
      <summary>
            Find by rows.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexGrid.FindPriority.ByColumns">
      <summary>
            Find by columns.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.FindResult">
      <summary>
            Specifies constants that define for Find Result.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.FindResult.Sheet">
      <summary>
            Gets or sets the result sheet
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.FindResult.Cells">
      <summary>
            Get or set the cell rangs of result
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.GridSplitter">
      <summary>
            Gird Splitter defines for C1FlexSheet.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.PageTemplate">
      <summary>
            Interaction logic for PageTemplate.xaml
            </summary>
      <summary>
            PageTemplate
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.PageTemplate.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.PdfExportOptions">
      <summary>
            Provide options for pdf export.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.PdfExportOptions.#ctor">
      <summary>
            construct the PdfExportOptions
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.PdfExportOptions.Margin">
      <summary>
            Indicated the margin for pdf.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.PdfExportOptions.ScaleMode">
      <summary>
            Indicated the ScaleMode for pdf exporting.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.PdfExportOptions.DocumentTitle">
      <summary>
            Indicate the title for exported pdf.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.PdfExportOptions.KnownPageCount">
      <summary>
            Indicate max pages for exported pdf.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.PdfExportOptions.Landscape">
      <summary>
            Indicate the landscape for exported pdf.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.FlexSheetPaginator">
      <summary>
            The printing document paginator implementation to print C1FlexSheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.FlexSheetPaginator.#ctor(C1.WPF.FlexGrid.C1FlexSheet,System.Windows.Size,System.Collections.Generic.List{System.Windows.FrameworkElement},C1.WPF.FlexGrid.PrintParameters,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Double)">
      <summary>
            Instantiate a new instance of the <see cref="T:C1.WPF.FlexGrid.FlexSheetPaginator" />.
            </summary>
      <param name="sheets">The C1FlexSheet instance.</param>
      <param name="pageSize">The size of the page.</param>
      <param name="pages">The List of the printed pages.</param>
      <param name="p">The <see cref="T:C1.WPF.FlexGrid.PrintParameters" /> used for printing.</param>
      <param name="colBreaks">The collection of column breaks.</param>
      <param name="rowBreaks">The collection of row breaks.</param>
      <param name="zoom">The zoom parameter.</param>
    </member>
    <member name="T:C1.WPF.FlexGrid.Sheet">
      <summary>
            Represents a worksheet within an ExcelBook.
            </summary>
      <remarks>
            This class extends the C1TabItem class and has an editable label on its header,
            which represents the sheet name, and a C1FlexGrid control that contains the sheet 
            content.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexGrid.Sheet.#ctor(C1.WPF.Excel.XLSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.Sheet" />.
            </summary>
      <param name="xlSheet">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.Sheet.#ctor(C1.WPF.Excel.XLSheet,C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Construct a new sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.Sheet.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.Sheet" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.Sheet.SheetName">
      <summary>
            Sheet name for the sheet.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.Sheet.Grid">
      <summary>
            The flexgrid in sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.Sheet.EditName">
      <summary>
            Start edit the sheet name.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.Sheet.IsProtected">
      <summary>
            Indicated whether the sheet is protected
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.Sheet.AddLockedCell(System.Int32,System.Int32)">
      <summary>
            Locked the specified cell..
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.Sheet.AddLockedCell(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
             Locked the specified cell range.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.NewSheet">
      <summary>
            Special item that doesn't have an associated sheet, it simply creates a new sheet
            when it is clicked.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.NewSheet.#ctor">
      <summary>
            construct the NewSheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.NewSheet.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            override the mouse left button.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.FlexGrid.SheetCollection">
      <summary>
            Class that managers the list of Sheet items associated with a grid and provides
            methods for adding, removing, deleting, and renaming sheets.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.SheetCollection.SelectedIndex">
      <summary>
            Gets or sets the index of the currently selected sheet in the collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.SheetCollection.SelectedSheet">
      <summary>
            Gets or sets the currently selected sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.IndexOf(System.String)">
      <summary>
            Gets the index of the sheet with a given name.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.Contains(System.String)">
      <summary>
            Determines whether the collection contains a sheet with a given name.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.SheetCollection.Item(System.String)">
      <summary>
            Retrieves a sheet by name.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.InsertSheet(System.Boolean)">
      <summary>
            Inserts a new sheet at the currently selected position or appends it to the collection.
            </summary>
      <param name="append">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.DeleteSheet">
      <summary>
            Deletes the current sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.RenameSheet">
      <summary>
            Puts the current sheet in edit mode so the user can rename it.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.HideSheet">
      <summary>
            Hides the current sheet from view.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.UnhideSheets">
      <summary>
            Unhides all hidden sheets.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.SelectFirst">
      <summary>
            Selects the first visible sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.SelectPrev">
      <summary>
            Selects the previous visible sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.SelectNext">
      <summary>
            Selects the next visible sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.SelectLast">
      <summary>
            Selects the last visible sheet.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Synchronize tabs control with this collection.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.FlexGrid.SheetContextMenu">
      <summary>
            Context menu defines for C1FlexSheet tabs, which include insert, delete, rename, hide, unhide functions.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetContextMenu.#ctor(C1.WPF.FlexGrid.Sheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.SheetContextMenu" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SheetContextMenu.OnOpened(System.Windows.RoutedEventArgs)">
      <summary>
            override the OnOpened method.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.SparkLineType">
      <summary>
            Provide the sparkline type.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ExcelUndoStack">
      <summary>
            Undo/Redo stack for the C1FlexGrid.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ExcelUndoStack.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.ExcelUndoStack" />.
            </summary>
      <param name="flex">
        <see cref="T:C1.WPF.FlexGrid.C1FlexGrid" /> that owns this undo stack.</param>
    </member>
    <member name="T:C1.WPF.FlexGrid.IUndoableAction">
      <summary>
            Defines the methods required to implement undoable action objects.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.IUndoableAction.Undo">
      <summary>
            Reverses the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.IUndoableAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.IUndoableAction.SaveNewState">
      <summary>
            Saves the state after the action (the state before should be saved in the constructor).
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.EditAction">
      <summary>
            Undoable edit action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.EditAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet,C1.WPF.FlexGrid.CellRange)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.EditAction" />.
            </summary>
      <param name="flex">
      </param>
      <param name="cell">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.EditAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.EditAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.EditAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.ColumnResizeAction">
      <summary>
            Undoable resize column action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ColumnResizeAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.ColumnResizeAction" />.
            </summary>
      <param name="flex">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.ColumnResizeAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ColumnResizeAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.ColumnResizeAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.InsertDeleteColumnAction">
      <summary>
            Undoable insert/delete column action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteColumnAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.InsertDeleteColumnAction" />.
            </summary>
      <param name="flex">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteColumnAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteColumnAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteColumnAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.RowResizeAction">
      <summary>
            Undoable resize row action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.RowResizeAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet,C1.WPF.FlexGrid.CellRangeEventArgs)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.RowResizeAction" />.
            </summary>
      <param name="flex">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.RowResizeAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.RowResizeAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.RowResizeAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.InsertDeleteRowAction">
      <summary>
            Undoable insert/delete row action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteRowAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.InsertDeleteRowAction" />.
            </summary>
      <param name="flex">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteRowAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteRowAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.InsertDeleteRowAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.SortAction">
      <summary>
            Undoable Sort action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.SortAction" />.
            </summary>
      <param name="flex">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.SortAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.PasteAction">
      <summary>
            Undoable Paste action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.PasteAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of an <see cref="T:C1.WPF.FlexGrid.PasteAction" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.PasteAction.PasteCell(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
            Adds information about an individual cell changing within a paste operation.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.PasteAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.PasteAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.PasteAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.CellStyleChangeAction">
      <summary>
            Undoable Cell style changing action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.CellStyleChangeAction.#ctor(C1.WPF.FlexGrid.C1FlexSheet)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.FlexGrid.CellStyleChangeAction" />.
            </summary>
      <param name="flex">
      </param>
    </member>
    <member name="M:C1.WPF.FlexGrid.CellStyleChangeAction.SaveNewState">
      <summary>
            Saves the state of the control after the action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.CellStyleChangeAction.Undo">
      <summary>
            Reverts the effect of the last action.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.CellStyleChangeAction.Redo">
      <summary>
            Restores the effect of the last undone action.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexGrid.UndoStack">
      <summary>
            Generic Undo/Redo stack.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UndoStack.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:C1.WPF.FlexGrid.UndoStack" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UndoStack.Clear">
      <summary>
            Clears the undo/redo stack.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.UndoStack.CanUndo">
      <summary>
            Gets a value that indicates whether the stack contains actions that can be undone.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexGrid.UndoStack.CanRedo">
      <summary>
            Gets a value that indicates whether the stack contains actions that can be re-done.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UndoStack.Undo">
      <summary>
            Executes an Undo command.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UndoStack.Redo">
      <summary>
            Executes a Redo command.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UndoStack.AddAction(C1.WPF.FlexGrid.IUndoableAction)">
      <summary>
            Adds an action to the undo/redo stack.
            </summary>
    </member>
    <member name="E:C1.WPF.FlexGrid.UndoStack.StateChanged">
      <summary>
            Occurs when the status of the undo stack changes.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexGrid.UndoStack.OnStateChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexGrid.UndoStack.StateChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event parameters.</param>
    </member>
  </members>
</doc>