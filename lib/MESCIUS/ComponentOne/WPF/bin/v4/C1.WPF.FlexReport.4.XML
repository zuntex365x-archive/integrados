<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF.FlexReport.4</name>
  </assembly>
  <members>
    <member name="T:C1.WPF.FlexReport.FlexChart.Axis">
      <summary>
            Represents an axis in the FlexChartField.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.Axis.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.Axis" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.Axis.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.Axis" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Position">
      <summary>
            Gets or sets the axis position.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Origin">
      <summary>
            Gets or sets the value at which an axis crosses the perpendicular axis.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Reversed">
      <summary>
            Gets or sets a value indicating whether the axis is reversed (top to bottom or right to left).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Labels">
      <summary>
            Gets or sets a value indicating whether the axis labels are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.LabelAngle">
      <summary>
            Gets or sets the rotation angle of the axis labels.
            </summary>
      <remarks>The angle is measured in degrees with valid values ranging from -90 to 90.</remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Format">
      <summary>
            Gets or sets the format string used for the axis labels.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Title">
      <summary>
            Gets or sets the title text shown next to the axis.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.TitleStyle">
      <summary>
            Gets the axis title style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MajorTickMarks">
      <summary>
            Gets or sets the location of the axis tick marks.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MajorGrid">
      <summary>
            Gets or sets a value indicating whether the axis includes grid lines.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MajorGridStyle">
      <summary>
            Gets the major grid style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MajorUnit">
      <summary>
            Gets or sets the number of units between axis labels.
            </summary>
      <remarks>If the axis contains date values, then the units are expressed in days.</remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MinorTickMarks">
      <summary>
            Gets or sets the location of the axis minor tick marks.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MinorGrid">
      <summary>
            Gets or sets a value indicating whether the axis includes minor grid lines.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MinorGridStyle">
      <summary>
            Gets the minor grid style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.MinorUnit">
      <summary>
            Gets or sets the number of units between minor ticks and grid lines.
            </summary>
      <remarks>If the axis contains date values, then the units are expressed in days.</remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.LogBase">
      <summary>
            Gets or sets the logarithmic base of the axis.
            </summary>
      <remarks>If the base is equal to NaN(default value) the axis uses a linear scale.</remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.AxisLine">
      <summary>
            Gets or sets a value indicating whether the axis line is visible.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.LabelAlignment">
      <summary>
            Gets or sets the alignment of axis labels.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Min">
      <summary>
            Gets or sets the minimum value shown on the axis.
            </summary>
      <remarks>
            If the minimum is equal to NaN(default value) the minimum is calculated automatically.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Max">
      <summary>
            Gets or sets the maximum value shown on the axis.
            </summary>
      <remarks>
            If the maximum is equal to NaN(default value) the maximum is calculated automatically.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.Style">
      <summary>
            Gets the axis style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Axis.OverlappingLabels">
      <summary>
            Gets or sets a value indicating how to handle the overlapping axis labels.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.AxisX">
      <summary>
            Represents default X axis in the FlexChartField.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.AxisX.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.AxisX" /> object.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.AxisY">
      <summary>
            Represents default Y axis in the FlexChartField.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.AxisY.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.AxisY" /> object.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.ChartNamedObject">
      <summary>
            The abstract base class for named flex chart objects. 
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartNamedObject.SetName(System.String)">
      <summary>
            Sets the name of the current object.
            </summary>
      <param name="value">The new name for the object.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartNamedObject.Clone">
      <summary>
            Clones the current object.
            </summary>
      <returns>The newly created clone.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartNamedObject.Name">
      <summary>
            Gets or sets the unique name of the current object.
            If an item with the specified name already exists in the owner,
            an exception is thrown.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.ChartObject">
      <summary>
            The abstract base class for flex chart objects. 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartObject.Field">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.FlexChartFieldBase" /> containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartObject.ParentReport">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> containing this object.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.ChartOptions">
      <summary>
            Specifies chart options.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartOptions.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.ChartOptions" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartOptions.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.Legend" /> object.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartOptions.InterpolateNulls">
      <summary>
            Gets or sets a value indicating how to interpret missing values.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartOptions.ClusterSize">
      <summary>
            Gets or sets the cluster size for column and bar charts.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartOptions.BubbleMinSize">
      <summary>
            Gets or sets the minimal symbol size for bubble chart.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartOptions.BubbleMaxSize">
      <summary>
            Gets or sets the maximum symbol size for bubble chart.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.ChartStyle">
      <summary>
            Specifies the visual style for FlexChartField elements.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartStyle.StrokeColor">
      <summary>
            Gets or sets the stroke color, <b>null</b> indicates default color.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartStyle.StrokeWidth">
      <summary>
            Gets or sets the stroke width.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartStyle.FillColor">
      <summary>
            Gets or sets the fill color, <b>null</b> indicates default color.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartStyle.Font">
      <summary>
            Gets or sets the font.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartStyle.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.ChartStyle" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartStyle.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.ChartStyle" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.ChartTitle">
      <summary>
            Represents chart title(header or footer).
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartTitle.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.ChartTitle" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.ChartTitle.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.ChartTitle" /> object.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartTitle.Content">
      <summary>
            Gets or sets the title content.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartTitle.Border">
      <summary>
            Gets or sets a value indicating whether the title has border.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartTitle.HorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the title.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartTitle.Style">
      <summary>
            Gets the title style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.ChartTitle.BorderStyle">
      <summary>
            Gets the title border style.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.DataGroup">
      <summary>
            Represents a chart data group definition.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.DataGroup.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.DataGroup" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.DataGroup.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.DataGroup" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataGroup.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.FlexChart.DataGroupCollection" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataGroup.Sort">
      <summary>
            Gets or sets the sort type of the data group.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataGroup.GroupExpression">
      <summary>
            Gets or sets the expression for grouping.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataGroup.FilterExpression">
      <summary>
            Gets or sets the expresion for filtering.
            After grouping by GroupExpression, data is filtered by FilterExpression.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataGroup.SortExpression">
      <summary>
            Gets or sets the sorting expression. Applied after filtering.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataGroup.FilterOutName">
      <summary>
            Gets or sets the name of a new group which combines all filtered out data.
            If empty, filtered out data is discarded.
            </summary>
      <remarks>
             Empty means discard others.
            </remarks>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.DataGroupCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.FlexChart.DataGroup" /> objects.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.DataLabel">
      <summary>
            Represents a label associated with data point in <see cref="T:C1.WPF.FlexReport.FlexChartField" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.DataLabel.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.DataLabel" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.DataLabel.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.DataLabel" /> object.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataLabel.Position">
      <summary>
            Gets or sets the position of data labels.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.DataLabelBase">
      <summary>
            Base class for data label.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.DataLabelBase.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.DataLabelBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataLabelBase.Content">
      <summary>
            Gets or sets the content of data labels.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataLabelBase.Border">
      <summary>
            Gets or sets a value indicating whether the label has border.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataLabelBase.ConnectingLine">
      <summary>
            Gets or sets a value indicating whether the data labels have a line connecting them with corresponding data point. 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataLabelBase.Offset">
      <summary>
            Gets or sets the offset of data label from corresponding data point in twips, 0 (default) indicates auto value.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataLabelBase.Style">
      <summary>
            Gets the style of data labels.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.DataLabelBase.BorderStyle">
      <summary>
            Gets the border style of data labels.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.Legend">
      <summary>
            Represents chart legend.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.Legend.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.Legend" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.Legend.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.Legend" /> object.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Legend.Position">
      <summary>
            Gets or sets the legend position.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Legend.Style">
      <summary>
            Gets the legend style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Legend.TitleStyle">
      <summary>
            Gets the legend title style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Legend.Title">
      <summary>
            Gets or sets the legend title.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Legend.Orientation">
      <summary>
            Gets or sets the legend orientation.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.Series">
      <summary>
            Represents series in the <see cref="T:C1.WPF.FlexReport.FlexChartField" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.Series.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.FlexReport.FlexChart.Series" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.Series.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChart.Series" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChart.Series.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChart.Series" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.DataSourceName">
      <summary>
            Gets or sets the name of the data source for the series.
            The name must match the name of a data source in the report's DataSources collection.
            <para>Empty string indicates that the <see cref="!:FlexChartFieldBase.DataSource" /> will be used.</para></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.XExpression">
      <summary>
            Gets or sets an expression used to obtain X data.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.HasYExpressions">
      <summary>
            Gets a value indicating whether <see cref="P:C1.WPF.FlexReport.FlexChart.Series.YExpressions" /> is not empty.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.YExpressions">
      <summary>
            Gets or sets an array of expressions used to obtain Y data.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.YExpression">
      <summary>
            Gets or sets an expression used to obtain Y data.
            This property works over <see cref="P:C1.WPF.FlexReport.FlexChart.Series.YExpressions" /> and gets or sets the element with index 0.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.Y1Expression">
      <summary>
            Gets or sets an expression used to obtain Y1 data for Hi-Lo, Hi-Lo-Open-Close, Candle and Bubble charts.
            This property works over <see cref="P:C1.WPF.FlexReport.FlexChart.Series.YExpressions" /> and gets or sets the element with index 1.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.Y2Expression">
      <summary>
            Gets or sets an expression used to obtain Y2 data for Hi-Lo, Hi-Lo-Open-Close and Candle charts.
            This property works over <see cref="P:C1.WPF.FlexReport.FlexChart.Series.YExpressions" /> and gets or sets the element with index 2.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.Y3Expression">
      <summary>
            Gets or sets an expression used to obtain Y3 data for Hi-Lo, Hi-Lo-Open-Close and Candle charts.
            This property works over <see cref="P:C1.WPF.FlexReport.FlexChart.Series.YExpressions" /> and gets or sets the element with index 3.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.Label">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the label of the series.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.Style">
      <summary>
            Gets or sets the series style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.AltStyle">
      <summary>
            Gets or sets the series alternatve style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.ChartType">
      <summary>
            Gets or sets the series chart type.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.Visibility">
      <summary>
            Gets or sets the series visibility.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.SymbolStyle">
      <summary>
            Gets or sets the series symbol style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.SymbolSize">
      <summary>
            Gets or sets the size (in twips) of the symbols used to render this Series.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.SymbolMarker">
      <summary>
            Gets or sets the shape of marker to use for each data point in the series.
            Applies to Scatter, LineSymbols, and SplineSymbols chart types.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChart.Series.Hyperlink">
      <summary>
            Gets the hyperlink associated with the series.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChart.SeriesCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.FlexChart.Series" /> objects.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChartField">
      <summary>
            Represents a report field with a chart which is implemented using the <b>FlexChart</b> control.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChartField.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.FlexReport.FlexChartField" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChartField.CreateSame">
      <summary>
            Creates instance of same class as this object.
            </summary>
      <returns>Created <see cref="T:C1.WPF.FlexReport.FlexChartField" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChartField.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChartField" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignName">Indicates whether the name of the object should be copied.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.CategoryGroups">
      <summary>
            Gets the collection of category groups which provide labels for X-Axis.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.SeriesGroups">
      <summary>
            Gets the collection of optional series group for extra levels of data.
            </summary>
      <remarks>
            Optional, provides extra levels of data (for example, Orders by Country can be broken down by years as well).
            Labels for the series are displayed in the legend.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.Series">
      <summary>
            Gets the collection of the series.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.XLabelExpression">
      <summary>
            Gets or sets an expression used to generate data labels on X axis.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.AxisX">
      <summary>
            Gets the chart x-axis.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.AxisY">
      <summary>
            Gets the chart y-axis.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.DataLabel">
      <summary>
            Gets the chart data label.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.Options">
      <summary>
            Gets various chart options.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.PlotMargin">
      <summary>
            Gets or sets the plot area margin.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.Rotated">
      <summary>
            Gets or sets a value indicating whether to flip the axes so that
            X is vertical and Y is horizontal.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.Stacking">
      <summary>
            Gets or sets the data stacking.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartField.ChartType">
      <summary>
            Gets or sets the chart type.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FlexChartFieldBase">
      <summary>
            Abstract base class for report fields with <b>FlexChart</b>-based charts.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChartFieldBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.FlexChartFieldBase" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChartFieldBase.GetDataSource">
      <summary>
            Returns <see cref="T:C1.WPF.FlexReport.DataSource" /> specified for this field in the <see cref="P:C1.WPF.FlexReport.FlexChartFieldBase.DataSourceName" /> property,
            returns null if <see cref="P:C1.WPF.FlexReport.FlexChartFieldBase.DataSourceName" /> is null or empty, throws an exception
            if <see cref="T:C1.WPF.FlexReport.DataSource" /> with specified name not found.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FlexChartFieldBase.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FlexChartFieldBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignName">Indicates whether the name of the object should be copied.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartFieldBase.DataSourceName">
      <summary>
            Gets or sets the name of the data source for the chart.
            The name must match a name of a data source in the report's DataSources collection.
            Empty string indicates that the main data source will be used.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartFieldBase.Font">
      <summary>
            Gets or sets the default font used in the chart.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartFieldBase.Header">
      <summary>
            Gets the chart header.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartFieldBase.Footer">
      <summary>
            Gets the chart footer.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartFieldBase.Legend">
      <summary>
            Gets the chart legend.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartFieldBase.PlotStyle">
      <summary>
            Gets the style of plot area (area inside axes).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FlexChartFieldBase.Palette">
      <summary>
            Gets or sets the chart palette.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportParameterValue">
      <summary>
            Represents a report parameter value.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportParameterValue.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportParameterValue" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportParameterValue.AssignFrom(System.Object)">
      <summary>
            Copies properties from another <see cref="T:C1.WPF.FlexReport.ReportParameterValue" /> object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameterValue.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object containing this value.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameterValue.Owner">
      <summary>
            Gets the <see cref="!:SubreportParameterValus" /> collection containing this value.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameterValue.Value">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.FlexReport.ScriptObjectValue" /> yielding the value of the parameter.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.IReportParameterValuesOwner">
      <summary>
            Should be implemented by the class owning <see cref="T:C1.WPF.FlexReport.ReportParameterValues" />.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportParameterValues">
      <summary>
            Collection of the <see cref="T:C1.WPF.FlexReport.ReportParameterValue" /> objects.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameterValues.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.IReportParameterValuesOwner" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameterValues.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> containing this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.BehaviorOptions">
      <summary>
            Specifies compatibility options for a <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            Properties in this class can be used to control compatibility
            with older versions and with <b>C1Report</b>.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.BehaviorOptions.Reset">
      <summary>
            Resets all properties to their default values.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.BehaviorOptions.AssignFrom(C1.WPF.FlexReport.BehaviorOptions)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.BehaviorOptions" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.BehaviorOptions.AddOperatorAsInC1Report">
      <summary>
            Gets or sets a value indicating whether ADD script operator should work as in C1Report.
            The default is false. Setting this to true improves compatibility with C1Report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BehaviorOptions.IgnoreMarginsForEmptyFields">
      <summary>
            Gets or sets a value indicating whether for empty fields with
            <see cref="P:C1.WPF.FlexReport.FieldBase.AutoHeight" /> or <see cref="P:C1.WPF.FlexReport.FieldBase.AutoWidth" />
            set to <see cref="F:C1.WPF.FlexReport.AutoSizeBehavior.CanShrink" />,
            margins and borders will have zero heights or widths in
            the generated report layout. The default is false. Setting this to
            true improves compatibility with C1Report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BehaviorOptions.EnableAggregatesOnReportFields">
      <summary>
            Gets or sets a value indicating whether report fields can be used in aggregate functions.
            The default is false. Set this property to true to improve compatibility with C1Report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BehaviorOptions.AllowHorizontalSplitting">
      <summary>
            Gets or sets a value indicating whether the report content can be split 
            when it is too wide to fit in the horizontal space available on the page.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BehaviorOptions.UseDefaultPrinterPaperSize">
      <summary>
            Gets or sets a value indicating whether the paper size of default printer is used
            when <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> is <b>Custom</b> and both <see cref="P:C1.WPF.FlexReport.Layout.CustomWidth" /> and <see cref="P:C1.WPF.FlexReport.Layout.CustomHeight" />
            are <b>0</b> (unspecified).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BehaviorOptions.IgnoreInvisibleFieldsInGrowShrinkSections">
      <summary>
            Gets or sets a value indicating whether invisible fields should be ignored
            when calculating the heights of CanGrow/CanShrink sections.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BehaviorOptions.FireOnFormatForEachInstanceOfRepeatedGroupSection">
      <summary>
            Gets or sets a value indicating whether the OnFormat script is fired
            for each instance of a repeated group footer section, or just once for the
            first instance. Applies only to groups with Repeat property set to true.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.IReportScriptContext">
      <summary>
            Represents a local context for script evaluation and execution.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IReportScriptContext.GetObjectByName(System.String)">
      <summary>
            Retrieves an object by its name.
            </summary>
      <param name="name">The name of the object to get.</param>
      <returns>The named object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.IReportScriptContext.IsNameDefined(System.String)">
      <summary>
            Tests whether the specified name exists in the current context.
            If a certain name is defined by the context (i.e. this method returns true),
            the named object will be retrieved from the context even if a similarly named object
            already exists.
            </summary>
      <param name="name">The name to test.</param>
      <returns>True if the name exists in the context, false otherwise.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.GrowShrinkModeEnum">
      <summary>
            Specifies the logic for handling CanGrow/CanShrink fields.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.WPF.FlexReport.C1FlexReport.GrowShrinkMode" /> property in the <see cref="F:C1.WPF.FlexReport.GrowShrinkModeEnum.C1Report" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.GrowShrinkModeEnum.C1Report">
      <summary>
            Uses the standard C1FlexReport mode, where fields that grow or shrink affect only fields directly below.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.GrowShrinkModeEnum.Access">
      <summary>
            Uses a mode that is similar to MS Access, where fields that grow or shrink affect all fields below, 
            even if they are off to the side of the field that grew or shrank.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartPage" />, <see cref="E:C1.WPF.FlexReport.C1FlexReport.EndPage" />, 
            <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartSection" />, <see cref="E:C1.WPF.FlexReport.C1FlexReport.PrintSection" /> events.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportEventArgs">
      <summary>
            Provides data for <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartPage" />, <see cref="E:C1.WPF.FlexReport.C1FlexReport.EndPage" />, <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartSection" />, 
            <see cref="E:C1.WPF.FlexReport.C1FlexReport.PrintSection" /> events.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ReportEventArgs.Page">
      <summary>
            The current page.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ReportEventArgs.Section">
      <summary>
            The current section.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportErrorEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.WPF.FlexReport.ReportErrorEventArgs" /> object defining event data.</param>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportErrorEventArgs">
      <summary>
            Provides data for <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ReportErrorEventArgs.Page">
      <summary>
            The current page.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ReportErrorEventArgs.Exception">
      <summary>
        <see cref="F:C1.WPF.FlexReport.ReportErrorEventArgs.Exception" /> that caused the error.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ReportErrorEventArgs.Handled">
      <summary>
            Gets or sets a value that indicates whether the component should throw the <see cref="F:C1.WPF.FlexReport.ReportErrorEventArgs.Exception" /> 
            that was detected or whether it should ignore the error and continue rendering the report.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportGetScriptObjectEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:C1.WPF.FlexReport.C1FlexReport.GetScriptObject" /> event.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportGetScriptObjectEventArgs">
      <summary>
            Provides data for <see cref="E:C1.WPF.FlexReport.C1FlexReport.GetScriptObject" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportGetScriptObjectEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportGetScriptObjectEventArgs" /> class.
            </summary>
      <param name="name">The name of the object.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportGetScriptObjectEventArgs.Name">
      <summary>
            Gets the name of the object used in script.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportGetScriptObjectEventArgs.Object">
      <summary>
            Gets or sets the object associated with name specified in the <see cref="P:C1.WPF.FlexReport.ReportGetScriptObjectEventArgs.Name" /> property.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ExecuteScriptAction">
      <summary>
            Executes specified script and generates the report.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ExecuteScriptAction.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ExecuteScriptAction" /> object.
            </summary>
      <param name="script">The script to execute.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ExecuteScriptAction.Script">
      <summary>
            Gets the script to execute.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.RenderReportAction">
      <summary>
            Renders the report with specified set of parameters.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.RenderReportAction.#ctor(System.Byte[],System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.RenderReportAction" /> object.
            </summary>
      <param name="reportTemplate">Array containing the report definition.</param>
      <param name="parameterValues">The initial values of report parameters.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.RenderReportAction.ReportTemplate">
      <summary>
            Gets the array of bytes containing the report template. 
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.RenderReportAction.ParameterValues">
      <summary>
            Gets the initial values of report parameters.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.C1FlexReport">
      <summary>
            Generates data-based banded reports that can be rendered to printer, preview,
            or exported to various portable formats (including HTML, PDF and other).
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Write(C1.WPF.Document.Serialization.C1WriterBase)">
      <summary>
            Override in derived classes to provide advanced persistence mechanism.
            Use <see cref="T:C1.WPF.Document.Serialization.C1WriterBase" /> methods to write additional object properties.
            </summary>
      <param name="writer">
        <see cref="T:C1.WPF.Document.Serialization.C1WriterBase" /> object provides methods to write additional information.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.ReadProp(C1.WPF.Document.Serialization.C1ReaderBase)">
      <summary>
            Override in derived classes to provide advanced persistence mechanism.
            Use <see cref="P:C1.WPF.Document.Serialization.C1ReaderBase.PropName" /> to determine the name of the current property,
            use C1ReaderBase.ReadXXX(...) to read property value.
            </summary>
      <param name="reader">
        <see cref="T:C1.WPF.Document.Serialization.C1ReaderBase" /> object provides methods and properties to read property value.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnLongOperation(System.Double,System.Boolean)">
      <summary>
            Overriden. Raises the <see cref="E:C1.WPF.Document.C1DocumentSource.LongOperation" /> event
            </summary>
      <param name="complete">
      </param>
      <param name="canCancel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.CreateParametersCollection">
      <summary>
            Overriden. Creates <see cref="T:C1.WPF.FlexReport.ReportParameterCollection" /> collection containing list of report parameters.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnStartReport">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartReport" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnEndReport">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.EndReport" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnGetScriptObject(System.String)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.GetScriptObject" /> event.
            </summary>
      <param name="name">The name of object.</param>
      <returns>Returns the object associated with specified name.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnReportError(System.Int32,System.Exception,System.Boolean)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event.
            </summary>
      <param name="pageNo">The number of page (one-based) where error occurs.</param>
      <param name="exception">The occured exception.</param>
      <param name="fatal">Indicates whether the component should throw the <paramref name="exception" /> that was detected or whether it should ignore the error and continue rendering the report.</param>
      <returns>Returns <b>false</b> if report rendering should be stopped <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnNoReportData">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.NoData" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnPrintSection(C1.WPF.FlexReport.Section)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.PrintSection" /> event.
            </summary>
      <param name="section">
        <see cref="T:C1.WPF.FlexReport.Section" /> object.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnStartSection(C1.WPF.FlexReport.Section)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartSection" /> event.
            </summary>
      <param name="section">
        <see cref="T:C1.WPF.FlexReport.Section" /> object.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnStartPage(System.Int32)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartPage" /> event.
            </summary>
      <param name="pageNo">The number of the started page.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnEndPage(System.Int32)">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.EndPage" /> event.
            </summary>
      <param name="pageNo">The number of the finished page.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.OnReportDefinitionChanged">
      <summary>
            Raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportDefinitionChanged" /> event.
            Called each time a property on the current report or on any of the contained objects in changed.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Init">
      <summary>
            Overriden. Performs additional initializations of this <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> instance.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(C1.WPF.Document.Serialization.XmlDocumentWrapperBase)">
      <summary>
            Gets a list of reports available in an <see cref="T:C1.WPF.Document.Serialization.XmlDocumentWrapperBase" />.
            </summary>
      <param name="doc">Reference to <see cref="T:C1.WPF.Document.Serialization.XmlDocumentWrapperBase" /> object.</param>
      <returns>A string array containing the names of all reports in the document.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.RightToLeft">
      <summary>
            Gets or sets a value indicating whether the fields of the report should use right-to-left rules for rendering text.
            <para>If null (which is the default), the value of the static property <see cref="P:C1.WPF.FlexReport.C1FlexReport.DefaultRightToLeft" /> is used.</para><para>This value may be overridden by individual fields.</para></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.ActualRightToLeft">
      <summary>
            Gets the actual right-to-left value that is being used. The value is obtained using the following rules:
            <list type="number"><item>If <see cref="P:C1.WPF.FlexReport.C1FlexReport.RightToLeft" /> is not null, then that value is used.</item><item>If the current report is a sub-report, then <see cref="P:C1.WPF.FlexReport.C1FlexReport.ActualRightToLeft" /> of the owner subreport field is used.</item><item>Else the value of <see cref="P:C1.WPF.FlexReport.C1FlexReport.DefaultRightToLeft" /> static property is used.</item></list></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.AvailableHeight">
      <summary>
            Gets the height of the remaining area available for sections on the current page.
            This property can only be used while the report is being rendered in paginated mode (i.e. when <see cref="P:C1.WPF.Document.C1DocumentSource.IsBusy" /> and <see cref="P:C1.WPF.Document.C1DocumentSource.Paginated" /> are true).
            If <see cref="P:C1.WPF.Document.C1DocumentSource.IsBusy" /> is false then -1 is returned. If <see cref="P:C1.WPF.Document.C1DocumentSource.Paginated" /> is false then double.MaxValue is returned.
            Note that if used in OnPrint/OnFormat scripts, this value does NOT account for the current section's height.
            For subreports this property returns <see cref="P:C1.WPF.FlexReport.C1FlexReport.AvailableHeight" /> of the master report.
            </summary>
      <remarks>
            Here is an example of code which can be used in the detail section's OnFormat script
            to determine whether the current detail section will be the last one printed on the page
            (the test checks that the current section will fit onto the page while the next section won't):
            <code>
            h = Detail.RenderHeight
            ah = Report.AvailableHeight
            if (h &lt; ah) and (2 * h &gt; ah) then
              Detail.BackColor = RGB(255, 0, 0) ' last on page
            else
              Detail.BackColor = RGB(255, 255, 255)
            endif
            </code></remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.CurrentDataScope">
      <summary>
            For internal use.
            Specifies the current data scope.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.PageSettings">
      <summary>
            Overriden.
            This is shortcut to the page settings returned by the <see cref="P:C1.WPF.FlexReport.C1FlexReport.Layout" /> object
            accessible via the <see cref="P:C1.WPF.FlexReport.C1FlexReport.Layout" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.ActualCulture">
      <summary>
            Gets the actual culture used in report, returns <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />
            if <see cref="P:C1.WPF.FlexReport.C1FlexReport.Culture" /> is null.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Culture">
      <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo" /> determining the current report culture.
            This culture is used to convert values to/from strings.
            By default it is null, in which case the <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> is used.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.SupportedExportProviders">
      <summary>
            Overridden. Gets an array of exporters supported by the current document source object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Features">
      <summary>
            Overridden. Gets a <see cref="T:C1.WPF.Document.C1DocumentSourceFeatures" /> object defining
            features of the <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Credential">
      <summary>
            Gets or sets the default credential used during rendering of the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Document">
      <summary>
            Gets a <see cref="T:C1.WPF.Document.C1Document" /> object produced by the current <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> during
            report rendering.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.DocumentName">
      <summary>
            Overriden. Gets the user-frienly name for this <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.ReportName">
      <summary>
            Gets or sets the name of the report (used with the Load method).
            </summary>
      <remarks>
        <para>This property identifies the report when it is saved in a report definition file.</para>
        <para>To retrieve a report from a report definition file, use the <see cref="M:C1.WPF.FlexReport.C1FlexReport.Load(System.String,System.String)" /> method 
            and pass this name as a parameter.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Fields">
      <summary>
            Gets the collection of <see cref="T:C1.WPF.FlexReport.Field" /> objects in the report definition.
            </summary>
      <remarks>
            The <see cref="T:C1.WPF.FlexReport.Section" /> object also contains a collection of fields in that section.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.DataSources">
      <summary>
            Gets the collection of <see cref="P:C1.WPF.FlexReport.C1FlexReport.DataSource" /> objects used in report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Sections">
      <summary>
            Gets the collection of <see cref="T:C1.WPF.FlexReport.Section" /> objects in the report definition.
            </summary>
      <remarks>
            This collection always contains at least five items, which correspond to the standard report 
            sections that are always present: Detail, Header, Footer, PageHeader, and PageFooter.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Parameters">
      <summary>
            Gets a collection of parameters used to generate report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Groups">
      <summary>
            Gets a collection with all the groups in the report.
            </summary>
      <remarks>
        <para>The <b>Groups</b> collection contains all <see cref="T:C1.WPF.FlexReport.Group" /> objects defined in the current report.</para>
        <para>Removing a <b>Group</b> from the collection also removes its associated header and footer sections, as well 
            as any fields in those sections.</para>
        <para>Adding a <b>Group</b> to the collection adds the corresponding group header and footer sections to the report.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.FileName">
      <summary>
            Gets the filename that was used to load or save the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.BasePath">
      <summary>
            Gets or sets the StorageFolder that is used to search for any additional files specified with relative path names.
            This property is updated automatically when a report is loaded from a file.
            If you load a report definition from a <see cref="T:System.IO.MemoryStream" /> or 
            via the <see cref="P:C1.WPF.FlexReport.C1FlexReport.ReportDefinition" /> property,
            make sure that WorkingDirectory has the correct value if the report template contains items with relative file names.
            If this property is null then <see cref="P:C1.WPF.FlexReport.C1FlexReport.DefaultBasePath" /> is used,
            otherwise <see cref="P:System.Environment.CurrentDirectory" /> is used.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.C1FlexReport.DefaultBasePath" />
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Font">
      <summary>
            Gets or sets the default font used by report fields.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Tag">
      <summary>
            Gets or sets arbitrary user-defined data.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.BehaviorOptions">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.C1FlexReport.BehaviorOptions" /> object containing options controlling the behavior of the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.ReportInfo">
      <summary>
            Gets or sets a <see cref="P:C1.WPF.FlexReport.C1FlexReport.ReportInfo" /> object containing report metadata.
            </summary>
      <remarks>
        <para>Reports may include general information such as a title, author, and keywords.</para>
        <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.DataSource">
      <summary>
            Gets or sets a reference to the report's main <see cref="P:C1.WPF.FlexReport.C1FlexReport.DataSource" />,
            or null if the report is unbound.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.DataSourceName">
      <summary>
            Gets or sets the name of the report's main data source.
            This name should match the name of a data source in the <see cref="P:C1.WPF.FlexReport.C1FlexReport.DataSources" /> collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Layout">
      <summary>
            Gets a reference to the report's <see cref="P:C1.WPF.FlexReport.C1FlexReport.Layout" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.MaxPages">
      <summary>
            Gets or sets the maximum number of pages allowed for a report.
            </summary>
      <remarks>
        <para>This property is useful if you want to limit the maximum number of pages in a report.</para>
        <para>For example, you may write a report designer with a preview window that shows only the first 
            five pages of a report.</para>
        <para>Setting this property to zero allows reports of any length.</para>
        <para>You can also limit the size of reports by setting the 
            <see cref="P:C1.WPF.FlexReport.DataSource.MaxRecords" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.DoEvents">
      <summary>
            Specifies whether the control should handle Windows messages while rendering reports in synchronious mode.
            </summary>
      <remarks>
        <para>Setting this property to true allows users to resize forms, click buttons, etc. while reports are 
            being generated in synchronious mode. This makes applications more responsive, and is necessary if you want to provide a 
            "Cancel Report" button (otherwise users wouldn't be able to click the button until the report was done).</para>
        <para>Setting this property to false will cause reports to render slightly faster.</para>
      </remarks>
      <example>
        <para>The code below implements "Render" and a "Cancel" buttons attached to a <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> component.</para>
        <para>The "Render" button checks whether the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> component is busy before starting to render a report.
            This is necessary because the user could click the "Render" button several times in a row, before the component got a 
            chance to finish rendering the report. (Calling the <see cref="M:C1.WPF.FlexReport.C1FlexReport.Render" /> method while the component is busy throws an 
            <see cref="T:System.Exception" />).</para>
        <para>The "Cancel" button checks whether the component is rendering a report and sets the <see cref="P:C1.WPF.FlexReport.C1FlexReport.Cancel" /> 
            property to true.</para>
        <code>
            _c1r.DoEvents = true;
            
            private void Render_Click(object sender, EventArgs e)
            {
               if (_c1r.IsBusy)
               {
                   Console.WriteLine("Cannot render now, component is busy");
               } 
               else 
               {
                   ppv.Document = c1r;
               } 
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_c1r.IsBusy) 
               {
                   _c1r.Cancel = true;
               } 
               else 
               {
                   Console.WriteLine("No report to cancel");
               }
            }
            </code>
      </example>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Cancel">
      <summary>
            Specifies whether to cancel generation of the current report.
            </summary>
      <remarks>
            Setting this property to true while a report is being generated stops the report generation process.
            Any pages already created are kept in the document and can be previewed or printed by an attached
            print preview control.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.OnOpen">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartReport" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering starts.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.OnClose">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report finishes rendering.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.WPF.FlexReport.C1FlexReport.EndReport" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering finishes.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.OnNoData">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering and its source recordset is empty.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.WPF.FlexReport.C1FlexReport.NoData" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to cancel rendering reports with no data.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when the source recordset is 
            empty.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.OnPage">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when a new page is created.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.WPF.FlexReport.C1FlexReport.StartPage" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to update a label showing how many pages have been rendered so far.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that updates a variable at every page break.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.OnError">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when an error occurs.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a an application dialog box when an error occurs.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when an error occurs.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.GlobalScripts">
      <summary>
            Gets or sets the global <b>VBScript</b> module.
            Functions and subroutines defined here (using the standard VBScript syntax) can be used in other scripts in the current report
            like standard VBScript functions.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.LabelOffset">
      <summary>
            Gets or sets the position of the first label on a partially used sheet.
            </summary>
      <remarks>
            This property allows you to print labels on partially used label sheets. For example, 
            if you have a sheet with 12 labels and have already used 5, set the <b>LabelOffset</b> 
            property to 6 in order to skip the labels that have already been used.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.GrowShrinkMode">
      <summary>
            Gets or sets the method used to process CanGrow/CanShrink fields.
            </summary>
      <remarks>
        <para>If this property is set to <see cref="F:C1.WPF.FlexReport.GrowShrinkModeEnum.C1Report" />, fields with 
            <see cref="P:C1.WPF.FlexReport.Field.CanGrow" /> or <see cref="P:C1.WPF.FlexReport.Field.CanShrink" /> properties set to true will move fields directly 
            below them when they grow or shrink. Fields located below but off to the side are not moved.</para>
        <para>If this property is set to <see cref="F:C1.WPF.FlexReport.GrowShrinkModeEnum.Access" />, fields that grow or shrink will 
            affect all fields below, even those which are not directly under the field that was modified as a result of 
            <b>CanGrow</b>/<b>CanShrink</b>. (This is the Microsoft Access behavior).</para>
        <para>For example, if fields are arranged in a grid layout and <see cref="P:C1.WPF.FlexReport.C1FlexReport.GrowShrinkMode" /> is set to 
            <see cref="F:C1.WPF.FlexReport.GrowShrinkModeEnum.Access" />, fields within each row will remain vertically aligned when fields 
            above them grow or shrink.</para>
        <para>If <see cref="P:C1.WPF.FlexReport.C1FlexReport.GrowShrinkMode" /> is set to <see cref="F:C1.WPF.FlexReport.GrowShrinkModeEnum.C1Report" />, fields within each 
            column will move independently of fields in other columns, and fields within each row will not remain vertically 
            aligned.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.IgnoreScriptErrors">
      <summary>
            Specifies whether the component should ignore script errors by default.
            </summary>
      <remarks>
        <para>When the script interpreter finds an error in a script or expression, the 
            component raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event. This property specifies
            the default value for the <b>Handled</b> parameter in that event.</para>
        <para>If <b>IgnoreScriptErrors</b> is set to true, script errors are ignored
            by default (the <b>Handled</b> parameter is initialized to true).</para>
        <para>If <b>IgnoreScriptErrors</b> is set to false, script errors throw
            exceptions by default (the <b>Handled</b> parameter is initialized to false).</para>
        <para>In either case, the <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event handler may override 
            the default by changing the value of the <b>Handled</b> parameter.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.ExposeScriptObjects">
      <summary>
            Specifies whether script objects of report should be exposed to subreports.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.RecordsPerPage">
      <summary>
            Gets or sets the number of detail records to render per page or group.
            </summary>
      <remarks>
        <para>This is useful when printing forms that must have a specific number of rows.</para>
        <para>If the number of records is greater than the value specified, group or page breaks 
            are added to limit the number of records rendered in each group of detail sections.</para>
        <para>If the number of detail records is smaller than the value specified, blank
            records are added so the group of detail sections has the specified number of records.</para>
        <para>If this property is set to zero (the default value), then it has no
            effect.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Page">
      <summary>
            Gets or sets the current page number.
            </summary>
      <remarks>
        <para>This property is a global variable available to <b>VBScript</b> expressions.</para>
        <para>It is automatically initialized by the control with the value 1 when a report starts rendering, 
            and it is automatically incremented after each page break.</para>
        <para>This property is read-write, so you can reset it using scripts. For example, you can reset the
            current page to 1 whenever a new group starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.ParentReport">
      <summary>
            Gets the main report that contains this subreport (null for main reports).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.ReportDefinition">
      <summary>
            Gets or sets an Xml string containing the complete report definition.
            </summary>
      <remarks>
            This property can be used to store report definitions into databases, to place them in the clipboard, 
            or to copy reports from one <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> component to another.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Watermark">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.C1FlexReport.Watermark" /> object defining properties of the report's watermark.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.Overlay">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.C1FlexReport.Watermark" /> object defining properties of the report's overlay.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.GetPageImage(System.Int32,System.Drawing.Graphics)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page.
            </summary>
      <param name="pageIndex">The index of the page.</param>
      <param name="referenceGraphics">The reference graphics used to get device context for metafile.</param>
      <returns>The <see cref="!:Metafile" /> representing the specified page, or <b>null</b> if the page was not found.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.GetPageImage(System.Int32)">
      <summary>
            Returns a <see cref="T:System.Drawing.Imaging.Metafile" /> representing the specified page.
            </summary>
      <param name="pageIndex">The index of the page.</param>
      <returns>The <see cref="!:Metafile" /> representing the specified page, or <b>null</b> if the page was not found.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Clear">
      <summary>
            Clears the current report.
            </summary>
      <remarks>
            This method removes all groups, group sections, fields and parameters, it
            resets the <see cref="P:C1.WPF.FlexReport.C1FlexReport.DataSources" /> collection so it will
            contain single <see cref="P:C1.WPF.FlexReport.C1FlexReport.DataSource" /> object with name "Main".
            Resets properties of all nested objects like <see cref="P:C1.WPF.FlexReport.C1FlexReport.Layout" />, <see cref="P:C1.WPF.FlexReport.C1FlexReport.Watermark" /> etc.
            Clears (but does not remove) the fixed sections that all reports have: <b>Detail</b>, <b>Header</b>, 
            <b>Footer</b>, <b>PageHeader</b>, and <b>PageFooter</b>.
            <para>Use this method when you want to clear a report and start creating a new one from scratch.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.IO.Stream,System.String,System.Boolean@)">
      <summary>
            Loads a report from an XML report definition in stream.
            </summary>
      <param name="stream">Stream containing XML report definition.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <param name="converted">OUT: Contains true if report definition was imported from old C1Report format.</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.IO.Stream)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.IO.Stream,System.String)">
      <summary>
            Loads a report from an XML report definition in stream.
            </summary>
      <param name="stream">Stream containing XML report definition.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.IO.Stream)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.String,System.String,System.Boolean@)">
      <summary>
            Loads a report from an XML report definition file.
            </summary>
      <param name="fileName">Full name of the XML report definition file.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <param name="converted">OUT: Contains true if report definition was imported from old C1Report format.</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.String)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.String,System.String)">
      <summary>
            Loads a report from an XML report definition file.
            </summary>
      <param name="fileName">Full name of the XML report definition file.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.String)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Save(System.String)">
      <summary>
            Saves the current report definition to a file. 
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <remarks>
            This method does not embed pictures and subreports into the output file. It only saves subreport names and saves
            images in external files.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Save(System.String,System.Boolean)">
      <summary>
            Saves the current report definition to a file.
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <param name="embedAll">Whether to embed images and subreports into the output file.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Save(System.String,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to a file.
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <param name="embedImages">Whether to embed images into the output file.</param>
      <param name="embedSubReports">Whether to embed subreports into the output file.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.Xml.XmlDocument,System.String,System.Boolean@)">
      <summary>
            Loads a report from an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">The <see cref="T:System.Xml.XmlDocument" /> containing the reports.</param>
      <param name="reportName">The name of the report to load (case-insensitive), can be null in this case first report will be loaded.</param>
      <param name="converted">OUT: flag that is set to true if the loaded report definition was converted from the legacy C1Report format.</param>
      <remarks>
            You can get a list of reports available in a file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.Xml.XmlDocument)" /> method.
            </remarks>
      <remarks>
            This method updates <see cref="P:C1.WPF.FlexReport.C1FlexReport.BasePath" /> property to the directory
            from which the <paramref name="doc" /> was loaded.
            You can get a list of reports available in a file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.Xml.XmlDocument)" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.Xml.XmlDocument,System.String)">
      <summary>
            Loads a report from an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument" /> that contains the reports.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.Xml.XmlDocument)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.Xml.Linq.XDocument,System.String,System.Boolean@)">
      <summary>
            Loads a report from an <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
      <param name="doc">The <see cref="T:System.Xml.Linq.XDocument" /> containing the reports.</param>
      <param name="reportName">The name of the report to load (case-insensitive), can be null in this case first report will be loaded.</param>
      <param name="converted">OUT: flag that is set to true if the loaded report definition was converted from the legacy C1Report format.</param>
      <remarks>
            This method updates <see cref="P:C1.WPF.FlexReport.C1FlexReport.BasePath" /> property to the directory
            from which the <paramref name="doc" /> was loaded.
            You can get a list of reports available in a file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.Xml.Linq.XDocument)" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Load(System.Xml.Linq.XDocument,System.String)">
      <summary>
            Loads a report from an <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
      <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument" /> that contains the reports.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.Xml.Linq.XDocument)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Save(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to a stream.
            </summary>
      <param name="stream">The stream to save to.</param>
      <param name="embedImages">Indicates whether to embed images into the output stream.</param>
      <param name="embedSubReports">Indicates whether to embed subreports into the output stream.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Save(System.Xml.XmlWriter)">
      <summary>
            Saves the current report definition to an <see cref="T:System.Xml.XmlWriter" /> object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> object where the report definition will be saved.</param>
      <remarks>
            This method does not embed pictures and subreports into the output file.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Save(System.Xml.XmlWriter,System.Boolean)">
      <summary>
            Saves the current report definition to an XmlWriter object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> object where the report definition will be saved.</param>
      <param name="embed">Whether to embed images and subreports into the output stream.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Save(System.Xml.XmlWriter,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to an XmlWriter object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> object where the report definition will be saved.</param>
      <param name="embedImages">Whether to embed images into the output stream.</param>
      <param name="embedSubReports">Whether to embed subreports into the output stream.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.CopyDefinitionFrom(C1.WPF.FlexReport.C1FlexReport)">
      <summary>
            Copies a report definition from another <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> component.
            Please note, subreports referenced from the report via <see cref="T:C1.WPF.FlexReport.SubreportField" /> or <see cref="T:C1.WPF.FlexReport.Field" />
            are not cloned.
            </summary>
      <param name="source">
        <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> that contains the report to be copied.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Evaluate(System.String)">
      <summary>
            Evaluates a <b>VBScript</b> expression in the current report context.
            </summary>
      <param name="expression">A string with a <b>VBScript</b> expression to be evaluated.</param>
      <returns>The value of the expression.</returns>
      <remarks>
        <para>Use this method to evaluate expressions as they would be evaluated while generating a report.
            This can be useful in designer-type applications, to provide an "Immediate Window" where users can test 
            expressions.</para>
        <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
      </remarks>
      <example>
        <para>Expressions may contain simple <b>VBScript</b> expressions such as:</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("2+2"));
              <i>4</i>
            Console.WriteLine(_c1r.Evaluate(" \"A\" &amp; \"B\" ");
              <i>AB</i></code>
        <para>Expressions may also contain references to the <b>Report</b> object and all its sub-objects. For example:</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.RecordSource"));
              <i>SELECT * FROM Employees</i>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.Recordset.Fields.Count"));
              <i>7</i>
            Console.WriteLine(_c1r.Evaluate("Report.Fields(0).Name"));
              <i>FirstNameField</i></code>
        <para>Finally, data fields, <see cref="T:C1.WPF.FlexReport.Field" />, and <see cref="T:C1.WPF.FlexReport.Section" /> objects may be referenced directly by name.</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("FirstNameField.Value"));
              <i>Andrew</i>
            Console.WriteLine(_c1r.Evaluate("CategoryName"));
              <i>Beverages</i></code>
      </example>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Evaluate(System.String,C1.WPF.FlexReport.IReportScriptContext)">
      <summary>
            Evaluates a <b>VBScript</b> expression.
            </summary>
      <param name="expression">A string with a <b>VBScript</b> expression to be evaluated.</param>
      <param name="context">
        <see cref="T:C1.WPF.FlexReport.IReportScriptContext" /> interface used to obtain objects available in expression.</param>
      <returns>The value of the expression.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Execute(System.String)">
      <summary>
            Executes a <b>VBScript</b> statement in the current report context.
            </summary>
      <param name="statement">A string with <b>VBScript</b> instructions to be executed.</param>
      <remarks>
        <para>This method is similar to the <see cref="M:C1.WPF.FlexReport.C1FlexReport.Evaluate(System.String)" /> method, except it does not return a value.</para>
        <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="E:C1.WPF.FlexReport.C1FlexReport.ReportError" /> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Execute(System.String,C1.WPF.FlexReport.IReportScriptContext)">
      <summary>
            Executes a <b>VBScript</b> statement.
            </summary>
      <param name="statement">A string with <b>VBScript</b> instructions to be executed.</param>
      <param name="context">
        <see cref="T:C1.WPF.FlexReport.IReportScriptContext" /> interface used to obtain objects available in expression.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.ParseExpression(System.String)">
      <summary>
            Parses a <b>VBScript</b> expression in the current report context.
            </summary>
      <param name="expression">A string with a <b>VBScript</b> expression to be parsed.</param>
      <returns>An <see cref="T:System.Exception" /> if the expression is invalid, or null if no errors
            were detected.</returns>
      <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.ParseStatement(System.String)">
      <summary>
            Parses a <b>VBScript</b> statement in the current report context.
            </summary>
      <param name="statement">A string with a <b>VBScript</b> statement to be parsed.</param>
      <returns>An <see cref="T:System.Exception" /> if the statement is invalid, or null if no errors
            were detected.</returns>
      <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.Render">
      <summary>
            Renders the report.
            This method is a shortcut to the <see cref="M:C1.WPF.Document.C1DocumentSource.Generate" /> method on the base class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.RenderAsyncEx">
      <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.WPF.FlexReport.C1FlexReport.Render" /> method.
            This method is a shortcut to the <see cref="M:C1.WPF.Document.C1DocumentSource.GenerateAsyncEx" /> method on the base class.
            </summary>
      <seealso cref="M:C1.WPF.FlexReport.C1FlexReport.Render" />
      <returns>The <see cref="T:C1.WPF.Document.IAsyncActionWithProgress`1" /> interface that can be used to manage asynchronous operation.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.RenderAsync">
      <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.WPF.FlexReport.C1FlexReport.Render" /> method.
            This method is a shortcut to the <see cref="M:C1.WPF.Document.C1DocumentSource.GenerateAsync" /> method on the base class.
            </summary>
      <seealso cref="M:C1.WPF.FlexReport.C1FlexReport.Render" />
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.RenderToFilter(C1.WPF.Document.Export.ExportFilter)">
      <summary>
            Renders the report into an <see cref="T:C1.WPF.Document.Export.ExportFilter" /> object.
            This method is a shortcut to the <see cref="M:C1.WPF.Document.C1DocumentSource.Export(C1.WPF.Document.Export.ExportFilter)" /> method on the base class.
            </summary>
      <param name="filter">Export filter that will render the report.</param>
      <remarks>
        <para>
          <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> includes several built-in export filters that allow you to export reports 
            to HTML, PDF, RTF, Excel, and other formats.</para>
        <para>You may create your own filters by creating classes that derive from any of these base filters.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.RenderToFilterAsyncEx(C1.WPF.Document.Export.ExportFilter)">
      <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.WPF.FlexReport.C1FlexReport.RenderToFilter(C1.WPF.Document.Export.ExportFilter)" /> method.
            This method is a shortcut to the <see cref="M:C1.WPF.Document.C1DocumentSource.ExportAsyncEx(C1.WPF.Document.Export.ExportFilter)" /> method on the base class.
            </summary>
      <param name="filter">The exporter to use.</param>
      <returns>The <see cref="T:C1.WPF.Document.IAsyncActionWithProgress`1" /> interface that can be used to manage asynchronous operation.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.RenderToFilterAsync(C1.WPF.Document.Export.ExportFilter)">
      <summary>
            Non-blocking (asynchronous) version of the <see cref="M:C1.WPF.FlexReport.C1FlexReport.RenderToFilter(C1.WPF.Document.Export.ExportFilter)" /> method.
            This method is a shortcut to the <see cref="M:C1.WPF.Document.C1DocumentSource.ExportAsync(C1.WPF.Document.Export.ExportFilter)" /> method on the base class.
            </summary>
      <param name="filter">The exporter to use.</param>
      <returns>Asynchronous value object.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.FormatVersion">
      <summary>
            Gets the <see cref="T:C1.WPF.Document.Serialization.C1FormatVersion" /> object specifying the version of the report definition files.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.DefaultRightToLeft">
      <summary>
            Gets or sets the value used as the default for the <see cref="P:C1.WPF.FlexReport.C1FlexReport.RightToLeft" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.DefaultBasePath">
      <summary>
            Gets or sets the default directory that is used to resolve relative file names.
            By default this property is null, in which case <b>Enviroment.CurrentDirectory</b> is used.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.C1FlexReport.BasePath" />
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.MeasurementPrinterName">
      <summary>
            Gets or sets the name of the printer used to provide <see cref="T:System.Drawing.Graphics" />
            used to measure/calculate layouts of <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> objects,
            when used GDI/GDI+ functions.
            This property is only used if <see cref="P:C1.WPF.FlexReport.C1FlexReport.MeasurementDevice" /> is set to <see cref="F:C1.WPF.Document.MeasurementDevice.Printer" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.C1FlexReport.MeasurementDevice">
      <summary>
            Gets or sets the type of device used to provide <see cref="T:System.Drawing.Graphics" /> 
            used to measure/calculate layouts of <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> objects,
            when used GDI/GDI+ functions.
            If this property is set to <see cref="F:C1.WPF.Document.MeasurementDevice.Printer" />,
            <see cref="P:C1.WPF.FlexReport.C1FlexReport.MeasurementPrinterName" /> specifies the printer.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.String)">
      <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
      <param name="fileName">Contains the full name of the XML report definition file.</param>
      <returns>A string array containing the names of all reports in the XML file.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.IO.Stream)">
      <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
      <param name="stream">Contains the stream with XML report definition.</param>
      <returns>A string array containing the names of all reports in the XML definition.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.Xml.XmlDocument)">
      <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to <see cref="T:System.Xml.XmlDocument" /> object.</param>
      <returns>A string array containing the names of all reports in the <b>XmlDocument</b>.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.C1FlexReport.GetReportList(System.Xml.Linq.XDocument)">
      <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
      <param name="doc">Reference to <see cref="T:System.Xml.Linq.XDocument" /> object.</param>
      <returns>A string array containing the names of all reports in the <b>XDocument</b>.</returns>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.RenderCompleted">
      <summary>
            Occurs when the <see cref="M:C1.WPF.FlexReport.C1FlexReport.RenderAsync" /> method has completed.
            </summary>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.ReportDefinitionChanged">
      <summary>
            Occurs when the current report definition changes.
            </summary>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.StartReport">
      <summary>
            Occurs when the report starts rendering, before it opens the datasources and checks parameters.
            </summary>
      <remarks>
        <para>You can use this event to provide user feedback or to make changes to the 
            datasources properties.</para>
        <para>For example, you may implement your own version of parameterized queries by asking the 
            user to provide some information and changing the <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> 
            property accordingly.</para>
        <para>You may also use this event to assign a <see cref="T:System.Data.DataTable" /> object directly to the 
            report's <see cref="P:C1.WPF.FlexReport.DataSource.Recordset" /> property. Applications that already have the 
            report data should do this to save time by preventing <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> from loading its own copy 
            of the data.</para>
      </remarks>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.EndReport">
      <summary>
            Occurs when the report finishes rendering.
            </summary>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.ReportError">
      <summary>
            Occurs when an error occurs while rendering a report.
            </summary>
      <remarks>
        <para>The most common types of errors found when rendering reports are:</para>
        <para>1) Invalid connection string or SQL query.
            This usually indicates that the system could not open the specified database (a server may be off line, or 
            a database file may be in a different location than what was specified) or that the SQL syntax used for the 
            <see cref="P:C1.WPF.FlexReport.C1FlexReport.DataSource" /> contains errors.</para>
        <para>2) Error executing scripts or evaluating expressions. This usually indicates that the VBScript expression 
            used contains a syntax error. In these cases, make sure you look at the exception message. It usually contains a 
            good explanation of what caused the error.</para>
      </remarks>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.GetScriptObject">
      <summary>
            Occurs when an unknown object is found in the report's script or expression.
            </summary>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.NoData">
      <summary>
            Occurs when the report starts rendering and the main report data source is empty.
            </summary>
      <remarks>
        <para>You can use this event to cancel rendering a report when the source recordset is empty.</para>
        <para>If you don't cancel the report, it will be rendered as an unbound report (a self-contained report 
            with no underlying data).</para>
      </remarks>
      <example>
            The code below cancels a report when it has no data:
            <code>
            private void c1r_NoData(object sender, EventArgs e)
            {
                _c1r.Cancel = true;
            }
            </code></example>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.StartSection">
      <summary>
            Occurs before each <see cref="T:C1.WPF.FlexReport.Section" /> is formatted.
            </summary>
      <remarks>
        <para>When this event fires, the report fields have not been updated with the current values or sizes.</para>
        <para>This is a good point to set field formatting parameters and visibility based on the current data values.</para>
        <para>This event is equivalent to the <see cref="P:C1.WPF.FlexReport.Section.OnFormat" /> script property.</para>
      </remarks>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.PrintSection">
      <summary>
            Occurs before each <see cref="T:C1.WPF.FlexReport.Section" /> is printed (after it has been formatted.)
            </summary>
      <remarks>
        <para>When this event fires, the field values and sizes have been set by the control.</para>
        <para>You may still make changes, but they will not affect the field layout. For example, changing a field's 
            <see cref="P:C1.WPF.FlexReport.Field.Text" /> property at this point will not cause it to grow or shrink.</para>
        <para>This event is equivalent to the <see cref="P:C1.WPF.FlexReport.Section.OnPrint" /> script property.</para>
      </remarks>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.StartPage">
      <summary>
            Occurs when a new page starts rendering.
            </summary>
      <remarks>
        <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.C1FlexReport.Cancel" /> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.WPF.FlexReport.C1FlexReport.MaxPages" /> property instead.</para>
      </remarks>
    </member>
    <member name="E:C1.WPF.FlexReport.C1FlexReport.EndPage">
      <summary>
            Occurs when a page finishes rendering.
            </summary>
      <remarks>
        <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.C1FlexReport.Cancel" /> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.WPF.FlexReport.C1FlexReport.MaxPages" /> property instead.</para>
      </remarks>
    </member>
    <member name="T:C1.WPF.FlexReport.CalculatedField">
      <summary>
            Represents a calculated data field associated with a <see cref="T:C1.WPF.FlexReport.C1FlexReport" />'s data source.
            Usually values of such fields are calculated based on values of other fields in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.CalculatedField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.CalculatedField" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.CalculatedField.#ctor(System.String,System.Type,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.CalculatedField" /> class.
            </summary>
      <param name="name">The name of the calculated field, should be unique.</param>
      <param name="type">The type of value of the calculated field.</param>
      <param name="expression">The VBScript expression used to calculate value of field.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.CalculatedField.AssignFrom(System.Object)">
      <summary>
            Copies properties from another <see cref="T:C1.WPF.FlexReport.CalculatedField" /> object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.CalculatedField.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CalculatedField.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.CalculatedFieldCollection" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CalculatedField.DataSource">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.CalculatedField.DataSource" /> object containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CalculatedField.Type">
      <summary>
            Gets or sets the data type of the current field.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CalculatedField.Expression">
      <summary>
            Gets or sets the expression used to calcualte the field's value.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.CalculatedFieldCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.CalculatedField" /> objects.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CalculatedFieldCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.DataSource" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CalculatedFieldCollection.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataAccessException">
      <summary>
        <see cref="T:System.Exception" /> that is thrown when a data access error occurs.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataAccessException.#ctor">
      <summary>
            Initializes a new instance of the DataAccessException class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataAccessException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the DataAccessException class with a specified error message.
            </summary>
      <param name="msg">A message that describes the error.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.DataAccessException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the DataAccessException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="msg">The error message that explains the reason for the exception.</param>
      <param name="x">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:C1.WPF.FlexReport.DataField">
      <summary>
            Represents field in the <see cref="T:C1.WPF.FlexReport.DataSource" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataField.Name">
      <summary>
            Gets name of the <see cref="T:C1.WPF.FlexReport.DataField" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataField.Calculated">
      <summary>
            Gets a value indicating whether <see cref="T:C1.WPF.FlexReport.DataField" /> is a calculated field, defined in the <see cref="P:C1.WPF.FlexReport.DataSource.CalculatedFields" /> collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataField.Type">
      <summary>
            Gets a type of the field.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataField.Value">
      <summary>
            Get a value of the field.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataFieldCollection">
      <summary>
            Collection of the fields in the <see cref="T:C1.WPF.FlexReport.DataSource" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataFieldCollection.IndexByName(System.String)">
      <summary>
            Returns index of the <see cref="T:C1.WPF.FlexReport.DataField" /> by its name.
            </summary>
      <param name="name">The name of the <see cref="T:C1.WPF.FlexReport.DataField" />.</param>
      <returns>Index of the <see cref="T:C1.WPF.FlexReport.DataField" /> with specified name or -1 if not found.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.DataFieldCollection.Item(System.String)">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.DataField" /> with specified name, throws an exception if not found.
            </summary>
      <param name="name">The name of <see cref="T:C1.WPF.FlexReport.DataField" />.</param>
      <returns>Returns <see cref="T:C1.WPF.FlexReport.DataField" /> object with specified name, throws an exception if not found.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.DataHandler">
      <summary>
            Represents a data enumerator in a <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            Provides access to data used in reports.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.Dispose">
      <summary>
            Disposes this <see cref="T:C1.WPF.FlexReport.DataHandler" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.BOF">
      <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.EOF">
      <summary>
            Returns true if the cursor is pointing past the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.MoveFirst">
      <summary>
            Moves the cursor to the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.MoveLast">
      <summary>
            Moves the cursor to the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.MovePrevious">
      <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.MoveNext">
      <summary>
            Moves the cursor to the next record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.GetBookmark">
      <summary>
            Returns the current cursor position.
            </summary>
      <returns>Index of current record.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.DataHandler.SetBookmark(System.Int32)">
      <summary>
            Sets the current cursor position to supplied value.
            </summary>
      <param name="bookmark">Index of record.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.DataHandler.Empty">
      <summary>
            Indicates whether data set managed by this <see cref="T:C1.WPF.FlexReport.DataHandler" /> has no records.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataHandler.Count">
      <summary>
            Gets the count of records in the data handler.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataHandler.Fields">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.DataFieldCollection" /> containing the list of data source fields.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataLinkParams">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataLinkBase">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataLinkBase.DefaultReplaceParameters(C1.WPF.FlexReport.DataLinkParams,System.String)">
      <summary>
            Default method which can be used to replace
            names of parameters in the string with their values.
            </summary>
      <param name="dlp">
      </param>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.FlexReport.ExternalObjectLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DbLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.OledbLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SqlServerCe3_5Link">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SqlServerCe4_0Link">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SQLiteLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.OdbcLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.XmlLink">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataScope">
      <summary>
            Represents a data scope in a <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataScope.Source">
      <summary>
            Gets the object identifying the current data scope.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataScope.Name">
      <summary>
            Gets the name of the current data scope.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataScope.Parent">
      <summary>
            Gets or sets the parent <see cref="T:C1.WPF.FlexReport.DataScope" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataScope.DataHandler">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.DataScope.DataHandler" /> object which can be used to access the current data scope's data.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataProvider">
      <summary>
            Specifies the type of the data source.
            Different data sources use different connection string and query command syntaxes.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.Auto">
      <summary>
            The data source type is automatically determined base on connection string.
            Using this value is not recommended as connecting to the data source may be very slow.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.OLEDB">
      <summary>
            Specifies an OLE DB data source.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.ODBC">
      <summary>
            Specifies an ODBC data source.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.SqlServerCe3_5">
      <summary>
            Specifies an SQL server compact edition version 3.5 data source.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.SqlServerCe4_0">
      <summary>
            Specifies an SQL server compact edition version 4.0 data source.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.XmlFile">
      <summary>
            Specifies that connection string is the name of an XML file containing a DataSet object.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.ExternalObject">
      <summary>
            Specifies that connection string is the name of an assembly that contains objects
            which implement the  <see cref="T:C1.WPF.FlexReport.IC1FlexReportExternalRecordset" /> interface.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.DataProvider.SQLite">
      <summary>
            Specifies an SQLite data source.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.RecordSourceType">
      <summary>
            Specifies the type of the record source, such as a table, a stored procedure, or an SQL query.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.RecordSourceType.Auto">
      <summary>
            The data source type is automatically determined based on the syntax used by the <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" />.
            Using this value should be avoided if the record source is a table, a stored procedure, or an SQL query,
            as connecting to the data source may be slow.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.RecordSourceType.TableDirect">
      <summary>
            The record source is the name of a table or a view in the data source specified by the connection string.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.RecordSourceType.StoredProcedure">
      <summary>
            The record source is the name of a stored procedure in the data source specified by the connection string.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.RecordSourceType.Text">
      <summary>
            The record source is an SQL query.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ParameterPassingMode">
      <summary>
            Specifies the mode of passing parameters to the data source.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ParameterPassingMode.Default">
      <summary>
            Parameters are passed in the standard way determined by the data source.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ParameterPassingMode.Literal">
      <summary>
            Parameters are passed to the data source literally as they are specified.
            If a value needs to be quoted, the quotes should be part of the parameter value.
            This mode is designed to deal with non-standard data sources.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FilterExpressionSyntax">
      <summary>
            Specifies the syntax of the <see cref="P:C1.WPF.FlexReport.DataSource.Filter" /> expression.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FilterExpressionSyntax.DataView">
      <summary>
            The filter syntax is the same which is used to specify RowFilter for System.Data.DataView objects.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FilterExpressionSyntax.VBScript">
      <summary>
            The filter syntax is the regular VBScript syntax used by other FlexReport scripts and expressions.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataSource">
      <summary>
            Represnts a data source in a <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            </summary>
      <remarks>
        <para>Most reports specify their data sources by setting the <see cref="P:C1.WPF.FlexReport.DataSource.ConnectionString" /> and 
            <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> properties. The <b>DataSource</b> object uses these values to connect
            to a database and retrieve the report data.</para>
        <para>Alternatively, you can assign data objects directly to the <see cref="P:C1.WPF.FlexReport.DataSource.Recordset" /> property.
            This approach is more efficient in scenarios where the data has already been loaded by the 
            application for other purposes, and can be used in the report directly instead of loading a copy.</para>
      </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.DataSource.c_DefIsolationLevel">
      <summary>
            Defines default IsolationLevel for transaction used to get report data.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.DataSource" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataSource.AssignFrom(C1.WPF.FlexReport.DataSource)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.DataSource" /> to the current object.
            The name of source object is not copied.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.DataSource.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.DataSource" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignName">Indicates whether name should be assigned.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.DataSource.ToString">
      <summary>
            Returns the <see cref="!:Name" /> of the current data source.
            </summary>
      <returns>The current data source's name.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.ParentReport">
      <summary>
            Gets the report that contains this <see cref="T:C1.WPF.FlexReport.DataSource" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.ParameterPassingMode">
      <summary>
            Gets or sets a value indicating how parameter values are passed to the data engine.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.DataSource.EncloseParameterValues" />
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.EncloseParameterValues">
      <summary>
            Gets or sets a value indicating whether values of parameters in resulting SQL query 
            should be enclosed with delimiters, "#" for dates, "'" for strings, "()" for multivalue parameters.
            If this parameter is false when all parameters in <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> already should be enclosed.
            For example, EncloseParameterValues == true:
            RecordSource = "select * from customers where name = CustomerName";
            actual SQL query will be:
            select * from customers where name = 'Some customer'
            
            EncloseParameterValues == false:
            RecordSource = "select * from customers where name = 'CustomerName'";
            actual SQL query will be:
            select * from customers where name = 'Some customer'
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.DataSource.ParameterPassingMode" />
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.DataProvider">
      <summary>
            Gets or sets the type of the data source.
            The data source type determines the syntaxes of connection string and query (record source).
            The default is Auto but it is recommended that you set this value to the specific type of the data source you are using,
            as automatic determining of the data source type may be rather slow.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.ConnectionString">
      <summary>
            Gets or sets the connection string used to open a database.
            </summary>
      <remarks>
        <para>This property is used by the <see cref="T:C1.WPF.FlexReport.DataSource" /> class to load the report data.</para>
        <para>While ConnectionString specifies the database that contains the data,
            <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> specifies which table, stored procedure, or Sql command to use for 
            retrieving the data.</para>
        <para>
            The syntax of ConnectionString is determined by the type of the data provider used by
            <see cref="T:C1.WPF.FlexReport.DataSource" />.
            For example if DataProvider is <see cref="F:C1.WPF.FlexReport.DataProvider.OLEDB" /> then
            ConnectionString should use syntax used in <b>OleDbConnection</b>,
            if DataProvider is <see cref="F:C1.WPF.FlexReport.DataProvider.XmlFile" />, it should contain the name of the XML file,
            and so on.
            </para>
        <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection" />,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable" /> object, you can assign the data 
            directly to the <see cref="P:C1.WPF.FlexReport.DataSource.Recordset" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.RecordSource">
      <summary>
            Gets or sets a string that specifies which table, stored procedure, or Sql command
            to use for retrieving the report data.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.WPF.FlexReport.DataSource.ConnectionString" /> specifies the database that contains the report data. 
            The <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> property specifies which table, stored procedure, or Sql command to use for 
            retrieving the data.</para>
        <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection" />,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable" /> object, you can assign the 
            data directly to the <see cref="P:C1.WPF.FlexReport.DataSource.Recordset" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.RecordSourceType">
      <summary>
            Gets or sets the type of the <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> (stored procedure, table, sql query etc.).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.FilterSyntax">
      <summary>
            Gets or sets the type of syntax used in the <see cref="P:C1.WPF.FlexReport.DataSource.Filter" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.Filter">
      <summary>
            Gets or sets the expression used to filter which data rows are included in the report.
            </summary>
      <remarks>
        <para>Use the <b>Filter</b> property to restrict the records that you want to include in a 
            data source without modifying the <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> property.</para>
        <para>Using a filter is similar to specifying a WHERE clause in the SQL statement assigned to
            the <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> property. Both techniques will filter the data according to the
            condition specified. The difference is that the <b>Filter</b> property is applied to a table
            that has already been loaded in memory, while the WHERE statement causes only the filtered
            records to be loaded from the database into memory.</para>
        <para>When creating reports that include only small subsets large tables, the WHERE statement
            is a better option, because it doesn't require the entire table to be loaded into memory.
            On the other hand, if the table has already been loaded in memory, the <b>Filter</b> property
            is a better option, since it does not require any additional data to be loaded.</para>
        <para>The syntax for the filter expression is determined by the <see cref="P:C1.WPF.FlexReport.DataSource.FilterSyntax" /> property.</para>
      </remarks>
      <example>
            The code below shows how to apply a filter to a data source using the <c>Filter</c> property and
            using a WHERE clause in a SQL statement:
            <code>
            if (useFilterProperty)
            {
            	// load all records, filter in memory
                _c1r.DataSource.RecordSource = "SELECT * from Employees";
                _c1r.DataSource.Filter = "HireDate &gt;= '1/1/1993' AND Country = 'UK'";
            }
            else
            {
            	// load selected records only
                _c1r.DataSource.RecordSource = "SELECT * from Employees " +
                    "WHERE HireDate &gt;= #1/1/1993# AND Country = 'UK'";
            </code></example>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.MaxRecords">
      <summary>
            Gets or sets the maximum number of data rows to be included in the report (zero includes all rows).
            </summary>
      <remarks>
        <para>This property is useful if you want to limit the size of a report. For example, you may write a report 
            designer with a preview window that shows only the first 500 records from the database.</para>
        <para>Setting this property to zero causes the control to retrieve all records.</para>
        <para>You can also limit the size of reports by setting the <see cref="P:C1.WPF.FlexReport.C1FlexReport.MaxPages" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.CommandTimeOut">
      <summary>
            Gets or sets the number of seconds to wait before the data connection times out 
            (set to -1 to use the default value, usually 30s).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.Recordset">
      <summary>
            Sets or gets the data source object that provides data to the report.
            </summary>
      <remarks>
        <para>Usually, the control creates a data object based on the value of the 
            <see cref="P:C1.WPF.FlexReport.DataSource.ConnectionString" /> and <see cref="P:C1.WPF.FlexReport.DataSource.RecordSource" /> properties, and uses that object 
            as the report data source.</para>
        <para>Alternatively, you may want to create the data source object yourself, and assign it to 
            the control. You can do that by assigning your data source object to the <b>Recordset</b>
            property.</para>
        <value>
            You can assign objects of the following types to the <see cref="P:C1.WPF.FlexReport.DataSource.Recordset" /> property:
            (1) <see cref="T:System.Data.DataTable" /> objects, (2) <see cref="T:System.Data.DataView" /> objects, or (3) any 
            object that implements the <see cref="T:C1.WPF.FlexReport.IC1FlexReportRecordset" /> or <see cref="T:System.Collections.IList" /> interface.
            </value>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.IsolationLevel">
      <summary>
            Gets or sets the isolation level for <b>DbTransaction</b>
            used to retrieve the report data.
            <para>The default is <b>IsolationLevel.ReadCommitted</b>.</para></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.SortDefinitions">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.SortDefinitionCollection" /> collection defining sort of the data source.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSource.CalculatedFields">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.CalculatedFieldCollection" /> collection defining list of calculated fields for the data source.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataSourceCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.DataSource" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.DataSourceCollection.Add(C1.WPF.FlexReport.DataSource)">
      <summary>
            Adds the <see cref="T:C1.WPF.FlexReport.DataSource" /> to the collection.
            </summary>
      <param name="dataSource">The <see cref="T:C1.WPF.FlexReport.DataSource" /> object to add.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.DataSourceCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an item from the collection.
            </summary>
      <param name="index">Specifies the item to be removed.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.DataSourceCollection.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DataSourceInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FieldInfo">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.IC1FlexReportExternalRecordset">
      <summary>
            Represents an external record set residing in a separate assembly.
            <para>
            If an assembly contains a type supporting this interface,
            that assembly and type can be selected in the report designer
            as the data source for a report. A reference to that type
            and the record set initialization parameters (see <see cref="P:C1.WPF.FlexReport.IC1FlexReportExternalRecordset.Params" />)
            are then saved in the XML report definition file.
            When the report is loaded, the recordset object is created
            based on the saved info, and used as the data source for the report.
            </para></summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportExternalRecordset.EditParams">
      <summary>
            This method is used to set up parameters of the current recordset.
            For instance, the implementation of this method can show a dialog
            allowing the user to edit the parameters.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportExternalRecordset.GetRecordset">
      <summary>
            Returns the <see cref="T:C1.WPF.FlexReport.IC1FlexReportRecordset" /> interface used to access data.
            </summary>
      <returns>The <see cref="T:C1.WPF.FlexReport.IC1FlexReportRecordset" /> interface used to access data.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.IC1FlexReportExternalRecordset.Caption">
      <summary>
            Gets the user-friendly name of the current recordset.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.IC1FlexReportExternalRecordset.Params">
      <summary>
            Gets or sets parameters of the current recordset.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.IC1FlexReportRecordset">
      <summary>
            Interface used to allow <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> to access data stored in a data object
            of a type for which C1FlexReport does not have built-in support.
            <para>
            C1FlexReport has built-in support for the following data object types:
            <see cref="!:DataTable" />, <see cref="!:DataView" /> and <see cref="!:IList" />.
            </para></summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.GetFieldNames">
      <summary>
            Gets an array of strings with the names of all fields in the data source.
            </summary>
      <returns>An array of strings with the names of all fields in the data source.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.GetFieldTypes">
      <summary>
            Gets an array of types of all fields in the data source.
            </summary>
      <returns>An array of types of all fields in the data source.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.GetFieldValue(System.Int32)">
      <summary>
            Gets the value of the specified field at the current cursor position.
            <para>
            If the cursor is past the end of the data (EOF condition), this method should return null
            rather than throw an exception.
            </para></summary>
      <param name="fieldIndex">The index of the field.</param>
      <returns>The value of the field.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.BOF">
      <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.EOF">
      <summary>
            Returns true if the cursor is pointing past the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.MoveFirst">
      <summary>
            Moves the cursor to the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.MoveLast">
      <summary>
            Moves the cursor to the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.MovePrevious">
      <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.MoveNext">
      <summary>
            Moves the cursor to the next record in the data source.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.GetBookmark">
      <summary>
            Returns the current cursor position.
            </summary>
      <returns>The index of the current record.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.IC1FlexReportRecordset.SetBookmark(System.Int32)">
      <summary>
            Sets the current cursor position to a supplied value.
            </summary>
      <param name="bkmk">The index of the record to set.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.IC1FlexReportRecordset.Count">
      <summary>
            Gets the count of records in the recordset.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SortDirection">
      <summary>
            Defines the types of sorting.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SortDirection.Ascending">
      <summary>
            Sorts in ascending order.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SortDirection.Descending">
      <summary>
            Sorts in descending order.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SortDefinition">
      <summary>
            Defines the sorting parameters.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.SortDefinition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.SortDefinition" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.SortDefinition.#ctor(System.String,C1.WPF.FlexReport.SortDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.SortDefinition" /> class,
            specifying the sort expression and direction.
            </summary>
      <param name="expression">The string with sort expression.</param>
      <param name="direction">The sort direction.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.SortDefinition.AssignFrom(C1.WPF.FlexReport.SortDefinition)">
      <summary>
            Copies <see cref="P:C1.WPF.FlexReport.SortDefinition.Expression" /> and <see cref="P:C1.WPF.FlexReport.SortDefinition.Direction" /> properties from another <see cref="T:C1.WPF.FlexReport.SortDefinition" /> object.
            (Note that the <see cref="!:IOwnedCollectionItem.Owner" /> property is not copied.)
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.SortDefinition.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SortDefinition.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.SortDefinitionCollection" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SortDefinition.Expression">
      <summary>
            Gets the string defining the sort expression.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SortDefinition.Direction">
      <summary>
            Gets or sets the sort direction.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SortDefinitionCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.SortDefinition" /> objects.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SortDefinitionCollection.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.DataSource" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SortDefinitionCollection.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.BarCodeField">
      <summary>
            Represents barcode in the <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.BarCodeField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.BarCodeField" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BarCodeField.BarCode">
      <summary>
            Gets or sets the type of barcode.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BarCodeField.BarcodeOptions">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.BarCodeField.BarcodeOptions" /> object defining additional options of barcode.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BarCodeField.Text">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the text encoded by the barcode.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BarCodeField.Align">
      <summary>
            Gets or sets a value determining how the barcode image is aligned within the field area.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BarCodeField.Font">
      <summary>
            Gets or sets the field's font.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.FontHolder" />
    </member>
    <member name="P:C1.WPF.FlexReport.BarCodeField.ForeColor">
      <summary>
            Gets or sets the field's foreground color.
            </summary>
      <remarks>
            Use the <b>ForeColor</b> property to specify the color for text in a field. You can use this property to make 
            fields easy to read or to convey a special meaning.
            </remarks>
      <example>
            The code below uses script to change the color of the text in the <i>UnitsInStock</i> field when its value 
            falls below the reorder level.
            <code>
            // build script
            string script = "UnitsInStock.ForeColor = " +
            	"IIF(UnitsInStock &lt; ReorderLevel, vbRed, vbBlack)";
            	
            // assign script to detail section
            _c1r.Sections.Detail.OnPrint = script;
            </code></example>
    </member>
    <member name="T:C1.WPF.FlexReport.CheckBoxField">
      <summary>
            Represents a checkbox field in a report.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.CheckBoxField.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.FlexReport.CheckBoxField" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckBoxField.Value">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptObjectValue" /> yielding the checked value of the checkbox.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckBoxField.Text">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the text shown in the field.
            Gets or sets the field's text.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckBoxField.ThreeState">
      <summary>
            Gets or sets a value indicating whether the checkbox will allow three check states rather than two.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckBoxField.CheckMark">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.CheckBoxField.CheckMark" /> object that determines the look of the check mark.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckBoxField.CheckAlign">
      <summary>
            Gets or sets the horizntal and vertical alignment of the check mark within the field area.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.CheckMarkStyle">
      <summary>
            Gets or sets the style of a check mark.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckMarkStyle.Standard">
      <summary>
            The check mark looks like the check mark in the standard CheckBox control.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckMarkStyle.CheckBox">
      <summary>
            The check mark looks like a check box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckMarkStyle.CrossBox">
      <summary>
            The check mark looks like a cross box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckMarkStyle.RadioButton">
      <summary>
            The check mark looks like a radio button.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckMarkStyle.CustomSymbol">
      <summary>
            The check mark is drawn using custom symbols specified by CheckedSymbol, UncheckedSymbol and IndeterminateSymbol properties.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckMarkStyle.CustomImage">
      <summary>
            The check mark is drawn using custom images specified by CheckedImage, UncheckedImage and IndeterminateImage properties.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.CheckMark">
      <summary>
            Defines the visual properties of the check mark of the CheckBoxField.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.Style">
      <summary>
            Gets or sets the style of the check mark.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.CheckedSymbol">
      <summary>
            Gets or sets the checked symbol (used if <see cref="P:C1.WPF.FlexReport.CheckMark.Style" /> is <see cref="F:C1.WPF.FlexReport.CheckMarkStyle.CustomSymbol" />).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.UncheckedSymbol">
      <summary>
            Gets or sets the unchecked symbol (used if <see cref="P:C1.WPF.FlexReport.CheckMark.Style" /> is <see cref="F:C1.WPF.FlexReport.CheckMarkStyle.CustomSymbol" />).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.IndeterminateSymbol">
      <summary>
            Gets or sets the indeterminate symbol (used if <see cref="P:C1.WPF.FlexReport.CheckMark.Style" /> is <see cref="F:C1.WPF.FlexReport.CheckMarkStyle.CustomSymbol" />).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.CheckedImage">
      <summary>
            Gets or sets the checked image (used if <see cref="P:C1.WPF.FlexReport.CheckMark.Style" /> is <see cref="F:C1.WPF.FlexReport.CheckMarkStyle.CustomImage" />).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.UncheckedImage">
      <summary>
            Gets or sets the unchecked image (used if <see cref="P:C1.WPF.FlexReport.CheckMark.Style" /> is <see cref="F:C1.WPF.FlexReport.CheckMarkStyle.CustomImage" />).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.IndeterminateImage">
      <summary>
            Gets or sets the indeterminate image (used if <see cref="P:C1.WPF.FlexReport.CheckMark.Style" /> is <see cref="F:C1.WPF.FlexReport.CheckMarkStyle.CustomImage" />).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.CheckMark.Font">
      <summary>
            Gets or sets the font used to draw the check mark symbol.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.CheckMark.OnPropertyChanged(System.String)">
      <summary>
            Fires <see cref="!:PropertyChanged" /> event.
            </summary>
      <param name="propertyName">the name of the property that changed.</param>
    </member>
    <member name="T:C1.WPF.FlexReport.BorderStyleEnum">
      <summary>
            Specifies the Field’s border style.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.WPF.FlexReport.Field.BorderStyle" /> property in the <see cref="T:C1.WPF.FlexReport.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.BorderStyleEnum.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.BorderStyleEnum.Transparent">
      <summary>
            No border, same as None, added for backward compatibility.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.BorderStyleEnum.Solid">
      <summary>
            Solid border.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.BorderStyleEnum.Dash">
      <summary>
            Dashed border.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.BorderStyleEnum.Dot">
      <summary>
            Dotted border.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.BorderStyleEnum.DashDot">
      <summary>
            Dash-dot border.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.BorderStyleEnum.DashDotDot">
      <summary>
            Dash-dot-dot border.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.CheckBoxEnum">
      <summary>
            Specifies how boolean values are translated into check boxes.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.WPF.FlexReport.Field.CheckBox" /> property in the <see cref="T:C1.WPF.FlexReport.Field" /> class. 
            This property is useful when you wish to display boolean values graphically, 
            rather than using text.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckBoxEnum.NoCheckBox">
      <summary>
            No checkbox (display as text).
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckBoxEnum.CheckBox">
      <summary>
            Checkbox.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckBoxEnum.CrossBox">
      <summary>
            Crossbox.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.CheckBoxEnum.RadioButton">
      <summary>
            Radio button.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FieldAlignEnum">
      <summary>
            Specifies the alignment of text within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.WPF.FlexReport.Field.Align" /> property in the <see cref="T:C1.WPF.FlexReport.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.General">
      <summary>
            Align numbers to the right, other values to the left.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.RightTop">
      <summary>
            Align to the right and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.JustTop">
      <summary>
            Justify and align to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.JustBottom">
      <summary>
            Justify and align to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.FieldAlignEnum.JustMiddle">
      <summary>
            Justify and align to the middle of the field box.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.PictureAlignEnum">
      <summary>
            Specifies the alignment of images within the field's rectangle.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the 
            <see cref="P:C1.WPF.FlexReport.Field.PictureAlign" />, <see cref="P:C1.WPF.FlexReport.ImageField.PictureAlign" /> etc properties.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.RightTop">
      <summary>
            Align to the right and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.PictureScaleEnum">
      <summary>
            Specifies the scaling of images within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.WPF.FlexReport.Field.PictureScale" />,
            <see cref="P:C1.WPF.FlexReport.ImageField.PictureScale" /> properties.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureScaleEnum.Clip">
      <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureScaleEnum.Stretch">
      <summary>
            Stretch the picture to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureScaleEnum.Scale">
      <summary>
            Scale the picture to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureScaleEnum.Tile">
      <summary>
            Tile the picture to fill the display area.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureScaleEnum.Hide">
      <summary>
            Hide the picture.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.RunningSumEnum">
      <summary>
            Determines whether to calculate a running sum.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.WPF.FlexReport.Field.RunningSum" /> property in the <see cref="T:C1.WPF.FlexReport.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.RunningSumEnum.NoRunningSum">
      <summary>
            Do not treat field as a running sum.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.RunningSumEnum.SumOverGroup">
      <summary>
            Calculate running sum over each group.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.RunningSumEnum.SumOverAll">
      <summary>
            Calculate running sum over the whole report.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.TextDirectionEnum">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.TextDirectionEnum.Normal">
      <summary>
            Text direction is normal.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.TextDirectionEnum.Up">
      <summary>
            Text direction is up.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.TextDirectionEnum.Down">
      <summary>
            Text direction is down.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.Field.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.Field" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.WritingMode">
      <summary>
            Gets or sets the text writing mode: horizontal (default), vertical with left to right flow etc.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Value">
      <summary>
            Gets or sets the field's calculated value.
            </summary>
      <remarks>
        <para>When a field's <see cref="P:C1.WPF.FlexReport.Field.Calculated" /> property is set to true, the control evaluates 
            the expression stored in the <see cref="P:C1.WPF.FlexReport.Field.Text" /> property and stores the result in the 
            <see cref="P:C1.WPF.FlexReport.Field.Value" /> property, which gets rendered into the report.</para>
        <para>This is the field's default property, so when you use a field name in a <b>VBScript</b>
            expression, you are actually referring to the field's <see cref="P:C1.WPF.FlexReport.Field.Value" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Text">
      <summary>
            Gets or sets the field's text.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.WPF.FlexReport.Field.Text" /> property contains the text that will be rendered on the report.</para>
        <para>This value may be rendered literally (without any translation) or it may be evaluated as a 
            <b>VBScript</b> expression, depending on the setting of the <see cref="P:C1.WPF.FlexReport.Field.Calculated" /> property.</para>
      </remarks>
      <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code></example>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Subreport">
      <summary>
            Gets or sets a reference to another report to be rendered within the field (a <i>subreport</i>).
            </summary>
      <remarks>
        <para>A subreport is a report that is inserted in another report. Subreports are useful when you want to combine 
            several reports into one. For example, you may have a main report that integrates several subreports into a single 
            main report. Or you can use the main report to show detailed information and use subreports to show summary data 
            at the beginning of each group.</para>
        <para>For some real-world examples, check the "Sales By Category" and "Sales By Year" reports in the NWIND.XML
            sample that ships with the control.</para>
        <para>To define a field as a subreport, you should start by loading the subreport, then assign the subreport 
            control to the field's <see cref="P:C1.WPF.FlexReport.Field.Subreport" /> property.</para>
        <para>Next, link the subreport to the main report using the subreport field's <see cref="P:C1.WPF.FlexReport.Field.Text" /> property (this is 
            analogous to setting the <b>LinkChildFields/LinkMasterFields</b> properties in a Microsoft  Access subreport). The 
            <b>Text</b> property in a subreport field is used as a filter. It specifies which records in the source recordset 
            should be used to render the subreport based on the current record for the main report.</para>
        <para>When the main report is being rendered and reaches the subreport field, the <b>Text</b> expression is evaluated 
            and the result is uses as a filter condition for the subreport.</para>
        <para>Building the link expression is not difficult, but it is a little tricky because it requires you to create a 
            string that contains quotes, and these internal quotes must be doubled (written as "").</para>
        <para>If you are creating reports using the Report Designer, you don't have to worry about building the link expressions 
            in code. Instead, right-click the subreport field and select the <b>Link Subreport...</b> menu. This will show a dialog 
            where you can select the master and detail fields. When you click OK, the Report Designer will build the link expression 
            and assign it to the <b>Text</b> property of the subreport field automatically.</para>
        <para>Subreport fields usually have the <see cref="!:AutoHeight" /> property set to <see cref="F:C1.WPF.FlexReport.AutoSizeBehavior.CanGrow" />, so the subreport field can expand to 
            include all its records.</para>
        <para>Subreports may contain other subreports. There's no set limit for the depth of report nesting you can have. 
            However, there must be no circular references to reports. In other words, a report cannot contain a reference to itself 
            as a subreport.</para>
      </remarks>
      <example>
        <code>
            // load subreport and assign it to a field in the main report
            string sSub = "Sales By Category Subreport";
            c1Sub.Load("NWIND.XML", sSub);
            c1rMain.Fields[sSub].Subreport = c1Sub;
            
            // set up connection between main report and subreport
            c1rMain.Fields[sSub].Calculated = true;
            c1rMain.Fields[sSub].Text = "\"CategoryName = '\" &amp; [CategoryName] &amp; \"'\"";
            </code>
      </example>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.SubreportHasData">
      <summary>
            Returns whether a subreport has data and suppresses rendering if it doesn't.
            </summary>
      <remarks>
            This property allows you to check whether a subreport has data and prevent it from rendering if it doesn't. 
            </remarks>
      <example>
            The code below uses script to hide sections with empty subreports:
            <code>
            rep.Sections.Detail.OnFormat = "Detail.Visible = fSubreport.SubreportHasData"
            </code>
            The code below uses script to hide a field containing an empty subreport and show another field instead:
            <code>
            rep.Sections.Detail.OnFormat = 
                "hasData = fSubreport.SubreportHasData\r\n" +
                "fSubreport.Visible = hasData" +
                "fNoData.Visible = Not hasData\r\n" +
            </code></example>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Calculated">
      <summary>
            Specifies whether the <see cref="P:C1.WPF.FlexReport.Field.Text" /> property should be interpreted as a literal value
            or as a calculated expression.
            </summary>
      <remarks>
        <para>If this property is set to false, the value of the <see cref="P:C1.WPF.FlexReport.Field.Text" /> property is rendered 
            on the report without any further processing.</para>
        <para>If it is set to true, the value of the <see cref="P:C1.WPF.FlexReport.Field.Text" /> property is evaluated as a 
            <b>VBScript</b> expression and the result of the expression is rendered on the report.</para>
      </remarks>
      <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code></example>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.HideDuplicates">
      <summary>
            Specifies whether duplicate values in consecutive records should be suppressed.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.Field.HideDuplicates" /> property to hide a field on a report 
            when its value is the same as in the preceding record.</para>
        <para>For example, on a report listing suppliers and their products, each supplier's name 
            can appear once for each group of products, rather than once for each product.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.RunningSum">
      <summary>
            Specifies whether to show a running sum for the field.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.Field.RunningSum" /> property to calculate record-by-record or 
            group-by-group totals in a report.</para>
        <para>The <see cref="P:C1.WPF.FlexReport.Field.RunningSum" /> property specifies whether a calculated field on a report 
            displays a running total and lets you set the range over which values are accumulated.</para>
      </remarks>
      <seealso cref="T:C1.WPF.FlexReport.RunningSumEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Field.WordWrap">
      <summary>
            Gets or sets a value indicating whether automatic word wrapping is on.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.LineSpacing">
      <summary>
            Gets or sets the line spacing between text lines in the field, in percent.
            The default is 100 which corresponds to normal line spacing.
            <para>
            Note that this property is ignored if <see cref="P:C1.WPF.FlexReport.Field.RTF" /> is <b>true</b>.
            </para></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Font">
      <summary>
            Gets or sets the field's font.
            </summary>
      <remarks>If you set a field's font <see cref="P:C1.WPF.FlexReport.FontHolder.Size" /> property to a value that 
            is too large to fit the field box (defined by the <see cref="!:Height" /> property), 
            no text will appear in the field.
            </remarks>
      <seealso cref="T:C1.WPF.FlexReport.FontHolder" />
    </member>
    <member name="P:C1.WPF.FlexReport.Field.TextAngle">
      <summary>
            Gets or sets the angle of text rotation within the field (including barcodes).
            </summary>
      <remarks>
            Note that some output/export formats (such as RTF and plain text) do not support rotated text.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.CanGrow">
      <summary>
            Specifies whether the field height should be automatically increased to fit the field's contents.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.Field.CanGrow" /> and <see cref="P:C1.WPF.FlexReport.Field.CanShrink" /> properties to control 
            the appearance of report fields and sections. When you set both properties to true, the field 
            or section automatically adjusts so any amount of data can be printed. When a field grows or 
            shrinks, the fields below it move down or up the page.</para>
        <para>If you set a field's <see cref="P:C1.WPF.FlexReport.Field.CanGrow" /> property to true, the control automatically 
            sets the <see cref="P:C1.WPF.FlexReport.Field.CanGrow" /> property of the containing section to true. (However, if you 
            set a control's <see cref="P:C1.WPF.FlexReport.Field.CanShrink" /> property to true, the control doesn't set the section's 
            <see cref="P:C1.WPF.FlexReport.Field.CanShrink" /> property to true.)</para>
        <para>When you use the <see cref="P:C1.WPF.FlexReport.Field.CanGrow" /> and <see cref="P:C1.WPF.FlexReport.Field.CanShrink" /> properties, remember that:</para>
        <para>1. The property settings don't affect the horizontal spacing between fields; they affect 
            only the vertical space the fields occupy.</para>
        <para>2. The height of a large field can prevent fields beside it from shrinking. For example, 
            if several short controls are on the left side of a report's detail section and one tall control, 
            such as an unbound object frame, is on the right side, the controls on the left won't shrink,
            even if they contain no data.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.CanShrink">
      <summary>
            Specifies whether the field height should be automatically reduced to fit the field's contents.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.Field.CanGrow" />
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Size">
      <summary>
            Gets or sets the field's size, in twips.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Location">
      <summary>
            Gets or sets the field's location within the section, in twips.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.ForeColor">
      <summary>
            Gets or sets the field's foreground color.
            </summary>
      <remarks>
            Use the <b>ForeColor</b> property to specify the color for text in a field. You can use this property to make 
            fields easy to read or to convey a special meaning.
            </remarks>
      <example>
            The code below uses script to change the color of the text in the <i>UnitsInStock</i> field when its value 
            falls below the reorder level.
            <code>
            // build script
            string script = "UnitsInStock.ForeColor = " +
            	"IIF(UnitsInStock &lt; ReorderLevel, vbRed, vbBlack)";
            	
            // assign script to detail section
            _c1r.Sections.Detail.OnPrint = script;
            </code></example>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Format">
      <summary>
            Gets or sets a string used to format the field value.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.Field.Format" /> property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
        <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.WPF.FlexReport.Field.Format" /> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.Field.Format" /> property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
        <para>The syntax for the format string is the same used with the .NET <see cref="M:System.String.Format(System.String,System.Object)" /> method.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Align">
      <summary>
            Gets or sets the text alignment within the field.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.FieldAlignEnum" />
      <remarks>
        <para>This property determines how text is aligned within the field.</para>
        <para>To control picture alignment, use the <see cref="P:C1.WPF.FlexReport.Field.PictureAlign" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.BorderStyle">
      <summary>
            Gets or sets the field's border style.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.LineWidth">
      <summary>
            Gets or sets the width of the field's border or line.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.BorderColor">
      <summary>
            Gets or sets the field's border color.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Picture">
      <summary>
            Gets or sets a picture to display on the field.
            </summary>
      <remarks>
        <para>You may set this property to three types of object:</para>
        <para>1) Regular .NET <see cref="T:C1.WPF.Document.C1ImageHelper" /> objects.</para>
        <para>2) Strings containing image file names or Urls.</para>
        <para>3) Strings containing names of image fields in the report data source.</para>
        <para>Options 1 and 2 are used to create unbound images, such as logos. These images do not 
            depend on the report data.</para>
        <para>Option 3 is used to create bound images, such as product or employee pictures. These 
            are images stored with the report data.</para>
      </remarks>
      <seealso cref="P:C1.WPF.FlexReport.Field.PictureAlign" />
      <seealso cref="P:C1.WPF.FlexReport.Field.PictureScale" />
    </member>
    <member name="P:C1.WPF.FlexReport.Field.PictureAlign">
      <summary>
            Gets or sets how field pictures should be the aligned.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.Field.Picture" />
      <seealso cref="P:C1.WPF.FlexReport.Field.PictureScale" />
      <seealso cref="T:C1.WPF.FlexReport.PictureAlignEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Field.PictureScale">
      <summary>
            Gets or sets how images should be the scaled to fit within the field area.
            </summary>
      <remarks>
        <para>Depending on the setting of this property, images may be clipped, stretched, scaled (which preserves the 
            image's aspect ratio), tiled, or hidden.</para>
        <para>
          <b>PictureScale</b> works with the <see cref="P:C1.WPF.FlexReport.Field.PictureAlign" /> property so you can control image scaling and 
            alignment independently.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.CheckBox">
      <summary>
            Specifies whether the field should be displayed as a checkbox.
            </summary>
      <remarks>
            This property allows you to display boolean values graphically, rather than as plain text.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.RTF">
      <summary>
            Gets or sets a value indicating whether strings enclosed in curly brackets should render as RTF.
            </summary>
      <remarks>If you set this property to true, any fields containing text 
            enclosed in curly brackets will be rendered as RTF. 
            This allows you to add complex formatting within a field.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.BarCode">
      <summary>
            Gets or sets a value indicating whether the field should render as barcode.
            </summary>
      <seealso cref="T:C1.WPF.Document.BarCodeEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Field.BarcodeOptions">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.Field.BarcodeOptions" /> object which allows to define various barcode-related options.
            </summary>
      <seealso cref="T:C1.WPF.Document.BarCodeEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Field.ShapeType">
      <summary>
            Gets or sets the type of geometric shape drawn by the current field.
            <para>The default is <b>None</b>.</para></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Field.Shape">
      <summary>
            Gets or sets an instance of the <see cref="T:C1.WPF.Document.ShapeBase" />-derived class specifying
            properties of the geometric shape drawn by this field (if <see cref="P:C1.WPF.FlexReport.Field.ShapeType" /> is not <b>None</b>).
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.Field.ShapeType" />
    </member>
    <member name="T:C1.WPF.FlexReport.ForcePageBreakEnum">
      <summary>
            Determines whether page breaks should be inserted before or after a field, subsection or section.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.WPF.FlexReport.FieldBase.ForcePageBreak" /> and 
            <see cref="P:C1.WPF.FlexReport.Section.ForcePageBreak" /> properties in the <see cref="T:C1.WPF.FlexReport.FieldBase" /> and <see cref="T:C1.WPF.FlexReport.Section" /> classes.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.ForcePageBreakEnum.None">
      <summary>
            No page breaks.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ForcePageBreakEnum.Before">
      <summary>
            A page break is inserted before the field or section.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ForcePageBreakEnum.After">
      <summary>
            A page break is inserted after the field or section.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ForcePageBreakEnum.BeforeAndAfter">
      <summary>
            Page breaks are inserted before and after the field or section.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ForcePageBreakEnum.PageBefore">
      <summary>
            In multi-column reports, a page break is inserted before the field or section instead of column break.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ForcePageBreakEnum.PageAfter">
      <summary>
            In multi-column reports, a page break is inserted after the field or section instead of column break.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ForcePageBreakEnum.PageBeforeAndAfter">
      <summary>
            In multi-column reports, a page break is inserted before and after the field or section instead of column break.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.AutoSizeBehavior">
      <summary>
            Defines options controlling how an object's size changes
            automatically depending on its content.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.AutoSizeBehavior.None">
      <summary>
            Object is not resized.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.AutoSizeBehavior.CanGrow">
      <summary>
            Object can grow.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.AutoSizeBehavior.CanShrink">
      <summary>
            Object can shrink.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.AutoSizeBehavior.GrowAndShrink">
      <summary>
            Object can grow and shrink.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SplitBehavior">
      <summary>
            Defines the splitting behavior of a report object.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SplitBehavior.Never">
      <summary>
            The object should not be split between pages
            (i.e. should always be kept together on a single page), object
            is cut off if it not fit the page.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SplitBehavior.SplitIfNeeded">
      <summary>
            The object can be split if it does not fit onto the current page.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SplitBehavior.KeepTogether">
      <summary>
            The object can be split only if it is too large to fit on an empty 
            page. In that case, the object is split immediately. Otherwise, a 
            new page is started and the object is placed on it without 
            splitting.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.AnchorEnum">
      <summary>
            Determines how the field is positioned with respect to its containing subsection 
            when the subsection grows or shrinks as a result of the subsection's 
            <see cref="P:C1.WPF.FlexReport.SubSection.AutoHeight" /> and <see cref="P:C1.WPF.FlexReport.SubSection.AutoHeight" /> properties.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.WPF.FlexReport.FieldBase.Anchor" /> property in the <see cref="T:C1.WPF.FlexReport.FieldBase" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.AnchorEnum.Top">
      <summary>
            The field does not move. The space between the top of the field 
            and the top of the subsection remains the same.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.AnchorEnum.Bottom">
      <summary>
            The field moves vertically. The space between the bottom of the field 
            and the bottom of the subsection remains the same.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.AnchorEnum.TopAndBottom">
      <summary>
            The field grows or shrinks. The space between field and the subsection 
            remains the same (above and below).
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FieldBase">
      <summary>
            Abstract base class for all C1FlexReport field types.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.FieldBase" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldBase.OnSerializeAdded">
      <summary>
            Post action after the field is added to the parent report's fields colleciton.
            </summary>
      <remarks>
            The ParentReport is not null on calling this method.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldBase.AssignFrom(C1.WPF.FlexReport.FieldBase)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.FieldBase" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldBase.Clone">
      <summary>
            Creates a new object that is a copy of the current <see cref="T:C1.WPF.FlexReport.FieldBase" /> object.
            </summary>
      <returns>Copy of the current <see cref="T:C1.WPF.FlexReport.FieldBase" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldBase.SetZOrder(System.Boolean)">
      <summary>
            Brings a field to the front or sends it to the back of the <b>ZOrder</b>.
            </summary>
      <param name="front">Determines whether the field is brought to the front or sent to the back
            of the <b>ZOrder</b>.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Bounds">
      <summary>
            Gets or sets bounds of this <see cref="T:C1.WPF.FlexReport.FieldBase" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> containing this field.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Name">
      <summary>
            Gets or sets the field name.
            </summary>
      <remarks>
        <para>The field name can be used as an index into the control's <see cref="P:C1.WPF.FlexReport.C1FlexReport.Fields" /> collection.</para>
        <para>Field names are also used to identify fields in <b>VBScript</b> expressions, as shown in the example
            below.</para>
        <para>Duplicate and empty field names are allowed, but should be avoided if you plan to use the field names 
            in scripts or as indexers.</para>
      </remarks>
      <example>
            The code below assigns a script to the report's <see cref="F:C1.WPF.FlexReport.SectionTypeEnum.Detail" /> section. The script 
            changes a field's <see cref="!:ForeColor" /> property depending on a value.
            <code>
            _c1r.Sections.Fields["sampleField"].ForeColor = Color.Black;
            _c1r.Sections.Detail.OnFormat = 
                "sampleField.ForeColor = iif(someValue &lt; 5, vbRed, vbBlack)";
            </code></example>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Section">
      <summary>
            Gets or sets the section to which the field belongs.
            </summary>
      <remarks>
            To move a field from one section to another, set its <see cref="P:C1.WPF.FlexReport.FieldBase.Section" /> property to a new value.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.SubSectionIndex">
      <summary>
            Gets or sets the index of the <see cref="P:C1.WPF.FlexReport.FieldBase.SubSection" /> in <see cref="P:C1.WPF.FlexReport.FieldBase.Section" /> to which the field belongs.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.SubSection">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.FieldBase.SubSection" /> object containing this field.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Visible">
      <summary>
            Gets or sets a value indicating whether the field is visible or hidden.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Hyperlink">
      <summary>
            Gets the hyperlink associated with the current field.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Left">
      <summary>
            Gets or sets the X coordinate of the field's left edge in twips.
            </summary>
      <remarks>
        <para>A field's location is the distance from its upper left corner to the upper left corner
            of its containing <see cref="P:C1.WPF.FlexReport.FieldBase.SubSection" />.</para>
        <para>Setting the <see cref="P:C1.WPF.FlexReport.FieldBase.Left" /> or <see cref="P:C1.WPF.FlexReport.FieldBase.Top" /> property to zero places the field at 
            the very left or top of its containing section.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Top">
      <summary>
            Gets or sets the Y coordinate of the field's top edge in twips.
            </summary>
      <remarks>
        <para>A field's location is the distance from its upper left corner to the upper left corner of its containing 
            <see cref="P:C1.WPF.FlexReport.FieldBase.SubSection" />.</para>
        <para>If the field's <see cref="P:C1.WPF.FlexReport.FieldBase.AutoHeight" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.WPF.FlexReport.FieldBase.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.WPF.FlexReport.FieldBase.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.WPF.FlexReport.FieldBase.Top" /> and <see cref="P:C1.WPF.FlexReport.FieldBase.Height" /> properties is not affected.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Width">
      <summary>
            Gets or sets the width of the field in twips.
            </summary>
      <remarks>
        <para>Every <see cref="T:C1.WPF.FlexReport.FieldBase" /> object has a rectangle, or "field box", where the field contents are rendered.</para>
        <para>The field box is defined by the <see cref="P:C1.WPF.FlexReport.FieldBase.Left" />, <see cref="P:C1.WPF.FlexReport.FieldBase.Top" />, <see cref="P:C1.WPF.FlexReport.FieldBase.Width" />, and <see cref="P:C1.WPF.FlexReport.FieldBase.Height" /> properties.</para>
        <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Height">
      <summary>
            Gets or sets the height of the field in twips.
            </summary>
      <remarks>
        <para>Every <see cref="T:C1.WPF.FlexReport.FieldBase" /> object has a rectangle, or "field box", where the field contents are rendered.</para>
        <para>The field box is defined by the <see cref="P:C1.WPF.FlexReport.FieldBase.Left" />, <see cref="P:C1.WPF.FlexReport.FieldBase.Top" />, <see cref="P:C1.WPF.FlexReport.FieldBase.Width" />, and <see cref="P:C1.WPF.FlexReport.FieldBase.Height" /> properties.</para>
        <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
        <para>The field's <see cref="P:C1.WPF.FlexReport.FieldBase.Height" /> property should be set to a value larger than or equal to the height of the 
            field's <see cref="T:C1.WPF.Document.Util.Font" />, or no text will appear in the field.</para>
        <para>If the field's <see cref="P:C1.WPF.FlexReport.FieldBase.AutoHeight" /> property are set to true, the control will 
            automatically adjust the <see cref="P:C1.WPF.FlexReport.FieldBase.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.WPF.FlexReport.FieldBase.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.WPF.FlexReport.FieldBase.Top" /> and <see cref="P:C1.WPF.FlexReport.FieldBase.Height" /> properties is not affected.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Right">
      <summary>
            Gets the x-coordinate of the field's right edge in twips.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Bottom">
      <summary>
            Gets the y-coordinate of the field's bottom edge in twips.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.MarginLeft">
      <summary>
            Gets or sets the spacing between the left edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.MarginTop">
      <summary>
            Gets or sets the spacing between the top edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.MarginRight">
      <summary>
            Gets or sets the spacing between the right edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.MarginBottom">
      <summary>
            Gets or sets the spacing between the bottom edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.ForcePageBreak">
      <summary>
            Gets or sets a value determining whether to insert page breaks before or after the field.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.AutoHeight">
      <summary>
            Gets or sets a value determining how height of object changes depending on its content.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.AutoWidth">
      <summary>
            Gets or sets a value determining how width of object changes depending on its content.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.SplitVertBehavior">
      <summary>
            Gets or sets a value determining how the object is treated
            when it is too high to fit in the vertical space available on the current page.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.FieldBase.SplitHorzBehavior" />
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.SplitHorzBehavior">
      <summary>
            Gets or sets a value determining how the object is treated
            when it is too wide to fit in the horizontal space available on the current page.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.FieldBase.SplitVertBehavior" />
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.KeepTogether">
      <summary>
            Specifies whether the field should be kept together on a page.
            </summary>
      <remarks>
        <para>If this property is set to true, the control will insert page breaks in order to keep 
            the field contents together on a page.</para>
        <para>If it is set to false, and the containing <see cref="P:C1.WPF.FlexReport.FieldBase.Section" /> also has its 
            <see cref="P:C1.WPF.FlexReport.Section.KeepTogether" /> property set to false, then the field may be rendered across
            two or more pages.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.Anchor">
      <summary>
            Gets or sets a value determining how the field's vertical position changes relative to its containing <see cref="P:C1.WPF.FlexReport.FieldBase.SubSection" />.
            </summary>
      <remarks>
        <para>Normally, fields do not move when sections grow or shrink. In some cases, however, you may want
            fields to grow with the section or to stay in the same position relative to the bottom of the
            section.</para>
        <para>This is especially common for fields used to create vertical lines that should extend
            the entire height of the section.</para>
      </remarks>
      <seealso cref="T:C1.WPF.FlexReport.AnchorEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.ZOrder">
      <summary>
            Gets or sets the <b>ZOrder</b> of the field.
            </summary>
      <remarks>
        <para>The <b>ZOrder</b> of a field determines whether it is rendered in front of or behind 
            other fields that overlap with it.</para>
        <para>High <b>ZOrder</b> values bring the field to the front, low values send it to the back.</para>
        <para>Because <b>ZOrder</b> values are relative, it is usually easier to call the <see cref="M:C1.WPF.FlexReport.FieldBase.SetZOrder(System.Boolean)" /> 
            method, which ensures the field is rendered in front of or behind all other overlapping fields.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.RightToLeft">
      <summary>
            Gets or sets a value indicating whether right-to-left text rendering rules should be used.
            If null (which is the default), the property <see cref="P:C1.WPF.FlexReport.C1FlexReport.RightToLeft" /> defined on the report is used.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.ActualRightToLeft">
      <summary>
            Gets the actual right-to-left value that is being used. 
            If the field's own <see cref="P:C1.WPF.FlexReport.FieldBase.RightToLeft" /> is not null, that value is returned.
            Otherwise the <see cref="P:C1.WPF.FlexReport.FieldBase.ActualRightToLeft" /> defined on the report is returned.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.RenderLeft">
      <summary>
            Gets the actual left position of the current field in its subsection.
            This property can only be used while the report is being rendered, otherwise it returns -1.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.RenderTop">
      <summary>
            Gets the actual top position of the current field in its subsection.
            This property can only be used while the report is being rendered, otherwise it returns -1.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.RenderWidth">
      <summary>
            Gets the actual width of the current field.
            This property can only be used while the report is being rendered, otherwise it returns -1.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FieldBase.RenderHeight">
      <summary>
            Gets the actual height of the current field.
            This property can only be used while the report is being rendered, otherwise it returns -1.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FieldCollection">
      <summary>
            Represents the collection of the <see cref="T:C1.WPF.FlexReport.FieldBase" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldCollection.Add(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a <see cref="T:C1.WPF.FlexReport.Field" /> to the collection. This overload adds a legacy field type and is deprecated.
            </summary>
      <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
      <param name="text">Contains the value for the new field's <see cref="P:C1.WPF.FlexReport.Field.Text" /> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.WPF.FlexReport.Field.Calculated" /> property. By default, <see cref="P:C1.WPF.FlexReport.Field.Calculated" /> is set to false and the text 
            is rendered as-is.</param>
      <param name="left">Left coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="top">Top coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="width">Width of the new field, in twips.</param>
      <param name="height">Height of the new field, in twips.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
        <para>If you add a field to a section's <see cref="P:C1.WPF.FlexReport.Section.Fields" /> collection, the new field is automatically 
            assigned to that section.</para>
        <para>If you add a field to the control's <see cref="P:C1.WPF.FlexReport.C1FlexReport.Fields" /> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="!:Field.Section" /> property or it will not be 
            rendered in the report.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldCollection.Add(System.String,System.String,System.Windows.Rect)">
      <summary>
            Adds a <see cref="T:C1.WPF.FlexReport.Field" /> to the collection.
            </summary>
      <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
      <param name="text">Contains the value for the new field's <see cref="P:C1.WPF.FlexReport.Field.Text" /> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.WPF.FlexReport.Field.Calculated" /> property. By default, <see cref="P:C1.WPF.FlexReport.Field.Calculated" /> is set to false and the text 
            is rendered as-is.</param>
      <param name="rc">Defines the position of the field, in twips, with respect to its containing section.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
        <para>If you add a field to a section's <see cref="P:C1.WPF.FlexReport.Section.Fields" /> collection, the new field is automatically 
            assigned to that section.</para>
        <para>If you add a field to the control's <see cref="P:C1.WPF.FlexReport.C1FlexReport.Fields" /> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="!:Field.Section" /> property or it will not be 
            rendered in the report.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldCollection.Add(C1.WPF.FlexReport.FieldBase)">
      <summary>
            Adds a field or a clone of a field to the collection.
            </summary>
      <param name="field">A <see cref="T:C1.WPF.FlexReport.FieldBase" /> object to add to the collection.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
            If the field does not belong to any reports, it is added to the collection. If the field already
            belongs to a report, a clone is created and added to the collection.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldCollection.RemoveAt(System.Int32)">
      <summary>
            Removes a field from the collection.
            </summary>
      <param name="index">Specifies the field to be removed.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldCollection.Remove(System.Int32)">
      <summary>
            Removes a field from the collection.
            </summary>
      <param name="index">Specifies the field to be removed.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldCollection.Remove(System.String)">
      <summary>
            Removes a field from the collection.
            </summary>
      <param name="name">The name of the field to be removed.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FieldCollection.Remove(C1.WPF.FlexReport.FieldBase)">
      <summary>
            Removes a field from the collection.
            </summary>
      <param name="item">The field to be removed.</param>
    </member>
    <member name="T:C1.WPF.FlexReport.ImageField">
      <summary>
            Represents a report field containing a data bound or static image.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ImageField.Picture">
      <summary>
            Gets or sets a picture to display in the field.
            </summary>
      <remarks>
        <para>You may set this property to three types of object:</para>
        <para>1) Regular .NET <see cref="!:Image" /> objects.</para>
        <para>2) Strings containing image file names or Urls.</para>
        <para>3) Strings containing names of image fields in the report data source.</para>
        <para>Options 1 and 2 are used to create unbound images, such as logos. These images do not 
            depend on the report data.</para>
        <para>Option 3 is used to create bound images, such as product or employee pictures. These 
            are images stored with the report data.</para>
      </remarks>
      <seealso cref="P:C1.WPF.FlexReport.ImageField.PictureAlign" />
      <seealso cref="P:C1.WPF.FlexReport.ImageField.PictureScale" />
    </member>
    <member name="P:C1.WPF.FlexReport.ImageField.PictureAlign">
      <summary>
            Gets or sets a value determining how image is aligned within the field.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.ImageField.Picture" />
      <seealso cref="P:C1.WPF.FlexReport.ImageField.PictureScale" />
      <seealso cref="T:C1.WPF.FlexReport.PictureAlignEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.ImageField.PictureScale">
      <summary>
            Gets or sets a value determining how image is scaled within the field.
            </summary>
      <remarks>
        <para>Depending on the setting of this property, images may be clipped, stretched, scaled (which preserves the 
            image's aspect ratio), tiled, or hidden.</para>
        <para>
          <b>PictureScale</b> works with the <see cref="P:C1.WPF.FlexReport.ImageField.PictureAlign" /> property so you can control image scaling and 
            alignment independently.</para>
      </remarks>
    </member>
    <member name="T:C1.WPF.FlexReport.ParagraphItem">
      <summary>
            Abstract base class for objects representing fragments within a <see cref="T:C1.WPF.FlexReport.ParagraphField" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ParagraphItem" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphItem.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
      <param name="assignName">Indicates whether the name of the object should be copied.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphItem.Owner">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.FlexReport.ParagraphField" /> object owning this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphItem.Background">
      <summary>
            Gets or sets the <see cref="!:C1BackgroundBase" /> object defining the background of the paragraph item.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphItem.BackColor">
      <summary>
            Gets or sets the item's background color,
            this property works via <see cref="P:C1.WPF.FlexReport.ParagraphItem.Background" /> property using <see cref="T:C1.WPF.Document.C1SolidBrush" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphItem.Hyperlink">
      <summary>
            Gets the hyperlink associated with the current item.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ParagraphText">
      <summary>
            Represents run of text in the <see cref="T:C1.WPF.FlexReport.ParagraphField" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphText.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.FlexReport.ParagraphText" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphText.ForeColor">
      <summary>
            Gets or sets the item's foreground color.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphText.Font">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.FlexReport.ParagraphText" /> font.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphText.Text">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptObjectValue" /> yielding the text of the current item.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:C1.WPF.FlexReport.ParagraphText.Format" -->
    <member name="T:C1.WPF.FlexReport.ParagraphItemCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.ParagraphItem" /> objects. 
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphItemCollection.Add(System.String)">
      <summary>
            Adds a <see cref="T:C1.WPF.FlexReport.ParagraphText" /> object to the collection.
            </summary>
      <returns>Returns added <see cref="T:C1.WPF.FlexReport.ParagraphText" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphItemCollection.Add(C1.WPF.FlexReport.ParagraphItem)">
      <summary>
            Adds a <see cref="T:C1.WPF.FlexReport.ParagraphItem" /> object to the collection.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphItemCollection.RemoveAt(System.Int32)">
      <summary>
            Removes item with specified index from the collection.
            </summary>
      <param name="index">The index of item to remove.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphItemCollection.Remove(C1.WPF.FlexReport.ParagraphItem)">
      <summary>
            Removes a <see cref="T:C1.WPF.FlexReport.ParagraphItem" /> object from collection.
            </summary>
      <param name="item">The <see cref="T:C1.WPF.FlexReport.ParagraphItem" /> object to remove.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphItemCollection.Clear">
      <summary>
            Clears collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ParagraphField">
      <summary>
            Represents a field containing a paragraph of formatted text.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ParagraphField.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.FlexReport.ParagraphField" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ParagraphField.Content">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.ParagraphItemCollection" /> representing the content of the current paragraph.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.RtfField">
      <summary>
            Represents a field containing Rich Text Format text (RTF).
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.RtfField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.RtfField" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.RtfField.Text">
      <summary>
            Gets or sets the RTF text.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.RtfField.DetectUrls">
      <summary>
            Gets or sets a value indicating whether or not the current field
            will automatically format Uniform Resource Locators (URLs) 
            when those are found in text.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.RtfField.Align">
      <summary>
            Gets or sets a value indicating how text is aligned within the field.
            This property is used only if the field's text is not enclosed in RTF begin/end tags "{\rtf1" and "}".
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.RtfField.ForeColor">
      <summary>
            Gets or sets the field's text color.
            This property is used only if the field's text is not enclosed in RTF begin/end tags "{\rtf1" and "}".
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.RtfField.Font">
      <summary>
            Gets or sets the text font.
            This property is used only if the field's text is not enclosed in RTF begin/end tags "{\rtf1" and "}".
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ShapeField">
      <summary>
            Represents a field containing a geometric shape.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ShapeField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ShapeField" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ShapeField.ShapeType">
      <summary>
            Gets or sets the type of geometric shape drawn by the current field, this property
            can be specified as <b>None</b>, in this case field does not draw shape at all.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ShapeField.Shape">
      <summary>
            Gets or sets an instance of the <see cref="T:C1.WPF.Document.ShapeBase" />-derived class specifying
            properties of the geometric shape drawn by this field.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.ShapeField.ShapeType" />
    </member>
    <member name="P:C1.WPF.FlexReport.ShapeField.Line">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.FlexReport.ShapeField.Line" /> object defining the style of lines used to draw the shape.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ShapeField.ShapeBackColor">
      <summary>
            Gets or sets the color used to fill internal areas of shapes.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ShapeField.ShapeBackground">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.Document.C1Brush" />-derived object used to fill the internal areas of the shape.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SubreportField">
      <summary>
            Field used to show subreports in <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.SubreportField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.SubreportField" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubreportField.Subreport">
      <summary>
            Gets or sets a reference to another <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object to be rendered within this <see cref="T:C1.WPF.FlexReport.SubreportField" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubreportField.SubreportHasData">
      <summary>
            Returns whether a subreport has data and suppresses rendering if it doesn't.
            </summary>
      <remarks>
            This property allows you to check whether a subreport has data and prevent it from rendering if it doesn't. 
            </remarks>
      <example>
            The code below uses script to hide sections with empty subreports:
            <code>
            rep.Sections.Detail.OnFormat = "Detail.Visible = fSubreport.SubreportHasData"
            </code>
            The code below uses script to hide a field containing an empty subreport and show another field instead:
            <code>
            rep.Sections.Detail.OnFormat = 
                "hasData = fSubreport.SubreportHasData\r\n" +
                "fSubreport.Visible = hasData" +
                "fNoData.Visible = Not hasData\r\n" +
            </code></example>
    </member>
    <member name="P:C1.WPF.FlexReport.SubreportField.SubreportFilter">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the filter
            that will be applied to the main data source of the subreport.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubreportField.ParameterValues">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.ReportParameterValues" /> collection 
            containing the list of named values that will be assigned to the parameters of the subreport.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubreportField.OutlinesVisible">
      <summary>
            Gets or sets a value indicating whether the outlines generated by this subreport
            should be included in the master report's outline tree.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.TextField">
      <summary>
            Represents a field containing a uniformly formatted databound or static text.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.TextField.#ctor">
      <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.FlexReport.TextField" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.TextField.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.TextField" /> class.
            </summary>
      <param name="text">The text of the field.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.TextField.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.TextField" /> class.
            </summary>
      <param name="name">The name of the field</param>
      <param name="text">The text of the field.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.TextField.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.TextField" /> class.
            </summary>
      <param name="name">The name of the field</param>
      <param name="text">The text of the field.</param>
      <param name="left">Left coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="top">Top coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="width">Width of the new field, in twips.</param>
      <param name="height">Height of the new field, in twips.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.TextField.Text">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptObjectValue" /> yielding the text of the field.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextField.Format">
      <summary>
            Gets or sets a string used to format the field value.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.TextField.Format" /> property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
        <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.WPF.FlexReport.TextField.Format" /> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
        <para>You can use the <see cref="P:C1.WPF.FlexReport.TextField.Format" /> property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
      </remarks>
    </member>
    <member name="T:C1.WPF.FlexReport.TextFieldBase">
      <summary>
            Abstract base class for <see cref="T:C1.WPF.FlexReport.ParagraphField" />, <see cref="T:C1.WPF.FlexReport.TextField" /> and <see cref="T:C1.WPF.FlexReport.CheckBoxField" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.TextFieldBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.TextFieldBase" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.WritingMode">
      <summary>
            Gets or sets the text writing mode: horizontal (default), vertical with left to right flow, etc.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.Align">
      <summary>
            Gets or sets a value determining how text is aligned within the field.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.FieldAlignEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.ForeColor">
      <summary>
            Gets or sets the field's foreground color.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.TextAngle">
      <summary>
            Gets or sets the angle of text rotation within the field.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.WordWrap">
      <summary>
            Gets or sets a value indicating whether automatic word wrapping is on.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.Font">
      <summary>
            Gets or sets the text font.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.LineSpacing">
      <summary>
            Gets or sets the line spacing between text lines in the field, in percent.
            The default is 100 which corresponds to normal line spacing.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.TextFieldBase.TextFitMode">
      <summary>
            Specifies how text is adjusted to fit in the field's bounds.
            <list type="bullet"><item><term>None</term><description>Text is not adjusted.</description></item><item>AutoFontSize<term></term><description>The font size is adjusted (increased or decreased) so that text fits in the specified bounds.</description></item><item>AutoCharSpacing<term></term><description>The spacing between characters is adjusted (increased or decreased) so that text fits in the specified bounds.</description></item></list>
            Unless <see cref="P:C1.WPF.FlexReport.TextFieldBase.TextFitMode" /> is <b>None</b>, the <see cref="P:C1.WPF.FlexReport.TextFieldBase.WordWrap" /> property is ignored (hard breaks are still respected though).
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SortEnum">
      <summary>
            Specifies how groups should be sorted.
            </summary>
      <remarks>Use the members of this enumeration to set the value of 
            the <see cref="P:C1.WPF.FlexReport.Group.Sort" /> property in the <see cref="T:C1.WPF.FlexReport.Group" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.SortEnum.NoSort">
      <summary>
            Do not sort records for this group.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SortEnum.Ascending">
      <summary>
            Sort records in ascending order.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SortEnum.Descending">
      <summary>
            Sort records in descending order.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.KeepTogetherEnum">
      <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.WPF.FlexReport.Group.KeepTogether" /> and 
            <see cref="P:C1.WPF.FlexReport.Section.KeepTogether" /> property in the <see cref="T:C1.WPF.FlexReport.Group" /> and <see cref="T:C1.WPF.FlexReport.Section" /> classes.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.KeepTogetherEnum.KeepNothing">
      <summary>
            Do not try to keep the group together.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.KeepTogetherEnum.KeepWholeGroup">
      <summary>
            Keep the group header, detail, and footer together on a page.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.KeepTogetherEnum.KeepFirstDetail">
      <summary>
            Keep the group header and first detail section together on a page.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.Group">
      <summary>
            Object used to sort and group report data. 
            </summary>
      <remarks>
            Each <b>Group</b> has a Header section and a Footer section that can be used to display
            aggregate information for the group.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.Group.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.Group" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.Group.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.Group" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.GroupBy">
      <summary>
            Gets or sets the expression used to break records into groups.
            </summary>
      <remarks>This property contains a <b>VBScript</b> expression that is evaluated for every record 
            in the source recordset. A new group is started whenever the value of this expression changes. 
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.Sort">
      <summary>
            Gets or sets the group's sort order.
            If <see cref="P:C1.WPF.FlexReport.Group.SortExpression" /> is specified, it is used for sorting, otherwise <see cref="P:C1.WPF.FlexReport.Group.GroupBy" /> is used.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.SortExpression">
      <summary>
            Gets or sets the sort expression. Can be used to sort the group instances by an aggregate function.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.KeepTogether">
      <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.KeepTogetherEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Group.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object that contains this <see cref="T:C1.WPF.FlexReport.Group" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.SectionHeader">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.Section" /> representing the header of this group.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.SectionFooter">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.Section" /> representing the footer of this group.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.OutlineLabel">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the label of the group in the outline tree.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Group.OutlineParent">
      <summary>
            Gets or sets the name of the object that will be the parent of the current group in the outline tree.
            If unspecified, the report hierarchy will be used to determine the parent.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.GroupCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.Group" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.GroupCollection.Add(System.String,System.String,C1.WPF.FlexReport.SortEnum)">
      <summary>
            Adds a new <see cref="T:C1.WPF.FlexReport.Group" /> to the collection, along with header and footer sections for the new group. 
            </summary>
      <param name="name">Contains the name of the new group.</param>
      <param name="groupBy">Contains the value of the <see cref="P:C1.WPF.FlexReport.Group.GroupBy" /> property for the new group.</param>
      <param name="sort">Contains the value of the <see cref="P:C1.WPF.FlexReport.Group.Sort" /> property for the new group.</param>
      <returns>A reference to the newly added group.</returns>
      <remarks>
            When a group is added to a report, the control automatically adds two new sections, the group header and group 
            footer sections for the new group. These new sections are invisible by default.
            </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.GroupCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an item from the collection.
            </summary>
      <param name="index">Specifies the item to be removed.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.GroupCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.GroupCollection.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.PictureShowEnum">
      <summary>
            Specifies where the background picture is displayed.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="!:Layout.PictureShow" /> property in the <see cref="T:C1.WPF.FlexReport.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureShowEnum.NoPages">
      <summary>
            Do not show the background picture.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureShowEnum.AllPages">
      <summary>
            Show the background picture on all pages.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureShowEnum.FirstPage">
      <summary>
            Show the background picture on the first page only.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.PictureShowEnum.AllButFirstPage">
      <summary>
            Show the background picture on all pages but the first.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ColumnLayoutEnum">
      <summary>
            Specifies the layout for the columns (down or across).
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.WPF.FlexReport.Layout.ColumnLayout" /> property 
            in the <see cref="T:C1.WPF.FlexReport.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.ColumnLayoutEnum.Down">
      <summary>
            Columns are laid out down the page, then across.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ColumnLayoutEnum.Across">
      <summary>
            Columns are laid out across the page, then down.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.ColumnLayoutEnum.Labels">
      <summary>
            Causes the report designer to discount label spacing in the design surface, 
            hide header/footer sections, disable grouping button, 
            and disable automatic section resizing when fields are moved or dragged.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.OrientationEnum">
      <summary>
            Specifies the page orientation.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the 
            <see cref="P:C1.WPF.FlexReport.Layout.Orientation" /> property in the <see cref="T:C1.WPF.FlexReport.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.OrientationEnum.Auto">
      <summary>
            Set the orientation automatically, based on the current <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> 
            and report width (<see cref="P:C1.WPF.FlexReport.Layout.Width" />).
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.OrientationEnum.Portrait">
      <summary>
            Use Portrait orientation (tall).
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.OrientationEnum.Landscape">
      <summary>
            Use Landscape orientation (wide).
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.HdrFtrEnum">
      <summary>
            Specifies where the Page Footer and Page Header sections are displayed.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.WPF.FlexReport.Layout.PageFooter" /> and <see cref="P:C1.WPF.FlexReport.Layout.PageHeader" /> properties 
            in the <see cref="T:C1.WPF.FlexReport.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.HdrFtrEnum.AllPages">
      <summary>
            The page footer and header are printed on all pages of a report. 
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.HdrFtrEnum.NotWithReportHdr">
      <summary>
            The page header isn't printed on the same page as the report header. 
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.HdrFtrEnum.NotWithReportFtr">
      <summary>
            The page footer isn't printed on the same page as the report footer. 
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.HdrFtrEnum.NotWithReportHdrFtr">
      <summary>
            The page footer and header are not printed on a page that has either a report header or a report footer.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.Layout">
      <summary>
            The Layout object controls how the report is rendered on pages.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.PageSize">
      <summary>
            Gets the current page size, in twips.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.Width">
      <summary>
            Gets or sets the width of the report's detail section, in twips.
            </summary>
      <remarks>
        <para>This property determines the width of the detail section of the report.</para>
        <para>Multi-column reports have header and footer sections that span all columns so their actual width is 
            <see cref="P:C1.WPF.FlexReport.Layout.Width" /> * <see cref="P:C1.WPF.FlexReport.Layout.Columns" />.</para>
        <para>For example, a two-column report with a one-inch wide detail section would have <b>Width</b> = 1440, 
            and its total width would be 2 * 1440 = 2880.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.MarginLeft">
      <summary>
            Gets or sets the left margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> and <see cref="P:C1.WPF.FlexReport.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.MarginRight">
      <summary>
            Gets or sets the right margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> and <see cref="P:C1.WPF.FlexReport.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.MarginTop">
      <summary>
            Gets or sets the top margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> and <see cref="P:C1.WPF.FlexReport.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.MarginBottom">
      <summary>
            Gets or sets the bottom margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> and <see cref="P:C1.WPF.FlexReport.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.Columns">
      <summary>
            Gets or sets the number of detail columns.
            </summary>
      <remarks>
        <para>Use this property to create multi-column reports.</para>
        <para>In multi-column reports, header and footer sections span the full width of the report. 
            Only the detail section is rendered in multiple columns. Use the <see cref="P:C1.WPF.FlexReport.Layout.Width" /> property to specify the width 
            of each column, and the <see cref="P:C1.WPF.FlexReport.Layout.ColumnLayout" /> property to specify whether columns should be laid out across 
            the page or down the page.</para>
        <para>Multi-column reports are useful for printing reports on mailing labels and other types of multi-column 
            pre-printed forms. They are also useful for creating compact reports where detail information is laid out across 
            the page.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.ColumnLayout">
      <summary>
            Gets or sets the layout for the columns (down or across).
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.ColumnLayoutEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.PaperSize">
      <summary>
            Gets or sets the paper size for the report.
            </summary>
      <seealso cref="!:PaperKind" />
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.CustomWidth">
      <summary>
            Gets or sets the custom width for the report, in twips.
            </summary>
      <remarks>
        <para>To create reports using custom paper sizes, set the <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> property to 
            custom, then set the <see cref="P:C1.WPF.FlexReport.Layout.CustomWidth" /> and <see cref="P:C1.WPF.FlexReport.Layout.CustomHeight" /> properties 
            to the size of the page measured in twips.</para>
        <para>If the <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> is set to a value other than custom, the paper size 
            is determined by that setting. The <see cref="P:C1.WPF.FlexReport.Layout.CustomWidth" /> and <see cref="P:C1.WPF.FlexReport.Layout.CustomHeight" /> properties are not 
            used in this case.</para>
        <para>If the <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> is set to custom and the <see cref="P:C1.WPF.FlexReport.Layout.CustomWidth" /> or 
            <see cref="P:C1.WPF.FlexReport.Layout.CustomHeight" /> properties are set to zero, the printer's default paper size is used.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.CustomHeight">
      <summary>
            Gets or sets the custom height for the report, in twips.
            </summary>
      <remarks>
        <para>To create reports using custom paper sizes, set the <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> property to 
            custom, then set the <see cref="P:C1.WPF.FlexReport.Layout.CustomWidth" /> and <see cref="P:C1.WPF.FlexReport.Layout.CustomHeight" /> properties 
            to the size of the page measured in twips.</para>
        <para>If the <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> is set to a value other than custom, the paper size 
            is determined by that setting. The <see cref="P:C1.WPF.FlexReport.Layout.CustomWidth" /> and <see cref="P:C1.WPF.FlexReport.Layout.CustomHeight" /> properties are not 
            used in this case.</para>
        <para>If the <see cref="P:C1.WPF.FlexReport.Layout.PaperSize" /> is set to custom and the <see cref="P:C1.WPF.FlexReport.Layout.CustomWidth" /> or 
            <see cref="P:C1.WPF.FlexReport.Layout.CustomHeight" /> properties are set to zero, the printer's default paper size is used.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.Orientation">
      <summary>
            Gets or sets the page orientation.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.OrientationEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.PageHeader">
      <summary>
            Gets or sets a value that determines on which pages the Page Header section should be displayed.
            </summary>
      <remarks>
        <para>You can use the <b>PageHeader</b> and <b>PageFooter</b> properties to specify whether a report's page header or 
            page footer should be printed on the same page as a report header or report footer.</para>
        <para>For example, you might not want to print a page header containing the page number on the first page of a report 
            if the report header is a cover sheet.</para>
      </remarks>
      <seealso cref="T:C1.WPF.FlexReport.HdrFtrEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.PageFooter">
      <summary>
            Gets or sets a value that determines on which pages the Page Footer section should be displayed.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.HdrFtrEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.LabelSpacingX">
      <summary>
            Used by the designer to discount horizontal label spacing in the design surface.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Layout.LabelSpacingY">
      <summary>
            Used by the designer to discount vertical label spacing in the design surface.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.Layout.AssignFrom(C1.WPF.FlexReport.Layout)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.Layout.Reset">
      <summary>
            Resets the properties of this <see cref="T:C1.WPF.FlexReport.Layout" /> object to default values.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportInfo">
      <summary>
            Class that contains report metadata.
            </summary>
      <remarks>
        <para>Reports may include general information such as a title, author, and keywords.</para>
        <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportInfo.AssignFrom(C1.WPF.FlexReport.ReportInfo)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportInfo.Clear">
      <summary>
            Clears the <see cref="T:C1.WPF.FlexReport.ReportInfo" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportInfo.Clone">
      <summary>
            Returns a copy of this <see cref="T:C1.WPF.FlexReport.ReportInfo" /> object.
            </summary>
      <returns>A copy of this <see cref="T:C1.WPF.FlexReport.ReportInfo" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportInfo.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:C1.WPF.FlexReport.ReportInfo" /> object.
            </summary>
      <returns>Returns a string that represents the current <see cref="T:C1.WPF.FlexReport.ReportInfo" /> object.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportInfo.Author">
      <summary>
            Gets or sets the name of the person that created the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportInfo.Title">
      <summary>
            Gets or sets the title of the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportInfo.Subject">
      <summary>
            Gets or sets the subject of the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportInfo.Keywords">
      <summary>
            Gets or sets keywords associated with the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportInfo.Creator">
      <summary>
            Gets or sets the name of the application that created the report.
            </summary>
    </member>
    <member name="E:C1.WPF.FlexReport.ReportInfo.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportObject">
      <summary>
            Represents a named object, this is base class for <see cref="T:C1.WPF.FlexReport.FieldBase" />, <see cref="T:C1.WPF.FlexReport.Section" />,
            <see cref="T:C1.WPF.FlexReport.SubSection" /> and another report's objects.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObject.CreateSame">
      <summary>
            Creates instance of the same type as current object.
            </summary>
      <returns>The created object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObject.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
      <param name="assignName">Indicates whether the name of the object should be copied.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportObject.Name">
      <summary>
            Gets or sets the name of the object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportObject.Tag">
      <summary>
            Gets or sets arbitrary data associated with the object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportObject.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object containing this object.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.Section">
      <summary>
            Represents a report band.
            </summary>
      <remarks>
        <para>
            Each <see cref="T:C1.WPF.FlexReport.Section" /> object contains a collection of <see cref="T:C1.WPF.FlexReport.SubSection" /> objects.
            </para>
        <para>Every report contains the following sections:</para>
        <para>A <b>detail</b> section.</para>
        <para>A <b>report header</b> and a <b>report footer</b> section.</para>
        <para>A <b>page header</b> and a <b>page footer</b> section.</para>
        <para>A <b>group header</b> and a <b>group footer</b> section for each <see cref="T:C1.WPF.FlexReport.Group" /> object in the report.</para>
        <para>The total number of sections in a report is therefore <code>5 + 2 * Groups.Count</code>. Sections cannot
            be added and removed from reports directly. The number of sections is a function of the number of groups.</para>
        <para>Although sections cannot be removed, they can be hidden by setting their <see cref="P:C1.WPF.FlexReport.Section.Visible" /> property
            to false.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.FlexReport.Section.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.Section" /> to the current object.
            This method copies list of subsections but does not copy list of fields.
            This method does NOT copy type of the section.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignName">Indicates whether the name should be copied.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object that contains this <see cref="T:C1.WPF.FlexReport.Section" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.Name">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.FlexReport.Section" /> name.
            </summary>
      <remarks>
        <para>The section name can be used as an index into the control's <see cref="P:C1.WPF.FlexReport.C1FlexReport.Sections" /> collection.</para>
        <para>Section names are also used to identify fields in <b>VBScript</b> expressions.</para>
        <para>Duplicate and empty section names are allowed, but should be avoided if you plan to use the section names 
            in scripts or as indexers.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.Type">
      <summary>
            Returns the <see cref="T:C1.WPF.FlexReport.Section" /> type (e.g., PageHeader, Detail).
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.SectionTypeEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Section.Fields">
      <summary>
            Gets a collection of all fields in this <see cref="T:C1.WPF.FlexReport.Section" />.
            </summary>
      <remarks>
        <para>The <b>Fields</b> collection contains all <see cref="T:C1.WPF.FlexReport.Field" /> objects defined in the current section.</para>
        <para>When you add a field to a section's <b>Fields</b> collection, the field is automatically assigned to the 
            section that owns the collection. For example, the code below adds a field to the <b>Detail</b> section:</para>
        <code>
            _c1r.Sections.Detail.Fields.Add("new field", "CompanyLogo", rc);
            </code>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.SubSections">
      <summary>
            Gets the collection of sub-sections in the current section.
            This collection contains at least one element.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.Visible">
      <summary>
            Specifies whether the <see cref="T:C1.WPF.FlexReport.Section" /> will be rendered in the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.Height">
      <summary>
            Gets the height of the current section in twips.
            This is the sum of the heights of all sub-sections of the current section.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.AutoHeight">
      <summary>
            Gets or sets a value determining how the height of the section changes depending on its content.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.CanGrow">
      <summary>
            Gets or sets a value indicating whether the section's height is automatically increased to fit its content.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.CanShrink">
      <summary>
            Gets or sets a value indicating whether the section's height should be reduced when one or more fields shrink.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.KeepTogether">
      <summary>
            Specifies whether the <see cref="T:C1.WPF.FlexReport.Section" /> should be kept together on a page.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.WPF.FlexReport.Group" /> and <see cref="T:C1.WPF.FlexReport.Field" /> objects also have <b>KeepTogether</b> properties.</para>
        <para>The <see cref="T:C1.WPF.FlexReport.Group" /> object's <see cref="P:C1.WPF.FlexReport.Group.KeepTogether" /> property works across sections. 
            It determines whether group headers should be kept together with their first detail section or whether entire 
            groups should be kept together on a page.</para>
        <para>The <see cref="T:C1.WPF.FlexReport.Field" /> object's <see cref="!:Field.KeepTogether" /> property determines whether the
            field should be rendered on a single page or whether it is allowed to be split across page breaks.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.SplitBehavior">
      <summary>
            Gets or sets a value determining how the section behaves
            when it is too high to fit in the vertical space available on the current page.
            </summary>
      <seealso cref="!:SplitHorzBehavior" />
    </member>
    <member name="P:C1.WPF.FlexReport.Section.ForcePageBreak">
      <summary>
            Gets or sets a value determining whether page breaks should be inserted before and/or after the section.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Section.Repeat">
      <summary>
            For group header, group footer and report footer sections only,
            gets or sets a value indicating whether the current section should be repeated
            at the top or bottom of each page. The default is <b>false</b>.
            </summary>
      <remarks>
        <para>This property only applies to group header and group footer sections.</para>
        <para>Set this value to true to repeat the group header page at the top of every page, before the detail sections.</para>
        <para>If you have multiple groups, all group header sections that have the <b>Repeat</b> property set to true will 
            be rendered at the top of each page.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.PrintAtPageBottom">
      <summary>
            For master report's footer sections only, gets or sets a value
            indicating whether the current section should print at the bottom
            of the page immediately above the page footer, rather than right
            below the detail. The default is <b>false</b>.
            <para>
            This property is ignored for non-footer sections or for footers
            of sub-reports.
            </para></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.UseColumnLayout">
      <summary>
            For master report's group and detail sections only, gets or sets a value
            indicating whether the current section should use column layout defined
            by <see cref="P:C1.WPF.FlexReport.Layout.Columns" /> and <see cref="P:C1.WPF.FlexReport.Layout.ColumnLayout" /> properties.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.OnFormat">
      <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.WPF.FlexReport.Section" /> is formatted.
            </summary>
      <remarks>
        <para>This property contains <b>VBScript</b> instructions to be executed before the fields in the section 
            are calculated. When this script is executed, the recordset already holds the data that will be displayed 
            in the section, but the field values have not been updated yet.</para>
        <para>Use this event to assign values to fields before they are calculated, so the new values will be taken 
            into account when the control calculates the field's size and position when the <see cref="P:C1.WPF.FlexReport.Section.CanGrow" /> or 
            <see cref="P:C1.WPF.FlexReport.Section.CanShrink" /> properties are set to true.</para>
        <para>If you want to set field properties based on the field's current value, use the <see cref="P:C1.WPF.FlexReport.Section.OnPrint" /> 
            property instead.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.OnPrint">
      <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.WPF.FlexReport.Section" /> is printed 
            (after it is formatted).
            </summary>
      <remarks>
            This property contains <b>VBScript</b> instructions that get executed after the fields in the section 
            have been calculated.
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.Calculated">
      <summary>
            Gets a value indicating whether the current section has already been calculated and its
            <see cref="P:C1.WPF.FlexReport.Section.RenderHeight" /> property contains a valid value.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Section.RenderHeight">
      <summary>
            Gets the actual height of the current section.
            This is the sum of the heights of all its sub-sections.
            This property can only be used while the report is being rendered, otherwise it returns -1.
            <para>
            Note that if this property is used in the section's OnFormat script, then it returns
            the height calculated for the previous instance of the section, or -1 if this is the first calculation.
            </para></summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportHyperlink">
      <summary>
            Represents a hyperlink in a report.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportHyperlink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportHyperlink" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportHyperlink.AssignFrom(C1.WPF.FlexReport.ReportHyperlink)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportHyperlink.StatusText">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the text shown in the status line when the mouse is over the hyperlink
            (when the document is viewed in a <b>C1FlexViewer</b>).
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportHyperlink.LinkTarget">
      <summary>
            Gets or sets the target of the current hyperlink.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportLinkTargetBase">
      <summary>
            Describes the target of a <see cref="T:C1.WPF.FlexReport.ReportHyperlink" />.
            This is an abstract base class for the following derived classes:
            <see cref="T:C1.WPF.FlexReport.ReportLinkTargetBookmark" />, <see cref="T:C1.WPF.FlexReport.ReportLinkTargetUrl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLinkTargetBase.AssignFrom(C1.WPF.FlexReport.ReportLinkTargetBase)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportLinkTargetBookmark">
      <summary>
            Describes a <see cref="T:C1.WPF.FlexReport.ReportLinkTargetBase" /> pointing to a
            some position within a report or another report.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLinkTargetBookmark.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportLinkTargetBookmark" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLinkTargetBookmark.Report">
      <summary>
            Gets or sets a reference to <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object which should be opened.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLinkTargetBookmark.Bookmark">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the bookmark in the current report.
            (To associate a bookmark with an object, use the object's Bookmark property.)
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLinkTargetBookmark.ParameterValues">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.ReportParameterValues" /> collection 
            containing the list of named values that will be assigned to the parameters of the report.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportLinkTargetUrl">
      <summary>
            Describes a <see cref="T:C1.WPF.FlexReport.ReportLinkTargetBase" /> pointing to an external document, file or URL.
            The hyperlink jump is performed using the <b>ShellExecute</b> OS shell API, so the result
            depends on the operating system and installed programs.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLinkTargetUrl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportLinkTargetUrl" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLinkTargetUrl.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportLinkTargetUrl" /> class.
            </summary>
      <param name="target">The value of <see cref="P:C1.WPF.FlexReport.ReportLinkTargetUrl.Url" /> property.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLinkTargetUrl.Url">
      <summary>
            Gets or sets the file or URL which will be opened using <b>ShellExecute</b>.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportLinkTargetScript">
      <summary>
            Describes a <see cref="T:C1.WPF.FlexReport.ReportLinkTargetBase" /> that executes a script.
            <para>When the hyperlink is clicked in a viewer, the specified script is executed and then the report is re-generated.</para><para>The script is executed when the data source is not yet open, so fields' values are unavailable.</para><para>This script can be used to change the report parameters' values, properties of the report's fields, sections and so on.</para></summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLinkTargetScript.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportLinkTargetScript" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLinkTargetScript.OnNavigate">
      <summary>
            Gets or sets the script which will be executed.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportObjectCollection`1">
      <summary>
            Represents the collection of the <see cref="T:C1.WPF.FlexReport.ReportObject" /> objects.
            </summary>
      <typeparam name="TItem">The type of elements in the collection.</typeparam>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObjectCollection`1.Contains(`0)">
      <summary>
            Determines whether the collection contains a specific item.
            </summary>
      <param name="item">The item to check.</param>
      <returns>True if the collection contains specified item; false otherwise.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObjectCollection`1.Contains(System.String)">
      <summary>
            Determines whether the collection contains an item with specified name.
            </summary>
      <param name="name">The name of the item.</param>
      <returns>True if the collection contains an item with the specified name;
             otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObjectCollection`1.IndexByName(System.String)">
      <summary>
            Gets the index of the element by its name.
            </summary>
      <param name="name">The name of element.</param>
      <returns>The zero-based index of element with specified name or -1 if name not specified.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObjectCollection`1.FindByName(System.String)">
      <summary>
            Gets the item by its name, returns null if not found.
            </summary>
      <param name="name">The name of the item.</param>
      <returns>Returns the item with specified name, null otherwise.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObjectCollection`1.IndexOf(`0)">
      <summary>
            Gets the index of the element.
            </summary>
      <param name="item">The element.</param>
      <returns>The zero-based index of element or -1 if element does not exist in the collection.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportObjectCollection`1.Move(System.Int32,System.Int32)">
      <summary>
            Moves the item with the specified <paramref name="index" /> to a new new position specified by <paramref name="newIndex" />.
            </summary>
      <param name="index">The current index.</param>
      <param name="newIndex">The new index.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportObjectCollection`1.Item(System.Int32)">
      <summary>
            Gets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at specified index.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportObjectCollection`1.Item(System.String)">
      <summary>
            Gets the element with specified name.
            </summary>
      <param name="name">The name of the element to get.</param>
      <returns>The element with specified name.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportObjectCollection`1.Count">
      <summary>
            Gets the number of elements in the collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportObjectCollection`1.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:C1.WPF.FlexReport.ReportObjectList`1" -->
    <member name="T:C1.WPF.FlexReport.StrongNamedReportObject">
      <summary>
            Represents a strong named object, this is base class for <see cref="T:C1.WPF.FlexReport.DataSource" />, <see cref="T:C1.WPF.FlexReport.ReportParameter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportObjectNamedList`1">
      <summary>
            Represents the list of strong named report objects.
            </summary>
      <typeparam name="TItem">The type of elements in the collection.</typeparam>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportLabeledValue">
      <summary>
            Represents a value with an associated label.
            Both label and value can be specified as constants or as expressions.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLabeledValue.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportLabeledValue" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLabeledValue.#ctor(System.Object,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportLabeledValue" /> class.
            </summary>
      <param name="value">The constant value of <see cref="T:C1.WPF.FlexReport.ReportLabeledValue" />.</param>
      <param name="label">The constant label of <see cref="T:C1.WPF.FlexReport.ReportLabeledValue" />.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportLabeledValue.AssignFrom(C1.WPF.FlexReport.ReportLabeledValue)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.ReportLabeledValue" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLabeledValue.Owner">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.ReportLabeledValues" /> collection containing this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLabeledValue.Parameter">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.ReportParameter" /> object owning this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLabeledValue.ParentReport">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLabeledValue.Value">
      <summary>
            Gets or sets the value.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLabeledValue.Label">
      <summary>
            Gets or sets the label of value.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportLabeledValues">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.ReportLabeledValue" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLabeledValues.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.AllowedValuesDefinition" /> object owning this collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportLabeledValues.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.BoundLabeledValues">
      <summary>
            Represents the dynamic list of the labeled values, the count of values is defined by the count of records in the linked 
            <see cref="P:C1.WPF.FlexReport.BoundLabeledValues.DataSource" />, <see cref="P:C1.WPF.FlexReport.BoundLabeledValues.ValueExpression" /> used to calculated actual value, <see cref="P:C1.WPF.FlexReport.BoundLabeledValues.LabelExpression" />
            used to calculated a label of value.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.BoundLabeledValues.AssignFrom(C1.WPF.FlexReport.BoundLabeledValues)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.BoundLabeledValues" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.BoundLabeledValues.Owner">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.AllowedValuesDefinition" /> object owning this <see cref="T:C1.WPF.FlexReport.BoundLabeledValues" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BoundLabeledValues.Parameter">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.ReportParameter" /> object owning this <see cref="T:C1.WPF.FlexReport.BoundLabeledValues" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BoundLabeledValues.ParentReport">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> owning this <see cref="T:C1.WPF.FlexReport.BoundLabeledValues" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BoundLabeledValues.DataSource">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.BoundLabeledValues.DataSource" /> used to build list of values.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BoundLabeledValues.DataSourceName">
      <summary>
            Gets or sets the name of the <see cref="P:C1.WPF.FlexReport.BoundLabeledValues.DataSource" /> used to build list of values.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BoundLabeledValues.ValueExpression">
      <summary>
            Gets the expression used to calculate a value.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.BoundLabeledValues.LabelExpression">
      <summary>
            Gets the expression used to calculate label of the value.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.AllowedValuesDefinition">
      <summary>
            Represents a collection of allowed values for a <see cref="T:C1.WPF.FlexReport.ReportParameter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.AllowedValuesDefinition.AssignFrom(C1.WPF.FlexReport.AllowedValuesDefinition)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.AllowedValuesDefinition" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.AllowedValuesDefinition.Owner">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.ReportParameter" /> object owning this object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.AllowedValuesDefinition.Empty">
      <summary>
            Gets a value indicating whether this <see cref="T:C1.WPF.FlexReport.AllowedValuesDefinition" /> is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.AllowedValuesDefinition.Binding">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.BoundLabeledValues" /> defining the list of allowed values for report parameter
            on the base of data source binding, this property is ignored if <see cref="P:C1.WPF.FlexReport.AllowedValuesDefinition.Values" /> collection
            is not empty.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.AllowedValuesDefinition.Values">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.ReportLabeledValues" /> collection defining list of allowed values for report parameter,
            if this collection contains the items then <see cref="P:C1.WPF.FlexReport.AllowedValuesDefinition.Binding" /> property is ignored.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportParameter">
      <summary>
            Represents a parameter in a <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.ReportParameter" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ReportParameter.AssignFrom(System.Object)">
      <summary>
            Assigns (copies) properties from another object to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameter.ParentReport">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this parameter.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameter.AllowedValuesDefinition">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.ReportParameter.AllowedValuesDefinition" /> defining the list of allowed values for this parameter.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportParameter.DisplayText">
      <summary>
            Gets the display text corresponding to a parameter value.
            This property has a meaningful value only during the report rendering.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportParameterCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.FlexReport.ReportParameter" /> objects.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:C1.WPF.FlexReport.ScriptEngine.ScriptEngine.EvaluateTags" -->
    <member name="T:C1.WPF.FlexReport.ScriptValue`1">
      <summary>
            The abstract base class for types such as <see cref="T:C1.WPF.FlexReport.ScriptStringValue" />,
            <see cref="T:C1.WPF.FlexReport.ScriptObjectValue" /> and others that allow to specify a value
            either as a literal or as an expression.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ScriptValue`1.AssignFrom(C1.WPF.FlexReport.ScriptValue{`0})">
      <summary>
            Assigns (copies) properties from another <see cref="!:ScriptValue" /> to the current object.
            </summary>
      <param name="source">The source object to copy properties from.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.ScriptValue`1.IsExpression">
      <summary>
            Gets or sets a value indicating whether the current <see cref="!:ScriptValue" />
            is specified as an expression.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ScriptValue`1.Expression">
      <summary>
            Gets or sets an expression used to calculate value of this <see cref="!:ScriptValue" />.
            Setting this value forces <see cref="P:C1.WPF.FlexReport.ScriptValue`1.IsExpression" /> to true.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.ScriptValue`1.Value">
      <summary>
            Gets or sets a value of this <see cref="!:ScriptValue" />.
            Settings this value forces <see cref="P:C1.WPF.FlexReport.ScriptValue`1.IsExpression" /> to false.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:C1.WPF.FlexReport.ScriptValue`1.ValueAsString" -->
    <member name="M:C1.WPF.FlexReport.ScriptValue`1.op_Implicit(C1.WPF.FlexReport.ScriptValue{`0})~System.String">
      <summary>
            Converts the <see cref="!:ScriptValue" />object to a string.
            </summary>
      <param name="value">The object to convert.</param>
      <returns>The string representing the object.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.ScriptStringValue">
      <summary>
            Represents a string that can be specified as a constant or as an expression.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ScriptStringValue.op_Implicit(System.String)~C1.WPF.FlexReport.ScriptStringValue">
      <summary>
            Converts a string to a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" />.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The ScriptStringValue object.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.ScriptObjectValue">
      <summary>
            Represents an object value that can be specified as a constant or as an expression.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ScriptObjectValue.op_Implicit(System.String)~C1.WPF.FlexReport.ScriptObjectValue">
      <summary>
            Converts a string to a <see cref="T:C1.WPF.FlexReport.ScriptObjectValue" />.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>The ScriptObjectValue object.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.ScriptEnumValue`1">
      <summary>
            Represents an enum value that can be specified as a constant or as an expression.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:C1.WPF.FlexReport.ScriptEnumValue`1.op_Implicit(System.String)~C1.WPF.FlexReport.ScriptEnumValue{`0}" -->
    <!-- Badly formed XML comment ignored for member "M:C1.WPF.FlexReport.ScriptEnumValue`1.op_Implicit(`0)~C1.WPF.FlexReport.ScriptEnumValue{`0}" -->
    <member name="T:C1.WPF.FlexReport.SectionTypeEnum">
      <summary>
            Specifies the section type, which is equivalent to a the index of a <see cref="T:C1.WPF.FlexReport.Section" /> object
            in the control's <see cref="P:C1.WPF.FlexReport.C1FlexReport.Sections" /> collection. 
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="!:Field.Section" /> and 
            <see cref="P:C1.WPF.FlexReport.Section.Type" /> properties.
            </remarks>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.Undefined">
      <summary>
            Undefined. This setting indicates the field doesn't belong to any sections and should not be rendered.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.Detail">
      <summary>
            Detail section: repeated for every record in the main data source.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.Header">
      <summary>
            Report header section: appears once, in the beginning of the report.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.Footer">
      <summary>
            Report footer section: appears once, in the end of the report.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.PageHeader">
      <summary>
            Page header section: appears at the top of every page, subject to the setting of the 
            <see cref="P:C1.WPF.FlexReport.Layout.PageHeader" /> property.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.PageFooter">
      <summary>
            Page footer section: appears at the bottom of every page, subject to the setting of the 
            <see cref="P:C1.WPF.FlexReport.Layout.PageFooter" /> property.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupHeader1">
      <summary>
            Group header section: appears before level-one groups.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupFooter1">
      <summary>
            Group footer section: appears after level-one groups.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupHeader2">
      <summary>
            Group header section: appears before level-two groups.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupFooter2">
      <summary>
            Group footer section: appears after level-two groups.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupHeader3">
      <summary>
            Group header section: appears before level-three groups.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupFooter3">
      <summary>
            Group footer section: appears after level-three groups.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupHeader4">
      <summary>
            Group header section: appears before level-four groups.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.SectionTypeEnum.GroupFooter4">
      <summary>
            Group footer section: appears after level-four groups.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.SectionCollection">
      <summary>
            Collection of the <see cref="T:C1.WPF.FlexReport.Section" /> objects. 
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.SectionCollection.FindSection(C1.WPF.FlexReport.SectionTypeEnum)">
      <summary>
            Gets a section from a <see cref="P:C1.WPF.FlexReport.C1FlexReport.Sections" /> collection by its <see cref="P:C1.WPF.FlexReport.Section.Type" />.
            Returns null if section not found.
            </summary>
      <param name="sectionType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.FlexReport.SectionCollection.Item(C1.WPF.FlexReport.SectionTypeEnum)">
      <summary>
            Gets a section from a <see cref="P:C1.WPF.FlexReport.C1FlexReport.Sections" /> collection by its <see cref="P:C1.WPF.FlexReport.Section.Type" />.
            Throws an exception if section with specified <see cref="P:C1.WPF.FlexReport.Section.Type" /> not found.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SectionCollection.Detail">
      <summary>
            Returns a reference to the detail section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Detail].
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.SectionCollection.Header">
      <summary>
            Returns a reference to the report header section. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Header]
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.SectionCollection.Footer">
      <summary>
            Returns a reference to the report footer section. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Footer].
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.SectionCollection.PageHeader">
      <summary>
            Returns a reference to the page header section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.PageHeader].
            </remarks>
    </member>
    <member name="P:C1.WPF.FlexReport.SectionCollection.PageFooter">
      <summary>
            Returns a reference to the page footer section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.PageFooter].
            </remarks>
    </member>
    <member name="T:C1.WPF.FlexReport.SubSection">
      <summary>
            Represents a band within a <see cref="T:C1.WPF.FlexReport.Section" />.
            Each <see cref="T:C1.WPF.FlexReport.Section" /> contains at least one SubSection.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.SubSection.AssignFrom(C1.WPF.FlexReport.ReportObject,System.Boolean)">
      <summary>
            Assigns (copies) properties from another <see cref="T:C1.WPF.FlexReport.SubSection" /> to the current object.
            This method does not copy fields belongs to source SubSection.
            </summary>
      <param name="source">The source object to copy properties from.</param>
      <param name="assignName">Indicates whether name should be assigned.</param>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.SplitBehavior">
      <summary>
            Gets or sets a value determining how the sub-section behaves
            when it is too high to fit in the vertical space available on the current page.
            </summary>
      <seealso cref="!:SplitHorzBehavior" />
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.ForcePageBreak">
      <summary>
            Gets or sets a value determining whether page breaks should be inserted before and/or after the sub-section.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.Fields">
      <summary>
            Gets a collection of all fields in this <see cref="T:C1.WPF.FlexReport.SubSection" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.Index">
      <summary>
            Gets the index of the <see cref="T:C1.WPF.FlexReport.SubSection" /> in the containing <see cref="P:C1.WPF.FlexReport.Section.SubSections" /> collection.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.ParentSection">
      <summary>
            Gets a <see cref="T:C1.WPF.FlexReport.Section" /> object owning this <see cref="T:C1.WPF.FlexReport.SubSection" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.Height">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.FlexReport.SubSection" /> height, in twips.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.Visible">
      <summary>
            Specifies whether the <see cref="T:C1.WPF.FlexReport.SubSection" /> will be rendered in the report.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.AutoHeight">
      <summary>
            Gets or sets a value determining how the height of the sub-section changes depending on its content.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.PrintAtPageBottom">
      <summary>
            For master report's sub-sections only, gets or sets a value
            indicating whether the current sub section should print at the bottom
            of the page immediately above the page footer, rather than right
            below the detail. The default is <b>false</b>.
            <para>
            This property is ignored for non-footer sections or for footers
            of sub-reports.
            </para></summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.Calculated">
      <summary>
            Gets a value indicating whether the current sub-section has already been calculated and its
            <see cref="P:C1.WPF.FlexReport.SubSection.RenderHeight" /> property contains a valid value.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.SubSection.RenderHeight">
      <summary>
            Returns the height of the sub-section after the <see cref="P:C1.WPF.FlexReport.SubSection.AutoHeight" />
            property has been applied to the section.
            Getting this property can throw an exception if the height of sections was not calculated yet,
            for example if you access the RenderHeight of the report footer while the report header is being rendered.
            </summary>
      <remarks>
        <para>When a sub-section grows or shrinks, its <see cref="P:C1.WPF.FlexReport.SubSection.Height" /> property does not change.</para>
        <para>If you need to retrieve the actual height that will be used to rendering the sub-section 
            (for example in the <see cref="!:OnPrint" /> event), use the <see cref="P:C1.WPF.FlexReport.SubSection.RenderHeight" /> 
            property instead.</para>
      </remarks>
    </member>
    <member name="T:C1.WPF.FlexReport.SubSectionCollection">
      <summary>
            Represents collection of the <see cref="T:C1.WPF.FlexReport.SubSection" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.SubSectionCollection.Add">
      <summary>
            Adds a <see cref="T:C1.WPF.FlexReport.SubSection" /> object to the collection.
            </summary>
      <returns>Returns added <see cref="T:C1.WPF.FlexReport.SubSection" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.SubSectionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes item with specified index from the collection.
            </summary>
      <param name="index">The index of item to remove.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.SubSectionCollection.Remove(C1.WPF.FlexReport.SubSection)">
      <summary>
            Removes a <see cref="T:C1.WPF.FlexReport.SubSection" /> object from collection.
            </summary>
      <param name="item">The <see cref="T:C1.WPF.FlexReport.SubSection" /> object to remove.</param>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportNamedCollection`1">
      <summary>
            Represents a <see cref="T:C1.WPF.Document.NamedCollection`1" /> that notifies <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> about changes.
            </summary>
      <typeparam name="TItem">The type of the collection items.</typeparam>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportNamedCollection`1.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.ReportOwnedCollection`1">
      <summary>
            Represents a <see cref="T:C1.WPF.Document.OwnedCollection`1" /> that notifies <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> about changes.
            </summary>
      <typeparam name="TItem">The type of the collection items.</typeparam>
    </member>
    <member name="P:C1.WPF.FlexReport.ReportOwnedCollection`1.Report">
      <summary>
            Gets the <see cref="T:C1.WPF.FlexReport.C1FlexReport" /> object owning this collection.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.DbUtils">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FontHolder">
      <summary>
            Represents platform independent Font object.
            Under WinForms encapsulates a <see cref="P:C1.WPF.FlexReport.FontHolder.Font" /> object and provides get/set access to the font properties. 
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FontHolder.OnPropertyChanged(System.String)">
      <summary>
            Fires <see cref="E:C1.WPF.FlexReport.FontHolder.PropertyChanged" /> event.
            </summary>
      <param name="propertyName">the name of the property that changed.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.FontHolder.Clone">
      <summary>
            Creates a clone of this <see cref="T:C1.WPF.FlexReport.FontHolder" /> object.
            </summary>
      <returns>The clone of this object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FontHolder.ToString">
      <summary>
            Gets a string that represents this <see cref="T:C1.WPF.FlexReport.FontHolder" />.
            </summary>
      <returns>A string that represents this <see cref="T:C1.WPF.FlexReport.FontHolder" />.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.FontHolder.Name">
      <summary>
            Gets or sets the name of the font.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FontHolder.Size">
      <summary>
            Gets or sets the size of the font.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FontHolder.Bold">
      <summary>
            Gets or sets a value that indicates whether the font is bold.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FontHolder.Italic">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.WPF.FlexReport.FontHolder.Font" /> is italic.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FontHolder.Underline">
      <summary>
            Gets or sets a value that indicates whether the font is underlined.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FontHolder.Strikethrough">
      <summary>
            Gets or sets a value that indicates whether the font has a horizontal line through the text.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.FontHolder.GdiCharSet">
      <summary>
            Gets or sets the GDI character set used by the font.
            </summary>
    </member>
    <member name="E:C1.WPF.FlexReport.FontHolder.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.PictureHolderType">
      <summary>
            For internal use.
            Defines possible values of the <see cref="P:C1.WPF.FlexReport.PictureHolder.Type" /> property.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.PictureHolder">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.PictureHolder.ToString">
      <summary>
            Gets a string that represents this <see cref="T:C1.WPF.FlexReport.PictureHolder" />.
            </summary>
      <returns>A string that represents this <see cref="T:C1.WPF.FlexReport.PictureHolder" />.</returns>
    </member>
    <member name="P:C1.WPF.FlexReport.PictureHolder.Image">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.PictureHolder.Image" /> loaded by this <see cref="T:C1.WPF.FlexReport.PictureHolder" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.PictureHolder.FromObject(System.Object,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.WPF.FlexReport.PictureHolder" /> from a specified object.
            Object can be:
            <list type="bullet"><item><term>Null value</term><description>An empty PictureHolder will be created.</description></item><item><term>String</term><description>
            String represents an expression, a file or an url.
            </description></item><item><term><see cref="T:System.Drawing.Image" /> object.</term></item><item><term><see cref="T:C1.WPF.FlexReport.PictureHolder" /> object.</term></item><item><term>Byte array.</term><description>Array containing the image data.</description></item></list></summary>
      <remarks>
            The following rules are used when the object is a string:
            <para>
            If the string starts with "=" or "[", it is interpretted as an expression,
            and the actual image will be resolved when the report executes.
            </para><para>
            String is interpretted as a file name. The file name can be relative or absolute.
            If it is relative, then the following base paths are tried in order:
            <paramref name="basePath" />, <see cref="P:C1.WPF.FlexReport.C1FlexReport.DefaultBasePath" />,
            <see cref="P:System.Environment.CurrentDirectory" />.
            </para><para>
            String is interpretted as a URL. The URL can be relative or absolute.
            If it is relative, then the following base paths are tried in order:
            <paramref name="basePath" />, <see cref="P:C1.WPF.FlexReport.C1FlexReport.DefaultBasePath" /> and 
            <see cref="P:System.Environment.CurrentDirectory" />.
            </para></remarks>
      <param name="value">The value providing data for the new <see cref="T:C1.WPF.FlexReport.PictureHolder" /> object.</param>
      <param name="basePath">The base path for resolving a relative file name.</param>
      <returns>The new instance of the PictureHolder type.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.PictureHolder.FromExpression(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.WPF.FlexReport.PictureHolder" /> based on script expression.
            </summary>
      <param name="expression">The string with script expression.</param>
      <returns>
        <see cref="T:C1.WPF.FlexReport.PictureHolder" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.PictureHolder.FromFile(System.String,System.String)">
      <returns>
        <see cref="T:C1.WPF.FlexReport.PictureHolder" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.PictureHolder.FromUrl(System.String,System.String)">
      <returns>
        <see cref="T:C1.WPF.FlexReport.PictureHolder" /> object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.PictureHolder.op_Implicit(C1.WPF.FlexReport.PictureHolder)~C1.WPF.Document.C1ImageHelper">
      <summary>
            Converts a <see cref="T:C1.WPF.FlexReport.PictureHolder" /> object into an <see cref="P:C1.WPF.FlexReport.PictureHolder.Image" /> object.
            </summary>
      <param name="picHolder">The <see cref="T:C1.WPF.FlexReport.PictureHolder" /> object.</param>
      <returns>An <see cref="P:C1.WPF.FlexReport.PictureHolder.Image" /> object.</returns>
    </member>
    <member name="T:C1.WPF.FlexReport.ResourceNameParser">
      <summary>
            For internal use.
            Helper class allowing to work with resources specified by a file name or a URL.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.ResourceNameParser.Open(System.String,System.String)">
      <summary>
            For internal use.
            Tries to parse specified <paramref name="location" /> string as file name or URL
            and opens its stream.
            <paramref name="location" /> can be relative or absolute, if it is relative then
            absolute path calculated with using base paths in following order:
            -) <paramref name="basePath" />
            -) <see cref="P:C1.WPF.FlexReport.C1FlexReport.DefaultBasePath" />
            -) <see cref="!:Enviroment.CurrentDirectory" />
            Returned <see cref="T:C1.WPF.FlexReport.ResourceNameParser" /> object should be disposed after using,
            result can be null if location can not be parsed.
            </summary>
      <param name="location">
      </param>
      <param name="basePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.FlexReport.ResourceNameParser.Stream">
      <summary>
            Gets the <see cref="P:C1.WPF.FlexReport.ResourceNameParser.Stream" /> object containing resource's data.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.FileNameParser">
      <summary>
            For internal use.
            Helper class used to parse a string as a file name, the file name can be relative or absolute.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.FileNameParser.ReplaceSpecialFolderTags(System.String,System.String)">
      <summary>
            For internal use.
            Replaces special tags in passed string, tags should be specified as:
            ?(specialfolder.SpecialFolderEnumMember), for example
            input:
            ?(specialfolder.MyDocuments)\myfile.bmp
            will be conerted to:
            c:\Users\UserName\Documents\myfile.bmp
            </summary>
      <param name="input">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.FileNameParser.Open(System.String,System.String,System.Boolean)">
      <summary>
            For internal use.
            Tries to interprett <paramref name="location" /> as file name relative or absolute,
            relative file names are resolved same as in <see cref="M:C1.WPF.FlexReport.ResourceNameParser.Open(System.String,System.String)" /> method.
            </summary>
      <param name="fileName">
      </param>
      <param name="path">
      </param>
      <param name="openStream">Indicates whether the file specified by <paramref name="location" /> should be opened, true by default.</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.FlexReport.UrlParser">
      <summary>
            For internal use.
            Helper class used to parse a string as a URL, the file name can be relative or absolute.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.UrlParser.Open(System.String,System.String)">
      <summary>
            For internal use.
            Tries to interprett <paramref name="location" /> as URL relative or absolute,
            relative URLs are resolved same as in <see cref="M:C1.WPF.FlexReport.ResourceNameParser.Open(System.String,System.String)" /> method.
            </summary>
      <param name="location">
      </param>
      <param name="basePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.FlexReport.StringParser">
      <summary>
            For internal use.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.StringParser.ContainsIdent(System.String,System.String)">
      <summary>
            Checks whether specified ident exists in the string.
            Method uses <see cref="F:C1.WPF.FlexReport.StringParser.Params.DefaultIgnoreCase" />.
            </summary>
      <param name="s">String to check.</param>
      <param name="ident">Ident to check.</param>
      <returns>Returns <b>true</b> if ident used, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.StringParser.IndexOfIndent(System.String,System.String,C1.WPF.FlexReport.StringParser.Params)">
      <summary>
            Returns index of identifier in the string.
            Identifier can be in quotes and should start with '_' or letter and should
            contains only '_', letters, numbers.
            </summary>
      <param name="s">
      </param>
      <param name="ident">
      </param>
      <param name="prms">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.StringParser.ReplaceIdent(System.String,System.String,System.String,C1.WPF.FlexReport.StringParser.Params)">
      <summary>
            Replaces identifier with specified string. 
            All text within quotes is ignored, chars which defines quotes specified in the prms.Quotes array,
            set it to null if you want replace identifier even if it is within quotes.
            </summary>
      <param name="s">
      </param>
      <param name="ident">
      </param>
      <param name="newStr">
      </param>
      <param name="prms">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.StringParser.Bracket(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.StringParser.IsBracket(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.StringParser.Unbracket(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.FlexReport.StringParser.BracketSqlObject(System.String)">
      <summary>
            For internal use.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.FlexReport.VisualReportObject">
      <summary>
            Base class for all visual report objects like <see cref="T:C1.WPF.FlexReport.FieldBase" />, <see cref="T:C1.WPF.FlexReport.Section" />, <see cref="T:C1.WPF.FlexReport.SubSection" />.
            Defines common visual properties: Border, Background etc.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.VisualReportObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.FlexReport.VisualReportObject" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.Border">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.FlexReport.VisualReportObject.Border" /> object determining how borders are drawn around the object.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.BordersSplitVertMode">
      <summary>
            Gets or sets a value determining how borders are drawn
            if the object is too high and is split between pages.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.BordersSplitHorzMode">
      <summary>
            Gets or sets a value determining how borders are drawn
            if the object is too wide and is split between horizontal pages.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.Background">
      <summary>
            Gets or sets the <see cref="!:C1BackgroundBase" /> object determining the object's background.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.BackColor">
      <summary>
            Gets or sets the field's background color,
            this property works via <see cref="P:C1.WPF.FlexReport.VisualReportObject.Background" /> property using <see cref="!:C1SolidBrush" />.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.OutlineLabel">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the label associated with the object in the outline tree.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.OutlineParent">
      <summary>
            Gets or sets the name of the object that will be the parent of the current object in the outline tree.
            If unspecified, the report hierarchy will be used to determine the parent.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.VisualReportObject.Bookmark">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.FlexReport.ScriptStringValue" /> yielding the bookmark associated with the current object.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.WatermarkVisibility">
      <summary>
            Specifies where watermark or overlay is displayed.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.WatermarkVisibility.Hidden">
      <summary>
            Do not show watermark or overlay.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.WatermarkVisibility.AllPages">
      <summary>
            Show watermark or overlay on all pages.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.WatermarkVisibility.FirstPage">
      <summary>
            Show watermark or overlay on first page only.
            </summary>
    </member>
    <member name="F:C1.WPF.FlexReport.WatermarkVisibility.AllButFirstPage">
      <summary>
            Show watermark or overlay on all pages but the first.
            </summary>
    </member>
    <member name="T:C1.WPF.FlexReport.Watermark">
      <summary>
            Represents a watermark or an overlay in a <see cref="T:C1.WPF.FlexReport.C1FlexReport" />.
            </summary>
    </member>
    <member name="M:C1.WPF.FlexReport.Watermark.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:C1.WPF.FlexReport.Watermark.AssignFrom(C1.WPF.FlexReport.Watermark)">
      <summary>
            Copies properties from another object into this object.
            </summary>
      <param name="source">The source object, properties of which are copied.</param>
    </member>
    <member name="M:C1.WPF.FlexReport.Watermark.Reset">
      <summary>
            Resets all properties of this Watermark object to default values.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.Visibility">
      <summary>
            Gets or sets a value indicating on which pages this watermark or overlay is visible.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.Picture">
      <summary>
            Gets or sets a picture shown by this watermark or overlay.
            Note that if the picture is not empty, <see cref="P:C1.WPF.FlexReport.Watermark.Text" /> is ignored.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.PictureAlign">
      <summary>
            Gets or sets the alignment of the <see cref="P:C1.WPF.FlexReport.Watermark.Picture" /> within a page.
            </summary>
      <seealso cref="P:C1.WPF.FlexReport.Watermark.Picture" />
      <seealso cref="P:C1.WPF.FlexReport.Watermark.PictureScale" />
      <seealso cref="T:C1.WPF.FlexReport.PictureAlignEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.PictureScale">
      <summary>
            Gets or sets a value indicating how <see cref="P:C1.WPF.FlexReport.Watermark.Picture" /> is scaled within the page.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.Text">
      <summary>
            Gets or sets a text shown by this watermark or overlay.
            Ignored if a <see cref="P:C1.WPF.FlexReport.Watermark.Picture" /> is specified.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.WritingMode">
      <summary>
            Gets or sets the text writing mode: horizontal (default), vertical with left to right flow, etc.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.Align">
      <summary>
            Gets or sets a value determining how text is aligned within a page.
            </summary>
      <seealso cref="T:C1.WPF.FlexReport.FieldAlignEnum" />
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.ForeColor">
      <summary>
            Gets or sets the text color.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.TextAngle">
      <summary>
            Gets or sets the text rotation angle, in degrees counterclockwise.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.WordWrap">
      <summary>
            Gets or sets a value indicating whether automatic word wrapping is on.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.Font">
      <summary>
            Gets or sets the text font.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.LineSpacing">
      <summary>
            Gets or sets the text line spacing, in percent.
            The default is 100 which corresponds to normal line spacing.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.TextFitMode">
      <summary>
            Gets or sets a value indicating how text fits in page bounds.
            If this is not None, WordWrap is ignored.
            </summary>
    </member>
    <member name="P:C1.WPF.FlexReport.Watermark.Opacity">
      <summary>
            Gets or sets the opacity of this watermark or overlay, from 0 (transparent) to 1 (opaque).
            This property works only for text watermaks or overlays.
            </summary>
    </member>
    <member name="T:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.Busy">
      <summary>
              Looks up a localized string similar to The component is busy rendering a report..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldEmptyCategoryGroupExpression">
      <summary>
              Looks up a localized string similar to The category group expression is not specified, at category group '{0}' (index: {1}), in Chart Group {2} of ChartField '{3}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldEmptySeriesDataValueExpression">
      <summary>
              Looks up a localized string similar to The series data value expression is not specified, at index {0} of series template '{1}' (index: {2}), in Chart Group {3} of ChartField '{4}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldEmptySeriesGroupExpression">
      <summary>
              Looks up a localized string similar to The series group expression is not specified, at series group '{0}' (index: {1}), in Chart Group {2} of ChartField '{3}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldEvaluateExpressionFailed">
      <summary>
              Looks up a localized string similar to Cannot evalute the expression '{0}' in ChartField '{1}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldExceptionAlarmZonesUniqueName">
      <summary>
              Looks up a localized string similar to Alarm zones must have unique names..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldExceptionItemNotBelong">
      <summary>
              Looks up a localized string similar to {0} is belonged to other collection..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldExceptionPositiveValues">
      <summary>
              Looks up a localized string similar to Array members must have positive values..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldGroupingFailed">
      <summary>
              Looks up a localized string similar to Cannot grouping the data for Chart Group {0} of ChartField '{1}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldLessSeriesDataValueLength">
      <summary>
              Looks up a localized string similar to The series template '{0}' (index: {1}) needs {2} data values, in Chart Group {3} of ChartField '{4}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ChartFieldNoSeriesValues">
      <summary>
              Looks up a localized string similar to No series values defined in Chart Group {0} of ChartField '{1}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceAdoNetProviderNotRegistered">
      <summary>
              Looks up a localized string similar to ADO.NET provider {0} not registered in the system..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceCanNotOpen">
      <summary>
               Looks up a localized string similar to Can not open the report data source [{0}].
            Exception:
            {1}.
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceCanNotUseMultiValueParameterInStoredProcedure">
      <summary>
              Looks up a localized string similar to Multi value parameter [{0}] can not be used with stored procedure..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceFieldAlreadyExists">
      <summary>
              Looks up a localized string similar to Calculated field [{0}] could not be added to a DataSource [{1}] because DataSource already has physical field with same name..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceGroupExpressionInvalid">
      <summary>
               Looks up a localized string similar to Group [{0}] has invalid grouping expression
            :[{1}]..
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceGroupFilterExpressionInvalid">
      <summary>
               Looks up a localized string similar to Group [{0}] has invalid filtering expression
            :[{1}]..
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceGroupingError">
      <summary>
               Looks up a localized string similar to Could not group data, possible one of grouping expression contains an errror, exception:
            {0}.
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceGroupSortExpressionInvalid">
      <summary>
               Looks up a localized string similar to Group [{0}] has invalid sorting expression
            :[{1}]..
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceInvalidCalculatedFieldExpression">
      <summary>
               Looks up a localized string similar to Expression
            {0}
             specified for calculated field [{1}] of [{2}] data source is invalid..
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceInvalidFilterExpression">
      <summary>
               Looks up a localized string similar to Filter expression
            {0}
             specified for [{1}] data source is invalid..
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceNotFound">
      <summary>
              Looks up a localized string similar to Can not find the report data source [{0}]..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceObjectCannotUsed">
      <summary>
              Looks up a localized string similar to Object '{0}' cannot be used as a report data source..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceSortExpressionInvalid">
      <summary>
               Looks up a localized string similar to Sort expression
            {0}
             specified for [{1}] data source is invalid..
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ExceptionCapacityNonNegative">
      <summary>
              Looks up a localized string similar to 'capacity' must be non-negative..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ExceptionIndexNonNegative">
      <summary>
              Looks up a localized string similar to 'index' must be non-negative and less than the size of the collection..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ExceptionKeyType">
      <summary>
              Looks up a localized string similar to 'key' must be of type {0}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ExceptionValueType">
      <summary>
              Looks up a localized string similar to 'value' must be of type {0}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ExceptionWhileBuildingListOfAllowedValues">
      <summary>
               Looks up a localized string similar to Can not build list of allowed values, error message:
            {0}.
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FailedToCreateCustomField">
      <summary>
               Looks up a localized string similar to Failed to create custom field '{0}' from assembly '{1}'.
            Please make sure the assembly and its dependencies are available.
            Exception:
            {2}.
             </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FailedToLoadCustomFieldAssembly">
      <summary>
              Looks up a localized string similar to Failed to load assembly '{0}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FieldNotFound">
      <summary>
              Looks up a localized string similar to Field '{0}' not found..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.IndexOutOfRange">
      <summary>
              Looks up a localized string similar to Index [{0}] is out of range..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.InvalidColumnCount">
      <summary>
              Looks up a localized string similar to The number of columns must be &gt;= 1..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.InvalidFieldDimensions">
      <summary>
              Looks up a localized string similar to Field position and dimensions must be positive..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.InvalidPictureHolderParameter">
      <summary>
              Looks up a localized string similar to Invalid parameter for PictureHolder constructor..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.InvalidReportDefinition">
      <summary>
              Looks up a localized string similar to Invalid report definition..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.InvalidValue">
      <summary>
              Looks up a localized string similar to Value [{0}] does not represent an instance of type [{1}]..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ItemNotFound">
      <summary>
              Looks up a localized string similar to Item with name '{0}' not found..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.LabelOffsetCannotBeNegative">
      <summary>
              Looks up a localized string similar to Label offset cannot be negative..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.MarginsCannotBeNegative">
      <summary>
              Looks up a localized string similar to Margins cannot be negative..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.NoReportDefinitions">
      <summary>
              Looks up a localized string similar to File '{0}' does not contain any report definitions..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ParagraphItemAlreadyHasParentParagraphField">
      <summary>
              Looks up a localized string similar to The added ParagraphItem already belongs to ParagraphField..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ReportNotFound">
      <summary>
              Looks up a localized string similar to Report '{0}' not found in '{1}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineAssignmentAfterForExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: assignment expected after 'For'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineCannotAssignNewValueToConstant">
      <summary>
              Looks up a localized string similar to Cannot assign new value to constant '{0}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineCannotAssignValueViaIScriptValue">
      <summary>
              Looks up a localized string similar to Cannot assign value to property [{0}.{1}] using IScriptValue interface..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineDataScopeNotFound">
      <summary>
              Looks up a localized string similar to Datascope [{0}] not found..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineEndFunctionExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: 'End Function' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineEndIfExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: 'EndIf' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineEndSubExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: 'End Sub' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineEqualExpected">
      <summary>
              Looks up a localized string similar to Invalid assignment: '=' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineErrorPos">
      <summary>
              Looks up a localized string similar to  (at line {0}, column {1}).
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionBadExpression">
      <summary>
              Looks up a localized string similar to Bad expression..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionBadToken">
      <summary>
              Looks up a localized string similar to bad token in comparison code.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionEvaluateExpression">
      <summary>
              Looks up a localized string similar to Evaluate expression '{0}': {1}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionExpression">
      <summary>
              Looks up a localized string similar to Expression '{0}': {1}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionInfiniteLoop">
      <summary>
              Looks up a localized string similar to Infinite loop (STEP value is zero)..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionInvalidHEXNumber">
      <summary>
              Looks up a localized string similar to Invalid HEX number..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionMatchDateDelimiter">
      <summary>
              Looks up a localized string similar to Can't find matching date delimiter ('#')..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionMatchQuote">
      <summary>
              Looks up a localized string similar to Can't find matching quote..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionMissingParameters">
      <summary>
              Looks up a localized string similar to Missing parameters in call to '{0}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionNonEmptyStringExpected">
      <summary>
              Looks up a localized string similar to A non-empty string expected.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionParseExpression">
      <summary>
              Looks up a localized string similar to Parse expression '{0}': {1}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionPropertyMethodNotFound">
      <summary>
              Looks up a localized string similar to Property/method not found: {0}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExceptionTooManyParameters">
      <summary>
              Looks up a localized string similar to Too many parameters in call to '{0}'..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineExpressionExpected">
      <summary>
              Looks up a localized string similar to Expression expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineGroupNotFoundForGroupPageValue">
      <summary>
              Looks up a localized string similar to Group [{0}] not found while calculating GroupPage() or GroupPages()..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineInvalidConstantDeclaration">
      <summary>
              Looks up a localized string similar to Invalid constant declaration: expected &lt;name&gt; = &lt;value&gt;..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineInvalidGroupIdentifierUsedInGroupPageValue">
      <summary>
              Looks up a localized string similar to Invalid group identifier [{0}] used as parameter for GroupPage() or GroupPages()..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineInvalidUsingOfGroupPageValue">
      <summary>
              Looks up a localized string similar to GroupPage() and GroupPages() functions can be used only inside group..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineInvalidValueNotBool">
      <summary>
              Looks up a localized string similar to [{0}] can not be interpreted as boolean..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineInvalidValueNotColor">
      <summary>
              Looks up a localized string similar to [{0}] can not be interpreted as Color..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineInvalidValueNotDateTime">
      <summary>
              Looks up a localized string similar to [{0}] can not be interpreted as DateTime..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineInvalidValueNotNumber">
      <summary>
              Looks up a localized string similar to [{0}] can not be interpreted as number..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEnginelvalueExpected">
      <summary>
              Looks up a localized string similar to Invalid assignment: 'lvalue' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineNameOfFunctionExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: Function name expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineNameOfSubExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: Sub name expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineNearErrorPos">
      <summary>
              Looks up a localized string similar to  (near '{0}' at line {1}, column {2}).
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineNextExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: 'Next' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineNotGroupDataScope">
      <summary>
              Looks up a localized string similar to Datascope [{0}] is not linked with group, script functions GroupValue(), GroupRowCount() and GroupRow() can be used only inside group..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineScriptFailedToExecute">
      <summary>
              Looks up a localized string similar to Script [{0}] failed to execute: {1}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineSyntaxError">
      <summary>
              Looks up a localized string similar to Syntax Error..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineThenExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: 'Then' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineToExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: 'To' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineUnbalancedParenthesis">
      <summary>
              Looks up a localized string similar to Unbalanced parenthesis..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineUnexpectedEndOfExpression">
      <summary>
              Looks up a localized string similar to Unexpected end of expression..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineUnnamedScriptFailedToExecute">
      <summary>
              Looks up a localized string similar to Script failed to execute: {0}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineVariableNotInitialized">
      <summary>
              Looks up a localized string similar to Variable '{0}' used without being initialized..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.ScriptEngineWendExpected">
      <summary>
              Looks up a localized string similar to Invalid statement: 'Wend' expected..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.SectionHeightCanNotBeSet">
      <summary>
              Looks up a localized string similar to To change height of the Section set height of its subsections..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.SubreportCanNotRender">
      <summary>
              Looks up a localized string similar to Subreport [{0}] can not be rendered..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.SubreportParameterNotFound">
      <summary>
              Looks up a localized string similar to Subreport [{0}] does not have parameter [{1}]..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.SubSectionAlreadyHasParentSection">
      <summary>
              Looks up a localized string similar to The added SubSection already belongs to Section..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.SubSectionCollectionCanNotBeEmpty">
      <summary>
              Looks up a localized string similar to The Section.SubSections collection can not be empty..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.SubSectionRenderHeightNotCalculated">
      <summary>
              Looks up a localized string similar to The RenderHeight of [{0}] subsection is not available, subsection is not calculated..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceIListSourceCannotUsed1">
      <summary>
            Looks up a localized string similar to "Object of type [{0}] specified as data source, it supports ITypedList and provides a list of collections (IListSource.ContainsListCollection is true) but DataSource.RecordSource which should contain the name of the list not specified.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceIListSourceCannotUsed2">
      <summary>
            Looks up a localized string similar to "Object of type [{0}] specified as data source, it supports ITypedList and provides a list of collections but object returned via ITypedList.GetList() does not support ITypedList interface.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.DataSourceIListSourceCannotUsed3">
      <summary>
            Looks up a localized string similar to "Object of type [{0}] specified as data source, it supports ITypedList and provides a list of collections and collection with name [{1}] (specified in DataSource.RecordSource property) does not found.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FlexChartCanNotRender">
      <summary>
            Looks up a localized string similar to "Chart field [{0}] can not be rendered.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FlexChartSeriesYExpressionsNotSpecified">
      <summary>
            Looks up a localized string similar to "YExpressions property for [{0}] series is not specified.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FlexChartSeriesDataSourceNotFound">
      <summary>
            Looks up a localized string similar to "DataSource [{0}] specified for [{1}] series not found.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FlexChartFieldInvalidDataLabelExpression">
      <summary>
            Looks up a localized string similar to "Expression [{0}] specified in FlexChartField.DataLabelExpression is invalid.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FlexChartFieldInvalidSeriesXExpression">
      <summary>
            Looks up a localized string similar to "Expression [{0}] specified for XExpression of [{1}] series is invalid.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.FlexChartFieldInvalidSeriesYExpression">
      <summary>
            Looks up a localized string similar to "Expression [{0}] specified for {1}th YExpression of [{1}] series is invalid.".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.XmlLinkCanNotOpenFile">
      <summary>
            Looks up a localized string similar to "Can not open [{0}].".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_DevStrings.XmlLinkTableNotFound">
      <summary>
            Looks up a localized string similar to "XML in [{0}] does not contain [{1}] table.".
            </summary>
    </member>
    <member name="T:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.InvalidReportParameters">
      <summary>
              Looks up a localized string similar to Values specified for report parameters are invalid or values for not all report parameters are specified..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.InvalidValueForReportParameter">
      <summary>
              Looks up a localized string similar to [{0}] is invalid value for parameter..
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.None">
      <summary>
              Looks up a localized string similar to None.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.Picture">
      <summary>
              Looks up a localized string similar to (Picture).
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.ReportLinkTagetBookmarkToStringFmt">
      <summary>
              Looks up a localized string similar to Bookmark: "{0}".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.ReportLinkTagetUrlToStringFmt">
      <summary>
              Looks up a localized string similar to Url: "{0}".
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.SaveAsFmt">
      <summary>
              Looks up a localized string similar to Save as {0}.
            </summary>
    </member>
    <member name="P:C1.Silverlight.FlexReport.Resources.C1_FlexReport_Strings.UnsupportedFieldType">
      <summary>
              Looks up a localized string similar to "Unknown field type [{0}]. This field type may not be supported in the current edition of FlexReport.".
            </summary>
    </member>
  </members>
</doc>