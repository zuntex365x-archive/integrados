<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF.ExpressionEditor.4</name>
  </assembly>
  <members>
    <member name="T:C1.ExpressionEditor.Engine.IEngine">
      <summary>
            Defines properties and methods of expression engine.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.IEngine.DataSource">
      <summary>
            Gets or sets the object used as the data source.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.IEngine.Evaluate">
      <summary>
            Gets a result of expression.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.IEngine.TryEvaluate(System.Object@)">
      <summary>
            Gets a result of expression. A return value indicates whether the evaluate succeeded or failed.
            </summary>
      <param name="result">This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>true if expression was evaluated successfully; otherwise, false.</returns>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.IEngine.Expression">
      <summary>
            Gets or sets expression string.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.IEngine.ItemContext">
      <summary>
            Gets or sets the object used as the context for evaluating an expression.
            </summary>
      <remarks>
            If the DataSource property represents collection of objects, then ItemContext usually represents one of items from this collection.
            In most cases it is done automatically by the ExpressionEditor control and doesn't require any custom code.
            Please only use this property if you see problems with default behavior.
            </remarks>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.IEngine.IsValid">
      <summary>
            Gets a value that indicates whether the expression is valid.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.IEngine.GetErrors">
      <summary>
            Gets a list of <see cref="T:C1.ExpressionEditor.Engine.ErrorInfo" /> objects.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.IEngine.CultureInfo">
      <summary>
            Gets or sets the <see cref="P:C1.ExpressionEditor.Engine.IEngine.CultureInfo" /> to use when parsing numbers and dates.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.IEngine.AddAlias(System.String,System.String)">
      <summary>
            Added a alias for a field from DataSource.
            </summary>
      <param name="field">The field from DataSource.</param>
      <param name="alias">The alias of field.</param>
    </member>
    <member name="T:C1.ExpressionEditor.Engine.ErrorInfo">
      <summary>
            Provides a information about error of evaluating or parsing.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.ErrorInfo.Length">
      <summary>
            Gets a value that indicates a length of error. This value is used for underline errors.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.ErrorInfo.Position">
      <summary>
            Gets a value that indicates a position of error.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.ErrorInfo.FullMessage">
      <summary>
            Gets a full message with a information about error, can contain: position, length and etc.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.ErrorInfo.Message">
      <summary>
            Gets a message with a information about error.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.ErrorInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:C1.ExpressionEditor.Engine.ErrorInfo" /> is equal to the current <see cref="T:C1.ExpressionEditor.Engine.ErrorInfo" />.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.ErrorInfo.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
    </member>
    <member name="T:C1.ExpressionEditor.Engine.IExpressionLexer">
      <summary>
            Defines the lexical dictionary of expression engine.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.IExpressionLexer.GetExpressionItems">
      <summary>
            Gets list of <see cref="T:C1.ExpressionEditor.Engine.ExpressionItem" /> of the current context.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.IExpressionLexer.AddFunction(System.Collections.Generic.List{C1.ExpressionEditor.Engine.ExpressionItem},System.Func{System.Collections.Generic.List{System.Object},System.Object},System.Int32,System.Int32)">
      <summary>
            Added a custom function to engine of C1ExpressionEditor.
            </summary>
      <param name="items">Provides the function description for the C1ExpressionEditorPanel.</param>
      <param name="function">The delegate that evaluates the function.</param>
      <param name="minArgsCount">Minimum arguments count.</param>
      <param name="maxArgsCount">Maximum arguments count.</param>
    </member>
    <member name="T:C1.ExpressionEditor.Engine.ScriptErrorInfo">
      <summary>
            Provides a information about error of evaluating or parsing.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.ScriptErrorInfo.#ctor(System.Int32,System.Int32,C1.ExpressionEditor.Engine.ErrorType)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.ExpressionEditor.Engine.ScriptErrorInfo" /> with the specified position, length and type of error.
            </summary>
      <param name="position">The position of new error.</param>
      <param name="length">The length of new error.</param>
      <param name="type">The <see cref="T:C1.ExpressionEditor.Engine.ErrorType" /> of error.</param>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.ScriptErrorInfo.Type">
      <summary>
            Gets a value that indicates a <see cref="T:C1.ExpressionEditor.Engine.ErrorType" /> of error.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.ScriptErrorInfo.FullMessage">
      <summary>
            Gets a full message with a information about error, contains: position and message.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Engine.ScriptErrorInfo.Message">
      <summary>
            Gets a message with a information about error.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.ScriptErrorInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:C1.ExpressionEditor.Engine.ScriptErrorInfo" /> is equal to the current <see cref="T:C1.ExpressionEditor.Engine.ScriptErrorInfo" />.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Engine.ScriptErrorInfo.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
    </member>
    <member name="T:C1.ExpressionEditor.Engine.ErrorType">
      <summary>
            Specifies the type of error by <see cref="T:C1.ExpressionEditor.Engine.ScriptErrorInfo" />.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.CanNotFindFinalDateDelimiter">
      <summary>
            Can't find final date delimiter ('#').
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.CanNotFindFinalQuote">
      <summary>
            Can't find final quote.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.CanNotFindFinalSquareBracket">
      <summary>
            Can't find final square bracket.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.ExpressionExpected">
      <summary>
            Expression expected.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.FieldOrVariableDidNotFound">
      <summary>
            Field or variable did not found.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.IdentifierExpected">
      <summary>
            Identifier expected.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.SyntaxError">
      <summary>
            Syntax error.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.TooFewParameters">
      <summary>
            Too few parameters.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.TooManyParameters">
      <summary>
            Too many parameters.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.UnbalancedParenthesis">
      <summary>
            Unbalanced parenthesis.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.UnexpectedError">
      <summary>
            Unexpected error.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.UnexpectedIdentifier">
      <summary>
            Unexpected identifier.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.CanNotFindFinalBracket">
      <summary>
            Can't find final bracket.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.ComparisonError">
      <summary>
            Error comparing values.
            </summary>
    </member>
    <member name="F:C1.ExpressionEditor.Engine.ErrorType.IncorrectDateFormat">
      <summary>
            Incorrect date format.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Localization.RuntimeStrings.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:C1.ExpressionEditor.Localization.Common`1">
      <summary>
            A helper base for resource strongly-typed resource class
            that reads resources from the application assembly.
            </summary>
      <typeparam name="R">The strongly-typed resource subclass</typeparam>
    </member>
    <member name="T:C1.ExpressionEditor.Localization.Common`1.S">
      <summary>
            Dummy class to make GetString work.
            </summary>
    </member>
    <member name="M:C1.ExpressionEditor.Localization.Common`1.S.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>
            Calls resourceManApp.GetString and if that fails, resourceManC1.GetString.
            </summary>
    </member>
    <member name="P:C1.ExpressionEditor.Localization.Common`1.ResourceManager">
      <summary>
            Loads resource managers for the application and the assembly.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.C1ExpressionEditor">
      <summary>
            The <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditor" /> control is used to dynamically produce an expression and get the result of the expression.
            It supports DataBinding and integrates with controls which provide the <see cref="T:C1.WPF.ExpressionEditor.ISupportExpressions" /> interface. 
            C1ExpressionEditor can also use field values of such control in expression string.
            </summary>
    </member>
    <member name="E:C1.WPF.ExpressionEditor.C1ExpressionEditor.ExpressionChanged">
      <summary>
            Occurs when expression string changed.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.OnExpressionChanged(System.EventArgs)">
      <summary>
            Rises the <see cref="E:C1.WPF.ExpressionEditor.C1ExpressionEditor.ExpressionChanged" /> event.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.InsertItem">
      <summary>
            Gets the <see cref="T:System.Windows.Input.ICommand" /> object which performs insert operations.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.IsValid">
      <summary>
            Gets value that indicates whether the expression is valid.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.AddAlias(System.String,System.String)">
      <summary>
            Adds an alias for a field from DataSource.
            </summary>
      <param name="field">The field from DataSource.</param>
      <param name="alias">The field alias.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.AddFunction(C1.ExpressionEditor.Engine.ExpressionItem,System.Func{System.Collections.Generic.List{System.Object},System.Object},System.Int32,System.Int32)">
      <summary>
            Added a custom function to engine of C1ExpressionEditor.
            </summary>
      <param name="item">Provides the function description for the <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel" />.</param>
      <param name="function">The delegate that evaluates the function.</param>
      <param name="minArgsCount">Minimum arguments count.</param>
      <param name="maxArgsCount">Maximum arguments count.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.AddFunction(System.Collections.Generic.List{C1.ExpressionEditor.Engine.ExpressionItem},System.Func{System.Collections.Generic.List{System.Object},System.Object},System.Int32,System.Int32)">
      <summary>
            Added a custom function to engine of C1ExpressionEditor.
            </summary>
      <param name="items">Provides the function description for the <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel" />.</param>
      <param name="function">The delegate that evaluates the function.</param>
      <param name="minArgsCount">Minimum arguments count.</param>
      <param name="maxArgsCount">Maximum arguments count.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.AddFunction(C1.ExpressionEditor.Engine.ExpressionItem,System.Func{System.Collections.Generic.List{System.Object},System.Object},System.Int32)">
      <summary>
            Added a custom function to engine of C1ExpressionEditor.
            </summary>
      <param name="item">Provides the function description for the <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel" />.</param>
      <param name="function">The delegate that evaluates the function.</param>
      <param name="argsCount">Arguments count.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.Evaluate(System.Int32)">
      <summary>
            Gets result of the expression.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.TryEvaluate(System.Object@)">
      <summary>
            Gets a result of expression. A return value indicates whether the evaluate succeeded or failed.
            </summary>
      <param name="result">This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>true if expression was evaluated successfully; otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.GetErrors">
      <summary>
            Gets list of <see cref="T:C1.ExpressionEditor.Engine.ErrorInfo" /> objects.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.SelectedObject">
      <summary>
            Gets selected object of the support integrate.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.SetCustomEngine(C1.ExpressionEditor.Engine.IEngine,C1.ExpressionEditor.Engine.IExpressionLexer)">
      <summary>
            Sets a custom engine to <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditor" />.
            </summary>
      <param name="engine">Implements <see cref="T:C1.ExpressionEditor.Engine.IEngine" /> interface.</param>
      <param name="lexer">Implements <see cref="T:C1.ExpressionEditor.Engine.IExpressionLexer" /> interface.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.ResetEngine">
      <summary>
            Resets a engine of <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditor" /> to default.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.Dispose">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.Dispose(System.Boolean)">
      <summary>
            Performs cleanup operations on managed and unmanaged resources.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.Expression">
      <summary>
            Gets or sets expression string.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditor.ExpressionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.Expression" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.DataSource">
      <summary>
            Gets or sets the object used as the data source.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditor.DataSourceProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.DataSource" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.ItemContext">
      <summary>
            Gets or sets the object used as the context for evaluating an expression.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditor.ItemContextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.ItemContext" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.ShowErrorBox">
      <summary>
            Gets or sets a value indicating whether to show errors.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditor.ShowErrorBoxProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.ShowErrorBox" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.UnderlineErrors">
      <summary>
            Gets or sets a value indicating whether to underline errors.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditor.UnderlineErrorsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.UnderlineErrors" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.SyntaxHighlighting">
      <summary>
            Gets or sets a value indicating whether to highlight syntax.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditor.SyntaxHighlightingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditor.SyntaxHighlighting" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditor" />.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditor.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditor" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel">
      <summary>
            The <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel" /> control provides <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditor" /> by panel of useful tools. 
            It provides a list of predefined and dynamic elements that can be used in expression.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.Categories">
      <summary>
            Gets the expression item categories.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.CategoriesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.Categories" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.Dispose">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.Dispose(System.Boolean)">
      <summary>
            Performs cleanup operations on managed and unmanaged resources.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ExpressionEditor">
      <summary>
            Gets or sets related expression editor control.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ExpressionEditorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ExpressionEditor" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="E:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="P:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel" />.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox">
      <summary>
            Represents a rich editing control that contains expression editor. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.CurrentHighlighter">
      <summary>
            Gets or sets the interface of the ExpressionEditor highlighter.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.ToolTipDescription">
      <summary>
            Gets the tooltip description element of the editor.
            </summary>
    </member>
    <member name="E:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.WordMouseEnter">
      <summary> 
            The event raised when mouse over on the word.
            </summary>
    </member>
    <member name="E:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.WordMouseLeave">
      <summary>
            The event raised when the mouse leaves from the word.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.ShowDescriptionToolTip(C1.ExpressionEditor.Engine.ExpressionItem,System.Double,System.Double)">
      <summary>
            Show the tooltip of description.
            </summary>
      <param name="item">The expression item.</param>
      <param name="x">The point of the x.</param>
      <param name="y">The point of the y.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.ShowDescriptionToolTip(C1.ExpressionEditor.Engine.ExpressionItem,System.Double,System.Double,System.Int32)">
      <summary>
            Show the tooltip of description.
            </summary>
      <param name="item">The expression item.</param>
      <param name="x">The point of the x.</param>
      <param name="y">The point of the y.</param>
      <param name="argNum">The number of parameters.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.HideDescriptionToolTip">
      <summary>
            Hides tooltip.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.Dispose">
      <summary>
            Clean up events being used.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.HighlighterContent">
      <summary>
            Highlighter the content of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.ExpressionRules">
      <summary>
            Gets or sets the rules of the expression.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.ExpressionRulesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.ExpressionRules" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.Text">
      <summary>
            Gets or sets the text contents.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.TextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.Text" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.UnderlineErrors">
      <summary>
            Gets or sets a value indicating whether to underline errors.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.UnderlineErrorsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.UnderlineErrors" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.SyntaxHighlighting">
      <summary>
            Gets or sets a value indicating whether to highlight syntax.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.SyntaxHighlightingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.SyntaxHighlighting" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionRichTextBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.WordEventHandler">
      <summary>
            The handler of the word event.
            </summary>
      <param name="sender">The element of the sender.</param>
      <param name="e">The event.</param>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.WordLocationEventHandler">
      <summary>
            The handler of the word location event.
            </summary>
      <param name="sender">The element of the sender</param>
      <param name="e">The event.</param>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.WordEventArgs">
      <summary>
            The word event.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.WordEventArgs.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.WordEventArgs" />.
            </summary>
      <param name="word">The word.</param>
      <param name="start">The start position of the word.</param>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.WordEventArgs.Word">
      <summary>
            The word.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.WordEventArgs.Start">
      <summary>
            The start position of the word.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.WordLocationEventArgs">
      <summary>
            The word location event.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.WordLocationEventArgs.#ctor(System.Windows.Point,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.WordEventArgs" />.
            </summary>
      <param name="loc">The position of the mouse pointer.</param>
      <param name="word">The work.</param>
      <param name="start">The start position of the word.</param>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.WordLocationEventArgs.MouseLocation">
      <summary>
            The position of the mouse pointer.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.IHighlighter">
      <summary>
            The interface of the ExpressionEditor highlighter.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.BaseRule">
      <summary>
            The base style rule of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.BaseRule.SyntaxType">
      <summary>
            Gets or sets the type of the syntax.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.BaseRule.Foreground">
      <summary>
            Gets or sets the foreground of the syntax.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.BaseRule.FontWeight">
      <summary>
            Gets or sets the font weight of the syntax.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.BaseRule.FontStyle">
      <summary>
            Gets or sets the font style of the syntax.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.BaseRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.BaseRule" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.FieldRule">
      <summary>
            The field style rule of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.FieldRule.Fields">
      <summary>
            Gets or sets the fields list.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.FieldRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.FieldRule" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.FunctionsRule">
      <summary>
            The functions style rule of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.FunctionsRule.Functions">
      <summary>
            Gets or sets the functions list.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.FunctionsRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.FunctionsRule" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.KeyWordsRule">
      <summary>
            The keywords style rule of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.KeyWordsRule.WordStrings">
      <summary>
            Sets the keywords string with use ' ' as the separator. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.KeyWordsRule.Keywords">
      <summary>
            Gets the keywords list.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.KeyWordsRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.KeyWordsRule" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.NumberRule">
      <summary>
            The number style rule of the editor.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.NumberRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.NumberRule" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.RegexRule">
      <summary>
            The custom regex style rule of the editor.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.RegexRule.Expression">
      <summary>
            Gets or sets the regex expression.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.RegexRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.RegexRule" />.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.RegexRule.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.RegexRule" /> which accepts a regex expression.
            </summary>
      <param name="expression">The regex expression.</param>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.RuleCollection">
      <summary>
            The collections of base rules.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.StringRule">
      <summary>
            The string style rule of the editor.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.StringRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.StringRule" />.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.SyntaxType">
      <summary>
            The syntax type of editor.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.SyntaxType.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.SyntaxType.Regex">
      <summary>
            Regex expression.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.SyntaxType.Keyword">
      <summary>
            Keyword.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.SyntaxType.String">
      <summary>
            String.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.SyntaxType.Number">
      <summary>
            Number.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.SyntaxType.Field">
      <summary>
            The field of the object.
            </summary>
    </member>
    <member name="F:C1.WPF.ExpressionEditor.SyntaxType.Functions">
      <summary>
            Functions.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.Token">
      <summary>
      </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.Token.#ctor(System.Int32,System.Int32,C1.WPF.ExpressionEditor.BaseRule)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.Token" />.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.Token.Rule">
      <summary>
            Gets the rule of token.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.Token.StartIndex">
      <summary>
            Gets the start index of token.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.Token.Length">
      <summary>
            Gets the length of token.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.ExpressionEditorCollection">
      <summary>
            The collection of the expression editor.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.#ctor(C1.WPF.ExpressionEditor.ISupportExpressions)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.ExpressionEditorCollection" /> which accepts an <see cref="T:C1.WPF.ExpressionEditor.ISupportExpressions" />.
            </summary>
      <param name="owner">
      </param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.Dispose">
      <summary>
            Clean up events being used.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.Add(System.String,C1.WPF.ExpressionEditor.C1ExpressionEditor)">
      <summary>
            Add an expression editor to the collection.
            </summary>
      <param name="columnName">The column name of the grid.</param>
      <param name="editor">The expression editor.</param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.Remove(System.String)">
      <summary>
            Remove the corresponding expression editor with the column name.
            </summary>
      <param name="columnName">The column name of the grid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.Evaluate">
      <summary>
            Evaluate all expression editor values.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.Evaluate(System.Int32)">
      <summary>
            Evaluate the value of a column expression.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.ExpressionEditorCollection.Item(System.String)">
      <summary>
            Gets an expression editor in collections.
            </summary>
      <param name="name">The column name of the grid.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.RenameColumn(System.String,System.String)">
      <summary>
            Rename the expression editor names.
            </summary>
      <param name="oldName">
      </param>
      <param name="newName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.GetColumnName(C1.WPF.ExpressionEditor.C1ExpressionEditor)">
      <summary>
            Gets the column name of the expression editor.
            </summary>
      <param name="editor">The expression editor.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionEditorCollection.Contains(System.String)">
      <summary>
            Gets the column name is contained in the collection.
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.ISupportExpressions">
      <summary>
            Supports integrates with controls. 
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.ISupportExpressions.ItemsSource">
      <summary>
            Gets or sets a collection that is used to generate the content of the control.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.ISupportExpressions.ExpressionEditors">
      <summary>
            Gets a collection of the expression editor
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ISupportExpressions.SetCellValue(System.Int32,System.String,System.Object)">
      <summary>
            Set the value of the cell.
            </summary>
      <param name="row">The row number of the grid.</param>
      <param name="colName">The column name of the grid.</param>
      <param name="value">The value of the cell.</param>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.IntellisenseItem">
      <summary>
            Describes intellisense item information.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.IntellisenseItem.#ctor(C1.ExpressionEditor.Engine.ExpressionItem,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.IntellisenseItem" /> which accepts an expression item and icon.
            </summary>
      <param name="item">
      </param>
      <param name="icon">
      </param>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.IntellisenseItem.Item">
      <summary>
            The expression item.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.IntellisenseItem.Icon">
      <summary>
            The icon of the expression item.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.IntellisenseItem.ItemArguments">
      <summary>
            The arguments of the expression item.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.ExpressionItemCategory">
      <summary>
            Represents a expression category for a <see cref="T:C1.WPF.ExpressionEditor.C1ExpressionEditorPanel" />.
            </summary>
    </member>
    <member name="E:C1.WPF.ExpressionEditor.ExpressionItemCategory.PropertyChanged">
      <summary>
             Occurs when a property value changes.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionItemCategory.OnPropertyChanged(System.String)">
      <summary>
            Rises the <see cref="E:C1.WPF.ExpressionEditor.ExpressionItemCategory.PropertyChanged" /> event.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.ExpressionItemCategory.Text">
      <summary>
            Gets or sets the displayed text.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.ExpressionItemCategory.SubCategories">
      <summary>
            Gets a collection of subcategories.
            </summary>
    </member>
    <member name="P:C1.WPF.ExpressionEditor.ExpressionItemCategory.Items">
      <summary>
            For internal use only
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionItemCategory.Dispose(System.Boolean)">
      <summary>
            Releases all unmanaged resources.
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ExpressionItemCategory.Dispose">
      <summary>
            Releases all unmanaged resources.
            </summary>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.ArgumentConverter">
      <summary>
            The argument converter.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ArgumentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converter.
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.ArgumentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            ConvertBack.
            </summary>
      <param name="value">
      </param>
      <param name="targetType">
      </param>
      <param name="parameter">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.ExpressionEditor.CommandHandler">
      <summary>
            The command handler in expression panel.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.CommandHandler.#ctor(System.Action{System.Object},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.ExpressionEditor.CommandHandler" />.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.CommandHandler.CanExecute(System.Object)">
      <summary>
            Can execute command.
            </summary>
      <param name="parameter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="E:C1.WPF.ExpressionEditor.CommandHandler.CanExecuteChanged">
      <summary>
            The event of can execute changed.
            </summary>
    </member>
    <member name="M:C1.WPF.ExpressionEditor.CommandHandler.Execute(System.Object)">
      <summary>
            Execute command.
            </summary>
      <param name="parameter">
      </param>
    </member>
  </members>
</doc>