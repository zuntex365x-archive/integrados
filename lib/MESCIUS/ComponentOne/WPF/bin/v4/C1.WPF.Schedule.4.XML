<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF.Schedule.4</name>
  </assembly>
  <members>
    <member name="T:C1.WPF.Schedule.C1Calendar">
      <summary>
            Represents a multi month calendar with an ability to interactively navigate
            through months and select a specific <see cref="T:System.DateTime" /> value or its components.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.GenerateAdjacentMonthDaysProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.GenerateAdjacentMonthDays" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.GenerateAdjacentMonthDays">
      <summary>
            Gets or sets a value that determines whether to show days corresponding
            to months which are adjacent for the months currently represented by the 
            control. The default value is False. This is a dependency property.
            </summary>
      <remarks>
        <para>
            If <see cref="P:C1.WPF.Schedule.C1Calendar.GenerateAdjacentMonthDays" /> is set to true, 
            the <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentPreviousMonthDays" />
            property for the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> showing a first of currently
            represented months
            and the <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentNextMonthDays" />
            property for the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> showing a last of currently
            represented months are set to true.
            </para>
      </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.ShowWeekNumbers">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value indicating whether the control displays week numbers (1-52).
            This is a dependency property. The default is false.
            </summary>
      <remarks>
            The actual appearance of week numbers is determined in the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control template 
            with the <see cref="T:C1.WPF.Schedule.WeekNumbersPresenter" /> control instance. 
            To show week numbers in the custom control template, place the <see cref="T:C1.WPF.Schedule.WeekNumbersPresenter" /> control
            into template visual tree and bind it's Visibility property to the <see cref="P:C1.WPF.Schedule.C1Calendar.ShowWeekNumbers" /> property.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.ShowWeekNumbersProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.ShowWeekNumbers" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthCount" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthCount">
      <summary>
            Gets or sets a number of months currently represented by the calendar.
            The default value is 1. This is a dependency property.
            </summary>
      <remarks>
        <para>
            A default UI of the control is designed so as to fit as many child 
            <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> controls as can fit in the current control size,
            taking into account the size of each single month calendar which is determined 
            by the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthWidth" /> and <see cref="P:C1.WPF.Schedule.C1Calendar.MonthHeight" /> properties.
            As a result, when control is resized, a value of the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthCount" />
            property is changed automatically. 
            </para>
        <para>
            You can change default behavior by using custom ItemsPanelTemplate. 
            For more details see <see cref="P:C1.WPF.Schedule.C1Calendar.MonthsPanel" /> property description.
            </para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthCalendarStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthCalendarStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthCalendarStyle">
      <summary>
            Gets or sets a Style applied to each child <see cref="T:C1.WPF.Schedule.C1CalendarItem" />
            representing a single month. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthSlotStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthSlotStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthSlotStyle">
      <summary>
            Gets or sets a Style for <see cref="T:C1.WPF.Schedule.C1CalendarPresenter" /> elements 
            which are the root elements of a visual tree representing a single month.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthsPanelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthsPanel" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthsPanel">
      <summary>
            Gets or sets an ItemsPanelTemplate that defines the panel that lays out elements
            representing separate months. This is a dependency property.
            </summary>
      <remarks>
        <para>
            C1Calendar controls supports the next panels:
            <list type="bullet"><item>The <see cref="T:System.Windows.Controls.Primitives.UniformGrid" /> panel. This is a default setting.
            A value of the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthCount" /> property is set automatically according to the available space.</item><item>The <see cref="T:System.Windows.Controls.Grid" /> panel. A value of the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthCount" /> property is set automatically 
            according to the grid definition.</item><item>The <see cref="T:System.Windows.Controls.StackPanel" /> panel. 
            The <see cref="T:C1.WPF.Schedule.C1Calendar" /> control honors explicitely defined <see cref="P:C1.WPF.Schedule.C1Calendar.MonthCount" /> property value.</item><item>The <see cref="T:System.Windows.Controls.VirtualizingStackPanel" /> panel. 
            The <see cref="T:C1.WPF.Schedule.C1Calendar" /> control honors explicitely defined <see cref="P:C1.WPF.Schedule.C1Calendar.MonthCount" /> property value.</item></list><example><code><![CDATA[
            <c1sched:C1Calendar MonthCount="4">
                <c1sched:C1Calendar.MonthsPanel>
                    <ItemsPanelTemplate> 
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate> 
                </c1sched:C1Calendar.MonthsPanel>
            </c1sched:C1Calendar>
            ]]></code></example></para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthWidth" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthWidth">
      <summary>
            Gets or sets a value that determines a width of each 
            month slot of the calendar.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthHeight" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthHeight">
      <summary>
            Gets or sets a value that determines a height of each 
            month slot of the calendar.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.SelectedDatesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.SelectedDates" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.SelectedDates">
      <summary>
            Gets or sets the list of selected dates.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.BoldedDatesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.BoldedDates" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.BoldedDates">
      <summary>
            Gets or sets the list of bolded dates.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MaxSelectionCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MaxSelectionCount" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MaxSelectionCount">
      <summary>
            Gets or sets the maximum number of days that can be selected in the control. 
            This is a dependency property.
            </summary>
      <remarks>
            Note, even if this property value allows to select multiple items, 
            the actual number of selected days might be limited by the value of the <see cref="P:C1.WPF.Schedule.C1Calendar.SelectionMode" /> property.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.DropDownItemCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.DropDownItemCount" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.DropDownItemCount">
      <summary>
            Gets or sets the number of items in dropdown month/year selectors in the month header.
            This is a dependency property.
            </summary>
      <remarks>The actual number of items in the dropdown selector might be less than specified in the <see cref="P:C1.WPF.Schedule.C1Calendar.DropDownItemCount" /> property.
            It is limited by the <see cref="P:C1.WPF.Schedule.CalendarBase.MinDate" /> and <see cref="P:C1.WPF.Schedule.CalendarBase.MaxDate" /> property values.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.SelectionMode">
      <summary>
            Gets or sets the selection behavior for the <see cref="T:C1.WPF.Schedule.C1Calendar" /> control.
            This is a dependency property. The default value is <see cref="F:System.Windows.Controls.SelectionMode.Extended" />.
            </summary>
      <remarks>Note, even if this property value allows to select multiple items, 
            the actual number of selected days might be limited by the value of the <see cref="P:C1.WPF.Schedule.C1Calendar.MaxSelectionCount" /> property.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.SelectionModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.SelectionMode" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthHeaderBackground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to color month header.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthHeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthHeaderBackground" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthHeaderForeground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to color month header text.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthHeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthHeaderForeground" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.NavigationButtonBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to color navigation buttons.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.NavigationButtonBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.NavigationButtonBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.DaysOfWeekBorderBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to underline days of week.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.DaysOfWeekBorderBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.DaysOfWeekBorderBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.SelectedDayBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to highlight selected dates.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.SelectedDayBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.SelectedDayBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.TodayBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to highlight current date.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.TodayBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.TodayBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.WeekendBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to display weekends.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.WeekendBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.WeekendBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.AdjacentMonthDayBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to display adjacent month days.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.AdjacentMonthDayBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.AdjacentMonthDayBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.DisabledDayBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to display disabled days.
            This is a dependency property.
            </summary>
      <remarks>The default value corresponds to the current value of the <see cref="P:System.Windows.SystemColors.GrayTextColor" /> property.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.DisabledDayBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.DisabledDayBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthHeaderFontFamily">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.FontFamily" /> object used to to display month header text.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthHeaderFontFamilyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthHeaderFontFamily" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthHeaderFontSize">
      <summary>
            Gets or sets a <see cref="T:System.Double" /> value determining month header font size.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthHeaderFontSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthHeaderFontSize" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Calendar.MonthHeaderFontWeight">
      <summary>
            Gets or sets a <see cref="T:System.Windows.FontWeight" /> object used to to display month header text.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.MonthHeaderFontWeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Calendar.MonthHeaderFontWeight" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.PreviousMonthCommand">
      <summary>
            Defines the command that makes a previous month the month that is currently 
            represented by the control.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.CalendarBase" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Calendar.PreviousMonth" /> method.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Calendar.NextMonthCommand">
      <summary>
            Defines the command that makes a next month the month that is currently 
            represented by the control.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.CalendarBase" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Calendar.NextMonth" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.C1Calendar" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.PreviousMonth">
      <summary>
            Makes the previous month the month that is currently represented by the control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.NextMonth">
      <summary>
            Makes the next month the month that is currently represented by the control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.Today">
      <summary>
            Navigates control to the current date.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Finishes updating of SelectedDates collection.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
            Selects continuous dates if mouse is moved with the left button pressed.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Calendar.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.C1CalendarItem">
      <summary>
            Represents a single month calendar with an ability to interactively navigate
            through months and select a specific DateTime or its components.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItem.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.C1CalendarItem.DateTimeInfoCollection">
      <summary>
            The <see cref="T:C1.WPF.Schedule.C1CalendarItem.DateTimeInfoCollection" /> class keeps the list of <see cref="T:C1.WPF.Schedule.DateTimeInfo" />
            objects which can be used for the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control navigation.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.DateTimeInfoCollection.SelectedValue">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.Schedule.DateTimeInfo" /> object corresponding to the month 
            and year which are currently displayed by the owning <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.DateTimeInfoCollection.Collection">
      <summary>
            Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> collection.
            </summary>
    </member>
    <member name="E:C1.WPF.Schedule.C1CalendarItem.DateTimeInfoCollection.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarItem.C1CalendarProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1CalendarItem.C1Calendar" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.C1Calendar">
      <summary>
            Gets a <see cref="P:C1.WPF.Schedule.C1CalendarItem.C1Calendar" /> owning this <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control. 
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentPreviousMonthDaysProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentPreviousMonthDays" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentPreviousMonthDays">
      <summary>
            Gets or sets a value that determines whether the day slots corresponding
            to days of a month previous to the currently represented one will show
            the days or will be empty. The default value is False.
            This is a dependency property.
            </summary>
      <remarks>
        <para>
            If <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentPreviousMonthDays" /> is set to true, 
            the <see cref="T:C1.WPF.Schedule.DaySlot" /> objects generated in the <see cref="P:C1.WPF.Schedule.C1CalendarItem.DaySlots" /> 
            collection for previous month days will not be empty 
            (<see cref="P:C1.WPF.Schedule.DaySlot.Empty" /> is false and <see cref="P:C1.WPF.Schedule.DaySlot.Date" /> contains
            a date from the previous month).
            </para>
        <para>
            If <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentPreviousMonthDays" /> is set to false, 
            the <see cref="T:C1.WPF.Schedule.DaySlot" /> objects generated in the <see cref="P:C1.WPF.Schedule.C1CalendarItem.DaySlots" /> 
            collection for previous month days will be empty 
            (<see cref="P:C1.WPF.Schedule.DaySlot.Empty" /> is false).
            </para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentNextMonthDaysProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentNextMonthDays" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentNextMonthDays">
      <summary>
            Gets or sets a value that determines whether the day slots corresponding
            to days of a month next to the currently represented one will show
            the days or will be empty. 
            The default value is False. This is a dependency property.
            </summary>
      <remarks>
        <para>
            If <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentNextMonthDays" /> is set to true, 
            the <see cref="T:C1.WPF.Schedule.DaySlot" /> objects generated in the <see cref="P:C1.WPF.Schedule.C1CalendarItem.DaySlots" /> 
            collection for next month days will not be empty 
            (<see cref="P:C1.WPF.Schedule.DaySlot.Empty" /> is false and <see cref="P:C1.WPF.Schedule.DaySlot.Date" /> contains
            a date from the next month).
            </para>
        <para>
            If <see cref="P:C1.WPF.Schedule.C1CalendarItem.GenerateAdjacentNextMonthDays" /> is set to false, 
            the <see cref="T:C1.WPF.Schedule.DaySlot" /> objects generated in the <see cref="P:C1.WPF.Schedule.C1CalendarItem.DaySlots" /> 
            collection for previous month days will be empty 
            (<see cref="P:C1.WPF.Schedule.DaySlot.Empty" /> is false).
            </para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarItem.ShowPreviousButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1CalendarItem.ShowPreviousButton" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.ShowPreviousButton">
      <summary>
            Gets or sets a value that determines whether to show the previous month navigation button.
            The default value is True. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarItem.ShowNextButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1CalendarItem.ShowNextButton" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.ShowNextButton">
      <summary>
            Gets or sets a value that determines whether to show the next month navigation button.
            The default value is True. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarItem.MonthFullNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1CalendarItem.MonthFullName" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.MonthFullName">
      <summary>
            Gets a full name of a month currently represented by calendar taking into
            account current culture.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.Months">
      <summary>
            Gets the <see cref="T:C1.WPF.Schedule.C1CalendarItem.DateTimeInfoCollection" /> object pre-populated with <see cref="T:C1.WPF.Schedule.DateTimeInfo" />
            objects representing several adjoining months. This object can be used in xaml
            for navigating the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control to the one of the adjoining months.
            </summary>
      <remarks>This property is used by default C1CalendarItem style. 
            For the sample of using look into source xaml: themes\CommonCalendarResources.xaml.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.Years">
      <summary>
            Gets the <see cref="T:C1.WPF.Schedule.C1CalendarItem.DateTimeInfoCollection" /> object pre-populated with <see cref="T:C1.WPF.Schedule.DateTimeInfo" />
            objects representing several adjoining years. This object can be used in xaml
            for navigating the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control to the one of the adjoining years.
            </summary>
      <remarks>This property is used by default C1CalendarItem style. 
            For the sample of using look into source xaml: themes\CommonCalendarResources.xaml.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItem.SyncRepresentationToDateTime">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value, determining whether control 
            synchronizes it's representation according to 
            the changes of <see cref="T:System.DateTime" /> property.
            </summary>
      <remarks>The return value is false.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItem.Dispose">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItem.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.WPF.Schedule.DaySlotPresenter">
      <summary>
            Represents a root element of a visual tree generated for a day slot of the
            <see cref="T:C1.WPF.Schedule.C1CalendarItem" />.
            </summary>
      <remarks>
            A separate <see cref="T:C1.WPF.Schedule.DaySlotPresenter" /> element is generated for each
            <see cref="P:C1.WPF.Schedule.DaySlotPresenter.DaySlot" /> from the <see cref="P:C1.WPF.Schedule.C1CalendarItem.DaySlots" />
            collection. 
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.DaySlotPresenter.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="F:C1.WPF.Schedule.DaySlotPresenter.EmptyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.DaySlotPresenter.Empty" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.DaySlotPresenter.DateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.DaySlotPresenter.Date" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DaySlotPresenter.#ctor">
      <summary>
            Creates a new instance of <see cref="T:C1.WPF.Schedule.DaySlotPresenter" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlotPresenter.Empty">
      <summary>
            Indicates whether the <see cref="T:C1.WPF.Schedule.DaySlotPresenter" /> represents an empty 
            <see cref="P:C1.WPF.Schedule.DaySlotPresenter.DaySlot" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlotPresenter.DaySlot">
      <summary>
            Gets a <see cref="P:C1.WPF.Schedule.DaySlotPresenter.DaySlot" /> represented by the <see cref="T:C1.WPF.Schedule.DaySlotPresenter" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlotPresenter.Date">
      <summary>
            Gets a date representing by the <see cref="T:C1.WPF.Schedule.DaySlotPresenter" /> or a null value
            if the element represents an empty <see cref="P:C1.WPF.Schedule.DaySlotPresenter.DaySlot" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DaySlotPresenter.OnContentChanged(System.Object,System.Object)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="oldContent">
      </param>
      <param name="newContent">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.DaySlotPresenter.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.C1CalendarItemPresenter">
      <summary>
            An instance of this class is used in the C1CalendarItem's template
            visual tree to define a place where a panel with calendar days will appear.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItemPresenter.OnCreateAutomationPeer">
      <summary>
            Gets an AutomationPeer object used for testing the control.
            </summary>
      <returns>An AutomationPeer object used for testing the control.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItemPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.C1CalendarItemPresenter" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarItemPresenter.Calendar">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> owning the control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItemPresenter.GetContainerForItemOverride">
      <summary>
            Creates or identifies the element used to display the specified item.
            </summary>
      <returns>The new instance of <see cref="T:C1.WPF.Schedule.DaySlotPresenter" /> class.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarItemPresenter.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>True if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ShiftingCanvas">
      <summary>
            Positions children elements in the viewport of the parent ScrollViewer control which supports horizontal scrolling. 
            </summary>
      <remarks>If some part of the ShiftingCanvas is scrolled out of the view, children elements
            are moved according to the scroll position.
            Depending on the <see cref="P:C1.WPF.Schedule.ShiftingCanvas.HorizontalContentAlignment" /> property value children are aligned to the 
            left-most or the right-most viewport side.
            HorizontalContentAlignment.Center and HorizontalContentAlignment.Stretch are not supported.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.ShiftingCanvas.HorizontalContentAlignment">
      <summary>
            Gets or sets the horizontal alignment of the control's content. 
            This is a dependency property. 
            </summary>
      <remarks>    
            HorizontalContentAlignment.Center and HorizontalContentAlignment.Stretch are not supported.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.ShiftingCanvas.HorizontalContentAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.ShiftingCanvas.HorizontalContentAlignment" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ShiftingCanvas.SkipScrollViewers">
      <summary>
            Gets or sets an <see cref="T:System.Int32" /> value specifying the number of parent ScrollViewers which should be ignored.
            The default value is 0.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ShiftingCanvas.#ctor">
      <summary>
            Creates the new instance of the <see cref="T:C1.WPF.Schedule.ShiftingCanvas" /> class.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.TimeRuler">
      <summary>
            Represents UI for displaying horizontal or vertical time ruler in the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control template.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.TimeRuler.#ctor">
      <summary>
            Creates a new instance of <see cref="T:C1.WPF.Schedule.TimeRuler" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.TimeRuler.Scheduler">
            References a <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control that owns the <see cref="T:C1.WPF.Schedule.TimeRuler" />.
        </member>
    <member name="F:C1.WPF.Schedule.TimeRuler.SchedulerProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.TimeRuler.Scheduler" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.TimeRuler.CurrentTimeTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.TimeRuler.CurrentTimeTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.TimeRuler.CurrentTimeTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI representation of
            a the current time mark. This is a dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.C1CalendarPresenter">
      <summary>
            An instance of this class is used in the C1Calendar's template
            visual tree to define a place where a panel with month calendars will appear.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarPresenter.CalendarProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1CalendarPresenter.Calendar" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarPresenter.Calendar">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.C1Calendar" /> owning the control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.C1CalendarPresenter" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarPresenter.GetContainerForItemOverride">
      <summary>
            Creates or identifies the element used to display the specified item.
            </summary>
      <returns>The new instance of <see cref="T:C1.WPF.Schedule.MonthSlotPresenter" /> class.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarPresenter.IsItemItsOwnContainerOverride(System.Object)">
      <summary>
            Determines if the specified item is (or is eligible to be) its own ItemContainer. 
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarPresenter.OnApplyTemplate">
      <summary>
            Overrides the default behavior.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.MonthSlotPresenter">
      <summary>
            An instance of this class is used to represent the single month. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.MonthSlotPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.MonthSlotPresenter" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.MonthSlotPresenter.CalendarItem">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.C1CalendarResources">
      <summary>
            The <see cref="T:C1.WPF.Schedule.C1CalendarResources" /> keeps the set of resources used by the <see cref="T:C1.WPF.Schedule.CalendarBase" /> derived controls.
            Static fields of this class return default CalendarBase's themes.
            </summary>
      <remarks>
            Resource lookup behavior:
            <list type="bullet"><item>
            If Theme property is set to something other than Classic System Colors theme, the lookup 
            process checks for the requested key within the resource dictionary defined by the current control theme
            </item><item>
            The lookup process checks resources in a usual way (in page, window or application resources)
            </item><item>
            The lookup process checks resources in default theme dictionary.
            </item></list></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1CalendarResources.Default">
      <summary>
            Gets the ResourceDictionary representing Default theme.
            This theme uses system-defined colors.
            This is a default theme for calendar controls.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2007Blue">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2007 Blue theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2007Black">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2007 Black theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2007Silver">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2007 Silver theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2010Blue">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2010 Blue theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2010Black">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2010 Black theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2010Silver">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2010 Silver theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2016Black">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2016 Black theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2016White">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2016 White theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2016Colorful">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2016 Colorful theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Office2016DarkGray">
      <summary>
            Gets the ResourceDictionary representing CalendarBase Office 2016 Dark Gray theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.MediaPlayer">
      <summary>
            Obsolete. Gets the ResourceDictionary representing CalendarBase Media Player theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DuskBlue">
      <summary>
            Obsolete. Gets the ResourceDictionary representing CalendarBase Dusk Blue theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DuskGreen">
      <summary>
            Obsolete. Gets the ResourceDictionary representing CalendarBase Dusk Green theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Vista">
      <summary>
            Obsolete. Gets the ResourceDictionary representing CalendarBase Vista theme.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarResources.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.C1CalendarResources" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1CalendarResources.RefreshResources">
      <summary>
            Refreshes resources according to the currently selected theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.Theme">
      <summary>
            Gets or sets the <see cref="T:System.Windows.ResourceDictionary" /> object used as the theme for the control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DaySlotStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing the style of single day slot.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DayOfWeekSlotStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing day of week slot style.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DaysPanel">
      <summary>
            Gets the <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> object defining the panel that lays out elements
            representing days of a month.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DaySlotTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> defining a UI representation of
            a single day of a month.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DaysOfWeekPanel">
      <summary>
            Gets the <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> defining the panel that lays out elements
            representing days of week.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.DayOfWeekSlotTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> defining a UI representation of
            a single day of week.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.MonthCalendarStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing style of a single month in a multi-month calendar.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.MonthSlotStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing style of C1CalendarPresenter elements 
            which are the root elements of a visual tree representing a single month in a multi-month calendar.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1CalendarResources.MonthsPanel">
      <summary>
            Gets the <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> defining the panel that lays out elements
            representing separate months in a multi-month calendar.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.CalendarBase">
      <summary>
            The base class for the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> and <see cref="T:C1.WPF.Schedule.C1Calendar" /> controls.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.DefaultThemeKey">
      <summary>
            Gets the <see cref="T:System.Windows.ComponentResourceKey" /> that references the default theme 
            that is defined for the calendar control.
            </summary>
      <remarks>
            You can use this read-only static field in XAML by assigning 
            its static value to another property value. 
            Specifically, this field's value defines the <see cref="T:System.Windows.ComponentResourceKey" /> 
            that is used to look up the default theme. 
            To redefine this theme, reference the <see cref="F:C1.WPF.Schedule.CalendarBase.DefaultThemeKey" /> by using the 
            x:Static Markup Extension and assign that value as the x:Key Attribute of 
            the new <see cref="T:System.Windows.ResourceDictionary" /> object.
            You can use this field in XAML as an x:Key Attribute 
            of a <see cref="T:System.Windows.ResourceDictionary" /> that redefines the theme for the calendar control.
            <example><code><![CDATA[
            <Application.Resources>
            	<ResourceDictionary>
            		<ResourceDictionary x:Key="{x:Static c1sched:CalendarBase.DefaultThemeKey}"
            							Source="/C1.WPF.Schedule.4;component/themes/CalendarThemes/Office2007/Blue.xaml" />
            	</ResourceDictionary>
            </Application.Resources> 
            ]]></code></example></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.BackgroundProperty">
      <summary>
            Identifies the Background dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.ThemeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.Theme" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.Theme">
      <summary>
            Gets or sets a <see cref="T:System.Windows.ResourceDictionary" /> object containing calendar theme resources.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.YearProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.Year" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.Year">
      <summary>
            Gets or sets a year component of the <see cref="P:C1.WPF.Schedule.CalendarBase.SelectedDate" /> property.
            This is a dependency property.
            </summary>
      <remarks>
            Changing this property value explicitly or implicitly via the
            <see cref="P:C1.WPF.Schedule.CalendarBase.SelectedDate" /> property forces the control
            to refresh its UI so as to represent an updated month of a year.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.MonthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.Month" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.Month">
      <summary>
            Gets or sets a month component of the <see cref="P:C1.WPF.Schedule.CalendarBase.SelectedDate" /> property.
            This is a dependency property.
            </summary>
      <remarks>
            Changing this property value explicitly or implicitly via the
            <see cref="P:C1.WPF.Schedule.CalendarBase.SelectedDate" /> property forces the control
            to refresh its UI so as to represent an updated month of a year.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.SelectedDateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.SelectedDate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.SelectedDate">
      <summary>
            Gets or sets the currently selected date.
            This is a dependency property.
            </summary>
      <remarks>
            Changing this property may also change the <see cref="P:C1.WPF.Schedule.CalendarBase.Year" /> and/or
            <see cref="P:C1.WPF.Schedule.CalendarBase.Month" /> property values, which in turn will cause a refreshing
            of the control UI so as to represent an updated month of a year.
            Use this property when MaxSelectionCount is set to 1.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.MinDateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.MinDate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.MinDate">
      <summary>
            Gets or sets the minimum allowable date.
            The default is 01/01/1753.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.MaxDateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.MaxDate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.MaxDate">
      <summary>
            Gets or sets the maximum allowable date.
            The default is 12/31/9998.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.CalendarHelperProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.CalendarHelper" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.CalendarHelper">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.Schedule.CalendarBase.CalendarHelper" /> object
            that provides calendar-dependant properties.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.DaysPanelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.DaysPanel" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.DaysPanel">
      <summary>
            Gets or sets an ItemsPanelTemplate that defines the panel that lays out elements
            representing days of a month. This is a dependency property.
            </summary>
      <remarks>
            By default the <see cref="T:System.Windows.Controls.Primitives.UniformGrid" /> panel with 7 columns
            and 6 rows is used.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.DaySlotTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.DaySlotTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.DaySlotTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI representation of
            a single day of a month. This is a dependency property.
            </summary>
      <remarks>
            A DataContext for this template is a <see cref="T:C1.WPF.Schedule.DaySlot" /> object.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.DaySlotStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.DaySlotStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.DaySlotStyle">
      <summary>
            Gets or sets a Style for <see cref="T:C1.WPF.Schedule.DaySlotPresenter" /> elements which are 
            the root elements of a visual tree representing a single day of a month.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.DaysOfWeekPanelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.DaysOfWeekPanel" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.DaysOfWeekPanel">
      <summary>
            Gets or sets an ItemsPanelTemplate that defines the panel that lays out elements
            representing days of the week. This is a dependency property.
            </summary>
      <remarks>
            By default the StackPanel with horizontal orientation is used.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.DayOfWeekSlotTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.DayOfWeekSlotTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.DayOfWeekSlotTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI representation of
            a single day of the week. This is a dependency property.
            </summary>
      <remarks>
            A DataContext for this template is a <see cref="T:C1.WPF.Schedule.DayOfWeekSlot" /> object.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.DayOfWeekSlotStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CalendarBase.DayOfWeekSlotStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.DayOfWeekSlotStyle">
      <summary>
            Gets or sets a Style for <see cref="T:C1.WPF.Schedule.DayOfWeekSlotPresenter" /> elements which are 
            the root elements of a visual tree representing a single day of the week.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CalendarBase.SelectedDateChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.CalendarBase.SelectedDateChanged" /> routed event. 
            </summary>
    </member>
    <member name="E:C1.WPF.Schedule.CalendarBase.SelectedDateChanged">
      <summary>
            Occurs when the <see cref="P:C1.WPF.Schedule.CalendarBase.SelectedDate" /> property value has been changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CalendarBase.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.CalendarBase" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CalendarBase.OnApplyTemplate">
      <summary>
            Rebuilds calendar slots after initializing.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarBase.SyncRepresentationToDateTime">
      <summary>
            Gets the Boolean value, determining
            whether control synchronizes it's representation according to 
            the changes of <see cref="T:System.DateTime" /> property.
            </summary>
      <remarks>Default implementation always returns true.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.CalendarBase.GetDateTimeAtPoint(C1.WPF.Schedule.CalendarBase,System.Windows.Point)">
      <summary>
            Returns the <see cref="T:System.Nullable`1" /> at the specified location.
            </summary>
      <param name="calendar">The <see cref="T:C1.WPF.Schedule.CalendarBase" /> control.</param>
      <param name="location">The <see cref="T:System.Windows.Point" /> object which specifies location inside control boundaries.</param>
      <returns>Returns <see cref="T:System.DateTime" /> value if found; Null - otherwise.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CalendarBase.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.SelectionCommand">
      <summary>
            Determines the type of selection.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SelectionCommand.Select">
      <summary>
            Select command.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SelectionCommand.Unselect">
      <summary>
            Unselect command.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SelectionCommand.Toggle">
      <summary>
            Toggle selection command.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SelectionCommand.Extend">
      <summary>
            Extend selection command.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.DaySlot">
      <summary>
            Represents a day slot in the <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
      <remarks>
            An instance of this class can represent a day of a month or an empty slot,
            which is determined by the <see cref="P:C1.WPF.Schedule.DaySlot.Empty" /> property value. In the case
            when <see cref="T:C1.WPF.Schedule.DaySlot" /> is empty, the <see cref="P:C1.WPF.Schedule.DaySlot.Date" /> property will have
            a null value, but the other properties will still contain information that allows you
            to determine the placement of the slot in the calendar.
            For example the <see cref="P:C1.WPF.Schedule.DaySlot.DayOfWeek" /> property will determine a day of week 
            that the slot corresponds to.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.DaySlot.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.DaySlot.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.DaySlot.IsBoldedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.DaySlot.IsBolded" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.DaySlot.IsEnabledProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.DaySlot.IsEnabled" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.Date">
      <summary>
            Gets a date represented by the <see cref="T:C1.WPF.Schedule.DaySlot" /> object or a null value
            if the <see cref="T:C1.WPF.Schedule.DaySlot" /> is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.DayOfWeek">
      <summary>
            Gets the day of the week that this slot corresponds to.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.Empty">
      <summary>
            Indicates whether the <see cref="T:C1.WPF.Schedule.DaySlot" /> is empty, that is doesn't
            represent a date.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.IsWeekend">
      <summary>
            Indicates whether the <see cref="T:C1.WPF.Schedule.DaySlot" /> represents a weekend day.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.IsAdjacent">
      <summary>
            Indicates whether the <see cref="T:C1.WPF.Schedule.DaySlot" /> represents a day from an adjacent
            month, but not of the month currently represented by 
            <see cref="T:C1.WPF.Schedule.C1CalendarItem" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.IsToday">
      <summary>
            Indicates whether the <see cref="T:C1.WPF.Schedule.DaySlot" /> represents the current day.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.IsSelected">
      <summary>
            Indicates whether a day represented by the <see cref="T:C1.WPF.Schedule.DaySlot" /> is currently
            selected in <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> UI. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.IsBolded">
      <summary>
            Indicates whether a day represented by the <see cref="T:C1.WPF.Schedule.DaySlot" /> is currently
            bolded in <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> UI. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.IsEnabled">
      <summary>
            Indicates whether a day represented by the <see cref="T:C1.WPF.Schedule.DaySlot" /> is currently
            enabled in <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> UI. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DaySlot.Owner">
      <summary>
            Returns reference to the owning <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DaySlot.ToString">
      <summary>
            Returns string representation of the <see cref="P:C1.WPF.Schedule.DaySlot.Date" /> property value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Schedule.DaysOfWeekPresenter">
      <summary>
            An instance of this class is used in the C1CalendarItem's template
            visual tree to define a place where a panel with day of week captions will appear.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DaysOfWeekPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.DaysOfWeekPresenter" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DaysOfWeekPresenter.GetContainerForItemOverride">
      <summary>
            Creates or identifies the element used to display the specified item.
            </summary>
      <returns>The new instance of <see cref="T:C1.WPF.Schedule.DayOfWeekSlotPresenter" /> class.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DayOfWeekSlot">
      <summary>
            Provides a data about a day of a week for the <see cref="T:C1.WPF.Schedule.DaysOfWeekPresenter" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfWeekSlot.DayOfWeek">
      <summary>
            Gets a day of a week represented by the <see cref="T:C1.WPF.Schedule.DayOfWeekSlot" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfWeekSlot.DayShortName">
      <summary>
            Gets a culture specific short name for the <see cref="P:C1.WPF.Schedule.DayOfWeekSlot.DayOfWeek" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfWeekSlot.DayShortestName">
      <summary>
            Gets a culture specific shortest name for the <see cref="P:C1.WPF.Schedule.DayOfWeekSlot.DayOfWeek" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfWeekSlot.DayFullName">
      <summary>
            Gets a culture specific full name for the <see cref="P:C1.WPF.Schedule.DayOfWeekSlot.DayOfWeek" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfWeekSlot.IsWeekend">
      <summary>
            Indicates whether the <see cref="P:C1.WPF.Schedule.DayOfWeekSlot.DayOfWeek" /> is a weekend.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfWeekSlot.Owner">
      <summary>
            Returns reference to the owning <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.DayOfWeekSlotPresenter">
      <summary>
            Represents a root element of a visual tree generated for a day of week slot of the
            <see cref="T:C1.WPF.Schedule.C1CalendarItem" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfWeekSlotPresenter.DayOfWeekSlot">
      <summary>
            Gets a <see cref="P:C1.WPF.Schedule.DayOfWeekSlotPresenter.DayOfWeekSlot" /> represented by the <see cref="T:C1.WPF.Schedule.DayOfWeekSlotPresenter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.WeekNumbersPresenter">
      <summary>
            An instance of this class is used in the C1CalendarItem's template
            visual tree to define a place where a panel with week numbers will appear.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekNumbersPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.WeekNumbersPresenter" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekNumbersPresenter.GetContainerForItemOverride">
      <summary>
            Creates or identifies the element used to display the specified item.
            </summary>
      <returns>The new instance of <see cref="T:C1.WPF.Schedule.DayOfWeekSlotPresenter" /> class.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.WeekNumberSlot">
      <summary>
            Provides a data about week number for the <see cref="T:C1.WPF.Schedule.WeekNumbersPresenter" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.WeekNumberSlot.Date">
      <summary>
            Gets a date represented by the <see cref="T:C1.WPF.Schedule.WeekNumberSlot" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.WeekNumberSlot.WeekNumber">
      <summary>
            Gets the <see cref="T:System.Int32" /> value representing culture specific week number.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.WeekNumberSlot.IsEmpty">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value determining whether this week slot should be displayed as an empty one.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.WeekNumberSlot.Owner">
      <summary>
            Returns reference to the owning <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekNumberSlot.ToString">
      <summary>
            Returns string representation of the <see cref="P:C1.WPF.Schedule.WeekNumberSlot.Date" /> property value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Schedule.WeekNumberSlotPresenter">
      <summary>
            Represents a root element of the visual tree generated for a week number slot of the
            <see cref="T:C1.WPF.Schedule.C1CalendarItem" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekNumberSlotPresenter.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:C1.WPF.Schedule.WeekNumberSlotPresenter.WeekNumberSlot">
      <summary>
            Gets a <see cref="P:C1.WPF.Schedule.WeekNumberSlotPresenter.WeekNumberSlot" /> represented by the <see cref="T:C1.WPF.Schedule.WeekNumberSlotPresenter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.EditAppointmentControl">
      <summary>
            The <see cref="T:C1.WPF.Schedule.EditAppointmentControl" /> control allows editing of all appointment properties.
            </summary>
      <summary>
            EditAppointmentControl
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.EditAppointmentControl.#ctor">
      <summary>
            Creates the new instance of the <see cref="T:C1.WPF.Schedule.EditAppointmentControl" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditAppointmentControl.Appointment">
      <summary>
            Gets or sets an <see cref="P:C1.WPF.Schedule.EditAppointmentControl.Appointment" /> object representing current DataContext.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditAppointmentControl.Header">
      <summary>
            Gets a <see cref="T:System.String" /> value which can be used as an Appointment window header.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditAppointmentControl.PatternDescription">
      <summary>
            Gets recurrence pattern description.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.EditAppointmentControl.PatternDescriptionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.EditAppointmentControl.PatternDescription" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.EditAppointmentControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.EditCollectionControl">
      <summary>
            The <see cref="T:C1.WPF.Schedule.EditCollectionControl" /> control is an auxiliary control encapsulating
            UI elements for editing Appointment Categories, Links or Resource properties.
            </summary>
      <summary>
            EditCollectionControl
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.EditCollectionControl.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:C1.WPF.Schedule.EditCollectionControl" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.ButtonText">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value whiuch should be used as a button content.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.LabelText">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value whiuch should be used as a label content.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.Text">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value whiuch should be used as a TextBox content.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.ShowButton">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determining whether control should show button for external editing
            or ComboBox for the single selection.
            </summary>
      <remarks>
        <para>If this property is true, control shows Button and TextBox. In such case editing and selection from the 
            source collection is implemented by the <see cref="F:C1.WPF.Schedule.C1Scheduler.SelectFromListDialogCommand" /> command.</para>
        <para>If this property is false, controls shows ComboBox for the single selection. In this case,
            TargetCollection is updated automatically when user selects ComboBox item.</para>
      </remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.SourceCollection">
      <summary>
            Gets or sets an <see cref="T:System.Collections.IList" /> list, containing all available items.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.TargetCollection">
      <summary>
            Gets or sets an <see cref="T:System.Collections.IList" /> list, containing selected items.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.ItemType">
      <summary>
            Gets or sets a type of items in a source and target collections.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.ParentAppointment">
      <summary>
            Gets or sets the appointment object, for which the control is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.WindowTitle">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value which should be used as a dialog title.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditCollectionControl.Scheduler">
      <summary>
            Gets or sets the the parent <see cref="T:C1.WPF.Schedule.C1Scheduler" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.EditCollectionControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.EditRecurrenceControl">
      <summary>
            The <see cref="T:C1.WPF.Schedule.EditRecurrenceControl" /> control allows editing of all recurrence pattern properties.
            </summary>
      <summary>
            EditRecurrenceControl
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.EditRecurrenceControl.Scheduler">
      <summary>
            Gets or sets reference to the parent <see cref="P:C1.WPF.Schedule.EditRecurrenceControl.Scheduler" /> control.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.EditRecurrenceControl.SchedulerProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.EditRecurrenceControl.Scheduler" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.EditRecurrenceControl.#ctor">
      <summary>
            Creates the new instance of the <see cref="T:C1.WPF.Schedule.EditRecurrenceControl" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.EditRecurrenceControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.WeekOfMonthEnumToStringConverter">
      <summary>
            Represents a Binding converter that returns a localized string representation of WeekOfMonthEnum member.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.WeekOfMonthEnumToStringConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.WeekOfMonthEnumToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.WeekOfMonthEnumToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekOfMonthEnumToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WeekOfMonthEnumToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.WeekDaysEnumToStringConverter">
      <summary>
            Represents a Binding converter that returns a localized string representation of WeekDaysEnum member.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.WeekDaysEnumToStringConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.WeekDaysEnumToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.WeekDaysEnumToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekDaysEnumToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The values produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WeekDaysEnumToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The array of types to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.RecChoiceControl">
      <summary>
            This window allows to select or remove a single occurrence or the whole recurring series.
            </summary>
      <summary>
            RecChoiceControl
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.RecChoiceControl.MessageProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.RecChoiceControl.Message" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.RecChoiceControl.TitleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.RecChoiceControl.Title" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.RecChoiceControl.#ctor(C1.WPF.Schedule.C1Scheduler,C1.C1Schedule.Appointment,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.RecChoiceControl" /> control.
            </summary>
      <param name="owner">The owning <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.</param>
      <param name="appointment">The <see cref="P:C1.WPF.Schedule.RecChoiceControl.Appointment" /> object for editing.</param>
      <param name="remove">The <see cref="T:System.Boolean" /> value specifying whether the control
            should show a message about removing or editing an appointment.</param>
    </member>
    <member name="P:C1.WPF.Schedule.RecChoiceControl.Appointment">
      <summary>
            Gets or sets an <see cref="P:C1.WPF.Schedule.RecChoiceControl.Appointment" /> object for which the window is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.RecChoiceControl.Message">
      <summary>
            Gets a string message displayed in the window.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.RecChoiceControl.Title">
      <summary>
            Gets a title displayed in the window.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.RecChoiceControl.IsOccurrence">
      <summary>
            Gets a True value if the user selects removing a single occurrence; False otherwise.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.RecChoiceControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.SelectFromListScene">
      <summary>
            Interaction logic for SelectFromListScene.xaml
            </summary>
      <summary>
            SelectFromListScene
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.SelectFromListScene.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.SelectFromListScene" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.AllowEdit">
      <summary>
            Gets or sets boolean value determining whether dialog should allow adding or deleting items.
            </summary>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.AllowMultipleSelection">
      <summary>
            Gets or sets boolean value determining whether multiple selection is allowed.
            </summary>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.SourceCollection">
      <summary>
            Gets the reference to the source collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.TargetCollection">
      <summary>
            Gets the reference to the target collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.TargetCollectionEdited">
      <summary>
            Gets the reference to the edited copy of the target collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.SourceCollectionEdited">
      <summary>
            Gets the reference to the edited copy of the source collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.ItemType">
      <summary>
            Gets the type of items in collections.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SelectFromListScene.SortedSourceView">
      <summary>
            Gets the sorted view of SourceCollectionEdited to display in the list of available objects.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.SelectFromListScene.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.ShowRemindersControl">
      <summary>
            The <see cref="T:C1.WPF.Schedule.ShowRemindersControl" /> displays currently active reminders and allows to control them.
            </summary>
      <summary>
            ShowRemindersControl
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ShowRemindersControl.Scheduler">
      <summary>
            Gets or sets reference to the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control 
            which is an owner of displayed <see cref="T:C1.C1Schedule.Reminder" /> objects.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ShowRemindersControl.SchedulerProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.ShowRemindersControl.Scheduler" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ShowRemindersControl.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.ShowRemindersControl" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ShowRemindersControl.InitializeComponent">
      <summary>
            InitializeComponent
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.C1Scheduler">
      <summary>
            Represents a schedule with an ability to interactively manage appointments.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeIntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeInterval" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedVisualIntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedVisualInterval" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedIntervalAppointmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedIntervalAppointment" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedAppointmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedAppointment" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupDescriptionsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupDescriptions" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisibleDatesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisibleDates" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualStartTimeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualEndTimeProperty">
      <summary>
            Identifies the <see cref="F:C1.WPF.Schedule.C1Scheduler.VisualEndTimeProperty" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualIntervalScaleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SmallVisualIntervalScaleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallVisualIntervalScale" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualTimeSpanProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.StartProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.Start" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.EndProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.End" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AllDayAreaHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.AllDayAreaHeight" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.AllDayAreaHeight">
      <summary>
            Determines the height of All-Day area in a Day View.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.HasVisibleAppointmentsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.HasVisibleAppointments" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.BoldedDatesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.BoldedDates" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ActiveRemindersProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.ActiveReminders" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.LargeStartTimeChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.LargeStartTimeChange" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChange" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ActiveDateTime">
      <summary>
            Gets the <see cref="F:C1.WPF.Schedule.C1Scheduler.ActiveDateTime" /> object which can be used for binding.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.DataStorage">
      <summary>
            Gets a <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> that stores a data that is represented 
            by the control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ActiveReminders">
      <summary>
            Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> of active <see cref="T:C1.C1Schedule.Reminder" /> objects.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime">
      <summary>
            Gets or sets a DateTime currently selected in control UI. 
            The default value is <see cref="P:System.DateTime.Today" />. This is a dependency property. 
            </summary>
      <remarks>
        <para>
            This property value is related to a <see cref="T:C1.WPF.Schedule.VisualInterval" /> 
            from the VisualIntervals collection that is currently
            selected in control UI. If this property is set to a value that is
            beyond a currently represented period of time defined by the 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> and <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" /> properties,
            the value of the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property is changed automatically
            so as to set up a period of time that includes the new 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property value.
            </para>
        <para>
            You can use this property to bind the control to external controls that
            provides DateTime navigation, for example, bind it to the SelectedDateTime property
            of the C1Calendar control.
            </para>
      </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeInterval">
      <summary>
            Gets the <see cref="T:C1.WPF.Schedule.DateTimeInterval" /> object representing 
            time interval which is currently selected in the control UI. 
            This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectedIntervalAppointment">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> that is currently selected 
            in control UI. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectedAppointment">
      <summary>
            Gets or sets an <see cref="T:C1.C1Schedule.Appointment" /> that is currently selected 
            in the control UI. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime">
      <summary>
            Gets or sets a start of a period of time that is currently represented in
            the control UI. This is a dependency property. 
            </summary>
      <remarks>
            Usually this property value should not be set directly; it gets its value  automatically 
            based on the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" /> and <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> properties 
            (the latter one has DateTime.Today as default) so as to be aligned at the beginning of a current 
            week or current month's first week. Setting it to a value that is not correctly aligned 
            relative to the current control UI (for example, if it is not set to the first day of the week
            for the Month view) can cause an inadequate UI look.
            <para>
            To change a current period of time safely you can use 
            the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property or the 
            <see cref="M:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTime(System.Double)" /> method or the
            <see cref="F:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTimeCommand" /> command.
            </para></remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisibleDates">
      <summary>
            Gets the list of currently visible dates.
            Changing this list might affect the next properties:
            <list type="bullet"><item><see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /></item><item><see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" /></item><item><see cref="P:C1.WPF.Schedule.C1Scheduler.VisualEndTime" /></item><item><see cref="T:System.Windows.Style" /></item></list></summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan">
      <summary>
            Gets or sets a length of a period of time that is currently represented in
            the control UI. The start of the period is defined by the 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualEndTime">
      <summary>
            Gets an end of a period of time that is currently represented in
            the control UI. This is a dependency property. 
            </summary>
      <remarks>
            This property value is calculated as a sum of the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" />
            and <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" /> property values.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale">
      <summary>
            Gets or sets a TimeSpan of each <see cref="T:C1.WPF.Schedule.VisualInterval" /> in the VisualIntervals collection. This is a dependency property. 
            </summary>
      <remarks>The C1Scheduler control resets this property at applying new style, so that style property setters always have effect.
            To preserve time scale for views with short time intervals, use the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallVisualIntervalScale" /> property.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SmallVisualIntervalScale">
      <summary>
            If this property value is set, defines TimeSpan of each <see cref="T:C1.WPF.Schedule.VisualInterval" /> in the VisualIntervals collection 
            for views with intervals shorther than 1 day. 
            This is a dependency property. The default value is TimeSpan.Zero which means that only <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale" /> property has effect.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.Start">
      <summary>
            Gets or sets a DateTime that defines a beginning of an overall period of time
            that can be represented by the control. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.End">
      <summary>
            Gets or sets a DateTime that defines an end of an overall period of time
            that can be represented by the control. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupDescriptions">
      <summary>
            Gets or sets a collection of <see cref="T:C1.WPF.Schedule.VisualIntervalGroupDescription" />
            objects that defines a grouping criteria applied to the items of the VisualIntervals collection. This is a dependency property. 
            </summary>
      <remarks>
            This property is usually used for the purpose of control UI creation in XAML.
            The defined grouping criteria is applied to the VisualIntervals collection items and is reflected in the VisualIntervalsView view, 
            which exposes grouped items via the Groups property.
            <para>
            This property is used in a conjunction with the 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupStyles" /> property that defines UI for each
            group level.
            </para></remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.LargeStartTimeChange">
      <summary>
            Gets or sets a TimeSpan used to change the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" />
            property by the <see cref="M:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeLarge" /> and 
            <see cref="M:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeLarge" /> methods and the
            <see cref="F:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeLargeCommand" /> and 
            <see cref="F:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeLargeCommand" /> commands.
            This is a dependency property.
            </summary>
      <remarks>If this value is not set, then the value of the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" />
            property is used.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChange">
      <summary>
            Gets or sets a TimeSpan used to change the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" />
            property by the <see cref="M:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeSmall" /> and 
            <see cref="M:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeSmall" /> methods and the
            <see cref="F:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeSmallCommand" /> and 
            <see cref="F:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeSmallCommand" /> commands.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.HasVisibleAppointments">
      <summary>
            Indicates whether there is at least one visible appointment in the current view.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.BoldedDates">
      <summary>
            Gets the collection of dates which contain appointments. 
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectedVisualInterval">
      <summary>
            Gets or sets the first selected <see cref="T:C1.WPF.Schedule.VisualInterval" /> object 
            in the current selection or returns null if the selection is empty. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeSmall">
      <summary>
            Decrements the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property value on the amount
            specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChange" /> property.
            </summary>
      <remarks>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeSmallCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeLarge">
      <summary>
            Decrements the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property value on the amount
            specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.LargeStartTimeChange" /> property.
            </summary>
      <remarks>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeLargeCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeSmall">
      <summary>
            Increments the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property value on the amount
            specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChange" /> property.
            </summary>
      <remarks>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeSmallCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeLarge">
      <summary>
            Increments the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property value on the amount
            specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.LargeStartTimeChange" /> property.
            </summary>
      <remarks>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeLargeCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTime(System.Double)">
      <summary>
            Sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property to a value between the
            <see cref="P:C1.WPF.Schedule.C1Scheduler.Start" /> and <see cref="P:C1.WPF.Schedule.C1Scheduler.End" /> property values based on the specified
            coefficient.
            </summary>
      <param name="coefficient">
            A double value in a range between 0 and 1 that defines a relative value 
            between <see cref="P:C1.WPF.Schedule.C1Scheduler.Start" /> and <see cref="P:C1.WPF.Schedule.C1Scheduler.End" />.
            </param>
      <remarks>
            The approximate new value is calculated with the following formula:
            <para>
            VisualStartTime = Start + (End - Start) * coefficient
            </para><para>
            After the new value is calculated, it is adjusted so that the old and new 
            values of the
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property become different in an amount that is 
            multiple of 
            the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChange" /> property value, that guarantees that the 
            first  <see cref="T:C1.WPF.Schedule.VisualInterval" /> in the VisualIntervals 
            collection is properly aligned to be in synch with UI model suppositions.
            </para><para>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTimeCommand" /> command.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.EditAppointmentDialog(C1.C1Schedule.Appointment)">
      <summary>
            Shows the Edit Appointment dialog for editing of the specified existing
            <see cref="T:C1.C1Schedule.Appointment" />.
            </summary>
      <param name="appointment">
            The editing <see cref="T:C1.C1Schedule.Appointment" />.
            </param>
      <remarks>
            This methods implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.EditAppointmentDialogCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialog(C1.WPF.Schedule.VisualInterval)">
      <summary>
            Shows the Edit Appointment dialog for the creation of a new 
            <see cref="T:C1.C1Schedule.Appointment" />.
            </summary>
      <param name="forInterval">
        <see cref="T:C1.WPF.Schedule.VisualInterval" /> that determines an initial period of time for
            a creating <see cref="T:C1.C1Schedule.Appointment" />.
            </param>
      <remarks>
            This methods implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialogCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialog">
      <summary>
            Shows the Edit Appointment dialog for the creation of a new 
            <see cref="T:C1.C1Schedule.Appointment" /> object. 
            Edit Appointment dialog is initialized according to the 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeInterval" /> property value if it is not null;
            or according to the current date and time and 
            the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale" /> property value otherwise.
            </summary>
      <remarks>
            This methods implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialogCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialog(System.DateTime,System.DateTime,System.Nullable{System.Boolean})">
      <summary>
            Shows the Edit Appointment dialog for the creation of a new 
            <see cref="T:C1.C1Schedule.Appointment" /> object with the specified parameters. 
            </summary>
      <param name="start">The start value.</param>
      <param name="end">The end value.</param>
      <param name="allDayEvent">The <see cref="T:System.Boolean" /> value specifying
            whether appointment is all-day event.</param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialog(System.DateTime,System.DateTime,System.Nullable{System.Boolean},C1.C1Schedule.BaseObject)">
      <summary>
            Shows the Edit Appointment dialog for the creation of a new 
            <see cref="T:C1.C1Schedule.Appointment" /> object with the specified parameters. 
            </summary>
      <param name="start">The start value.</param>
      <param name="end">The end value.</param>
      <param name="allDayEvent">The <see cref="T:System.Boolean" /> value specifying
            whether appointment is all-day event.</param>
      <param name="groupOwner">The object determining SchedulerGroupItemen for which appointment should be created.</param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialog(System.DateTime,System.DateTime)">
      <summary>
            Shows the Edit Appointment dialog for the creation of a new 
            <see cref="T:C1.C1Schedule.Appointment" /> object with the specified start and end values. 
            </summary>
      <param name="start">The start value.</param>
      <param name="end">The end value.</param>
      <remarks>The value of the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property
            is determined according the start and end values.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialog(System.DateTime,System.DateTime,C1.C1Schedule.BaseObject)">
      <summary>
            Shows the Edit Appointment dialog for the creation of a new 
            <see cref="T:C1.C1Schedule.Appointment" /> object with the specified start and end values. 
            </summary>
      <param name="start">The start value.</param>
      <param name="end">The end value.</param>
      <param name="groupOwner">The object determining SchedulerGroupItemen for which appointment should be created.</param>
      <remarks>The value of the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property
            is determined according the start and end values.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.DeleteAppointment">
      <summary>
            Deletes the appointment that is currently selected in control UI
            and also shows an appointment deletion options dialog in the case where the appointment is an 
            occurrence of a recurrence pattern.
            </summary>
      <remarks>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.DeleteAppointmentCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.DeleteAppointment(C1.C1Schedule.Appointment)">
      <summary>
            Deletes the specified appointment.
            </summary>
      <remarks>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.DeleteAppointmentCommand" /> command.
            </remarks>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> to delete.</param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousAppointment">
      <summary>
            Makes the nearest appointment before <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> visible in
            the control UI.
            </summary>
      <returns>
            This method returns a value indicating whether the requested appointment has 
            been found and made visible.
            </returns>
      <remarks>
            This method sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedAppointment" /> property to the previous appointment found
            and the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property to the start time of the appointment. 
            If the requested appointment has not been found, then the method changes nothing.
            <para>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousAppointmentCommand" />
            command.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousAppointment(C1.C1Schedule.BaseObject)">
      <summary>
            Makes the nearest appointment before <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> visible in
            the control UI.
            </summary>
      <param name="owner">An owner object determining the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> to search through.</param>
      <returns>
            This method returns a value indicating whether the requested appointment has 
            been found and made visible.
            </returns>
      <remarks>
            This method sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedAppointment" /> property to the previous appointment found
            and the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property to the start time of the appointment. 
            If the requested appointment has not been found, then the method changes nothing.
            <para>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousAppointmentCommand" />
            command.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NavigateToNextAppointment">
      <summary>
            Makes the nearest appointment after <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> visible in
            the control UI.
            </summary>
      <returns>
            This method returns a value indicating whether the requested appointment has 
            been found and made visible.
            </returns>
      <remarks>
            This method sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedAppointment" /> property to the next appointment found 
            and the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property to the start time of the appointment. 
            If the requested appointment has not been found, then the method changes nothing.
            <para>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.NavigateToNextAppointmentCommand" />
            command.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NavigateToNextAppointment(C1.C1Schedule.BaseObject)">
      <summary>
            Makes the nearest appointment after <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> visible in
            the control UI.
            </summary>
      <param name="owner">An owner object determining the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> to search through.</param>
      <returns>
            This method returns a value indicating whether the requested appointment has 
            been found and made visible.
            </returns>
      <remarks>
            This method sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedAppointment" /> property to the next appointment found 
            and the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property to the start time of the appointment. 
            If the requested appointment has not been found, then the method changes nothing.
            <para>
            This method implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.NavigateToNextAppointmentCommand" />
            command.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NavigateToAppointment(System.Boolean,System.Nullable{System.DateTime})">
      <summary>
            Navigates the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control to the nearest
            <see cref="T:C1.C1Schedule.Appointment" />.
            </summary>
      <param name="previous">If true, means the backward direction;
            forward direction otherwise.</param>
      <param name="startTime">The start <see cref="T:System.DateTime" /> point.
            If this parameter has no value, navigation will be 
            performed starting from the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property value.</param>
      <returns>True if navigation has occurred;
            False if there are no appointments in the specified direction.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NavigateToAppointment(C1.C1Schedule.BaseObject,System.Boolean,System.Nullable{System.DateTime})">
      <summary>
            Navigates the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control to the nearest
            <see cref="T:C1.C1Schedule.Appointment" /> in the GroupItems with the specified owner object.
            </summary>
      <param name="owner">An owner object determining the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> to search through.</param>
      <param name="previous">If true, means the backward direction;
            forward direction otherwise.</param>
      <param name="startTime">The start <see cref="T:System.DateTime" /> point.
            If this parameter has no value, navigation will be 
            performed starting from the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property value.</param>
      <returns>True if navigation has occurred;
            False if there are no appointments in the specified direction.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.BringTimeIntoView(System.DateTime,System.Boolean)">
      <summary>
            Attempts to bring into the view a UI element representing a 
            <see cref="T:C1.WPF.Schedule.VisualInterval" /> that includes the specified time in the 
            current scheduler view. Optionally tries to make the element to be a top left 
            element of the view.
            </summary>
      <param name="time">
            DateTime whose UI representation should be made visible.
            </param>
      <param name="forceTopLeft">
            Indicates whether an attempt to make the requested UI element a top left one
            should be performed.
            </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.FindUIForTime(System.DateTime)">
      <summary>
            Returns the <see cref="T:System.Windows.FrameworkElement" /> corresponding to the given <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="time">The <see cref="T:System.DateTime" /> value to find the <see cref="T:System.Windows.FrameworkElement" /> for.</param>
      <returns>A <see cref="T:System.Windows.FrameworkElement" /> that corresponds to the given <see cref="T:System.DateTime" /> value. 
            Returns null if the <see cref="T:System.DateTime" /> value does not belong to displayed range, 
            or if a <see cref="T:System.Windows.FrameworkElement" /> has not been generated for it.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.GetDateTimeAtPoint(C1.WPF.Schedule.C1Scheduler,System.Windows.Point)">
      <summary>
            Returns the <see cref="T:System.Nullable`1" /> at the specified location.
            </summary>
      <param name="scheduler">The <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.</param>
      <param name="location">The <see cref="T:System.Windows.Point" /> object which specifies location inside control boundaries.</param>
      <returns>Returns <see cref="T:System.DateTime" /> value if found; Null - otherwise.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.ChangeStyle(System.Object)">
      <summary>
            Changes the <see cref="T:System.Windows.Style" /> property with the specified Style or a style
            referenced by the specified ResourceDictionary key.
            </summary>
      <param name="styleOrKey">
            Style or a ResourceDictionary key representing a Style.
            </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.BeginUpdate">
      <summary>
            Disables any redrawing of the control. 
            </summary>
      <remarks>To maintain performance while changing several control properties
            call the <see cref="M:C1.WPF.Schedule.C1Scheduler.BeginUpdate" /> method. This method prevents the control 
            from painting until the <see cref="M:C1.WPF.Schedule.C1Scheduler.EndUpdate" /> method is called.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.EndUpdate">
      <summary>
            Enables the redrawing of the control. 
            </summary>
      <remarks>To maintain performance while changing several control properties
            call the <see cref="M:C1.WPF.Schedule.C1Scheduler.BeginUpdate" /> method. This method prevents the control 
            from painting until the <see cref="M:C1.WPF.Schedule.C1Scheduler.EndUpdate" /> method is called.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeSmallCommand">
      <summary>
            Defines the command that decrements the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property 
            value on the amount specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChange" /> property.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeSmall" /> method.
            <para>
            Use this command to implement custom scrolling behavior.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeLargeCommand">
      <summary>
            Defines the command that decrements the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property 
            value on the amount specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.LargeStartTimeChange" /> property.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.DecrementStartTimeLarge" /> method.
            <para>
            Use this command to implement custom scrolling behavior.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeSmallCommand">
      <summary>
            Defines the command that increments the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property 
            value on the amount specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.SmallStartTimeChange" /> property.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeSmall" /> method.
            <para>
            Use this command to implement custom scrolling behavior.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeLargeCommand">
      <summary>
            Defines the command that increments the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property 
            value on the amount specified in the <see cref="P:C1.WPF.Schedule.C1Scheduler.LargeStartTimeChange" /> property.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.IncrementStartTimeLarge" /> method.
            <para>
            Use this command to implement custom scrolling behavior.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTimeCommand">
      <summary>
            Defines the command that sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> property to a value 
            between the
            <see cref="P:C1.WPF.Schedule.C1Scheduler.Start" /> and <see cref="P:C1.WPF.Schedule.C1Scheduler.End" /> property values based on the specified
            coefficient.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTime(System.Double)" /> method. See the 
            <see cref="M:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTime(System.Double)" /> method description for details.
            <para>
            Command parameter: a floating point number in a range between 0 and 1, or
            its string representation, that is passed as a parameter to the 
            <see cref="M:C1.WPF.Schedule.C1Scheduler.SetRelativeStartTime(System.Double)" /> method.
            </para><para>
            Use this command to implement custom scrolling behavior.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousAppointmentCommand">
      <summary>
            Defines the command that makes the nearest appointment before 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> visible in the control UI.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the NavigateToPreviousAppointment methods. See the <see cref="M:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousAppointment" /> 
            and <see cref="M:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousAppointment(C1.C1Schedule.BaseObject)" /> method descriptions for details.
            <para>
            Optional command parameter: the SchedulerGroupItem.Owner object to search in the specific group only.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.NavigateToNextAppointmentCommand">
      <summary>
            Defines the command that makes the nearest appointment after 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> visible in the control UI.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the NavigateToNextAppointment methods. See the <see cref="M:C1.WPF.Schedule.C1Scheduler.NavigateToNextAppointment" /> 
            and <see cref="M:C1.WPF.Schedule.C1Scheduler.NavigateToNextAppointment(C1.C1Schedule.BaseObject)" /> method descriptions for details.
            <para>
            Optional command parameter: the SchedulerGroupItem.Owner object to search in the specific group only.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.EditAppointmentDialogCommand">
      <summary>
            Defines the command that shows the Edit Appointment dialog for editing of the 
            specified existing <see cref="T:C1.C1Schedule.Appointment" />(s).
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.EditAppointmentDialog(C1.C1Schedule.Appointment)" /> method.
            <para>
            Command parameter is one of the next values:
            <list type="bullet"><item><term></term><description>the <see cref="T:C1.C1Schedule.Appointment" /> to edit</description></item><item><term></term><description><see cref="T:System.Collections.IList" /> of <see cref="T:C1.C1Schedule.Appointment" /> objects to edit</description></item><item><term>null</term><description><see cref="T:System.Collections.IList" /> of <see cref="T:C1.C1Schedule.Reminder" /> objects 
            whose parent appointments should be edited</description></item></list>
            If parameter value is not specified then control will try 
            to get an appointment from the sender’s DataContext.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialogCommand">
      <summary>
            Defines the command that shows the Edit Appointment dialog for a creation of 
            a new <see cref="T:C1.C1Schedule.Appointment" />.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the NewAppointmentDialog methods.
            <para>
            The time interval for which an appointment will be created is determined by the sender’s DataContext.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.EditRecurrenceDialogCommand">
      <summary>
            Defines the command that shows the Edit Recurrence dialog for editing a 
            <see cref="T:C1.C1Schedule.RecurrencePattern" /> of the specified <see cref="T:C1.C1Schedule.Appointment" />.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.EditRecurrenceDialog(C1.C1Schedule.Appointment)" /> method.
            <para>
            Command parameter might be one of the next values:
            <list type="bullet"><item><term></term><description>the <see cref="T:C1.C1Schedule.Appointment" /> whose 
            <see cref="T:C1.C1Schedule.RecurrencePattern" /> will be edited. </description></item><item><term></term><description>the dialog window which has an <see cref="T:C1.C1Schedule.Appointment" /> object 
            whose <see cref="T:C1.C1Schedule.RecurrencePattern" /> will be edited as content.</description></item></list>
            If parameter value is not specified, 
            control will try to get an appointment from the sender’s DataContext.
            If parameter value is dialog window which has an Occurrence or Exception of RecurrencePattern as content,
            then content of this window will be changed to the Master appointment of this RecurrencePattern.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectFromListDialogCommand">
      <summary>
            Defines the command that shows the Select From List dialog 
            for specified parameters.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the SelectFromListDialog methods.
            <para>
            Command parameter should be an array from 4 or 5 values: 
            <list type="number"><item>The master list to choose from. 
            For example <see cref="P:C1.C1Schedule.ResourceStorage.Resources" />.</item><item>The resulting list where to put selected items. 
            For example <see cref="P:C1.C1Schedule.Appointment.Resources" /> list.</item><item>The <see cref="T:System.Type" /> value specifying 
            the type of items in both lists.</item><item>The reference to the owning window if any.</item><item>The <see cref="T:System.String" /> value to show as the dialog window title. 
            This parameter is optional.</item></list></para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.DeleteAppointmentCommand">
      <summary>
            Defines the command that deletes the <see cref="T:C1.C1Schedule.Appointment" />(s).
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the DeleteAppointment methods.
            <para>
            Command parameter might be one of the next values:
            <list type="bullet"><item><term></term><description>the <see cref="T:C1.C1Schedule.Appointment" /> to delete</description></item><item><term></term><description><see cref="T:System.Collections.IList" /> of <see cref="T:C1.C1Schedule.Appointment" /> objects to delete</description></item></list>
            If parameter value is not specified, then control will delete the appointment 
            that is currently selected in the control UI.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ChangeStyleCommand">
      <summary>
            Defines the command that changes the <see cref="T:System.Windows.Style" /> property with the 
            specified Style or a style referenced by the specified ResourceDictionary key.
            </summary>
      <remarks>
            This command is executed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> and is implemented 
            by the <see cref="M:C1.WPF.Schedule.C1Scheduler.ChangeStyle(System.Object)" /> method.
            <para>
            Command parameter: Style or a ResourceDictionary key representing a Style.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ImportCommand">
      <summary>
            Defines the command that imports Scheduler data from the file.
            </summary>
      <remarks>
            This command opens "Open File" dialog and then tries to import
            data from selected file.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ExportCommand">
      <summary>
            Defines the command that exports Scheduler data to the file.
            </summary>
      <remarks>
            This command opens "Save File" dialog and then exports data to file.
            <para>
            Command parameter is one of the next values:
            <list type="bullet"><item><term></term><description>the <see cref="T:C1.C1Schedule.Appointment" /> for saving</description></item><item><term></term><description><see cref="T:System.Collections.Generic.IList`1" /> for saving</description></item><item><term>null</term><description>to export all Scheduler data</description></item></list></para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.DismissCommand">
      <summary>
            Defines the command that dismisses reminders.
            </summary>
      <remarks>
        <para>
            Command parameter is one of the next values:
            <list type="bullet"><item><term></term><description><see cref="T:System.Collections.IList" /> of <see cref="T:C1.C1Schedule.Reminder" /> objects to dismiss</description></item><item><term></term><description>the <see cref="T:C1.C1Schedule.Reminder" /> object to dismiss</description></item></list>
            If command parameter is not specified, all active reminders will be dismissed.
            </para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SnoozeCommand">
      <summary>
            Defines the command that snoozes reminders.
            </summary>
      <remarks>
        <para>
            Command parameter may contain an array of 2 values: 
            <list type="number"><item> The <see cref="T:System.TimeSpan" /> value specifying time interval used for snoozing.
            </item><item> One of the next values:
            <list type="bullet"><item><term></term><description><see cref="T:System.Collections.IList" /> of <see cref="T:C1.C1Schedule.Reminder" /> objects to snooze</description></item><item><term></term><description>the <see cref="T:C1.C1Schedule.Reminder" /> object to snooze</description></item></list>
            This item is optional. If it is not specified, all active reminders will be snoozed.
            </item></list></para>
      </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnChangeStyleCommand(System.Windows.Input.ExecutedRoutedEventArgs)">
      <summary>
            Handles the C1Scheduler.ChangeStyle command.
            </summary>
      <remarks>Override this method to alter the default behavior.</remarks>
      <param name="args">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs" /> event arguments.</param>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.BeforeViewChangeEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.BeforeViewChange" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.StyleChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.StyleChanged" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.UserEditingAppointmentEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.UserEditingAppointment" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.UserClosingAppointmentEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.UserClosingAppointment" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentResizeEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentResize" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentDropEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentDrop" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentSaveEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentSave" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.UserAddingAppointmentEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.UserAddingAppointment" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.UserDeletingAppointmentEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.UserDeletingAppointment" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AppointmentAddedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.AppointmentAdded" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AppointmentDeletedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.AppointmentDeleted" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AppointmentChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.AppointmentChanged" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AppointmentRecurrenceStateChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.AppointmentRecurrenceStateChanged" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AppointmentCustomActionEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.AppointmentCustomAction" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ReminderFireEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.ReminderFire" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ReminderAddedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.ReminderAdded" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ReminderChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.ReminderChanged" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ReminderSnoozeEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.ReminderSnooze" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ReminderRemovedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.ReminderRemoved" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.StartChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.StartChanged" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.EndChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.EndChanged" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeChanged" /> routed event. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedAppointmentChangedEvent">
      <summary>
            Identifies the <see cref="E:C1.WPF.Schedule.C1Scheduler.SelectedAppointmentChanged" /> routed event. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event.</returns>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.DataSourceItemSynchronized">
      <summary>
            Occurs when changes made to one of the <see cref="P:C1.WPF.Schedule.C1Scheduler.DataStorage" /> collections
            (for example, to <see cref="P:C1.C1Schedule.AppointmentStorage.Appointments" />)
            has been fully reflected in the storage underlying data source.
            </summary>
      <remarks>
            If properties of an item of the <see cref="P:C1.WPF.Schedule.C1Scheduler.DataStorage" /> collection are
            changed between BeginEdit and EndEdit calls performed on the item, this
            event will not be raised until the EndEdit method will be called.
            <para>
            Use this event if you want to update a back store of your data source only
            after the changes to a corresponding collection have been fully completed.
            For example, if you use ADO.NET DataSet as a data source, you can commit
            the changes made in a DataRow as a result of changes in the collection item
            to the underlying database.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnDataSourceItemSynchronized(C1.C1Schedule.ItemSynchronizedEventArgs)">
      <summary>
            Raises a DataSourceItemSynchronized event;
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.BeforeViewChange">
      <summary>
            Occurs immediately before the next actions:
            <list type="bullet"><item><term></term><description>When range of visible dates 
            is changed by the associated calendar control.</description></item><item><term></term><description>When view type is changed by the <see cref="P:C1.WPF.Schedule.C1Scheduler.ViewType" /> property change.</description></item><item><term></term><description>When range of visible dates and(or) 
            view type is changed by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> commands.
            </description></item></list></summary>
      <remarks>Use this event to cancel action, to set other
            view type or to set other range of dates.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnBeforeViewChange(C1.WPF.Schedule.BeforeViewChangeEventArgs)">
      <summary>
            Raises a BeforeViewChange event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.StyleChanged">
      <summary>
            Occurs immediately after the control style has been changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnStyleChanged">
      <summary>
            Raises a StyleChanged event.
            </summary>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentResize">
      <summary>
            Occurs before an <see cref="T:C1.C1Schedule.Appointment" /> object is resized by end-user.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnBeforeAppointmentResize(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a BeforeAppointmentResize event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentDrop">
      <summary>
            Occurs before an <see cref="T:C1.C1Schedule.Appointment" /> object is dropped by end-user.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnBeforeAppointmentDrop(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a BeforeAppointmentDrop event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.BeforeAppointmentSave">
      <summary>
            Occurs before an <see cref="T:C1.C1Schedule.Appointment" /> is saved by end-user.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnBeforeAppointmentSave(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a BeforeAppointmentResize event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.UserEditingAppointment">
      <summary>
            Occurs before the Edit Appointment dialog appears on the screen for editing
            of an existing appointment, as a result of a double-click on the appointment 
            in one of the default control views, the <see cref="M:C1.WPF.Schedule.C1Scheduler.EditAppointmentDialog(C1.C1Schedule.Appointment)" /> method call,
            or when an <see cref="F:C1.WPF.Schedule.C1Scheduler.EditAppointmentDialogCommand" /> command is received.
            </summary>
      <remarks>
            Use this event to make custom settings to an editing appointment before it
            appears on the screen and/or to implement your own reaction on this event, instead
            of activating a standard dialog window.
            <para>
            In order to change appointment properties before showing the dialog on a screen,
            use the appointment object referenced by the e.Appointment event argument.
            </para><para>
            To prevent activating a standard dialog window, set the e.Handled event argument to True.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnUserEditingAppointment(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a UserEditingAppointment event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.UserClosingAppointment">
      <summary>
            Occurs when user closes Edit Appointment dialog without saving.
            </summary>
      <remarks>
            AppointmentActionEventArgs.Handled property doesn't make sense for this event.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnUserClosingAppointment(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a UserEditingAppointment event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.UserAddingAppointment">
      <summary>
            Occurs before the Edit Appointment dialog appears on the screen as a result of: 
            <list type="bullet"><item>
            a double-click on the control area in one of the default control views,
            </item><item>
            the NewAppointmentDialog method call, 
            </item><item>
            a <see cref="F:C1.WPF.Schedule.C1Scheduler.NewAppointmentDialogCommand" /> command.
            </item></list></summary>
      <remarks>
            Use this event to make custom settings to a new appointment before it
            appears on the screen and/or to implement your own reaction on this event, instead
            of activating a standard dialog window.
            <para>
            In order to change appointment properties before showing the dialog on a screen,
            use the appointment object referenced by the e.Appointment event argument.
            </para><para>
            To prevent activating a standard dialog window, set the e.Handled event argument to True.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnUserAddingAppointment(C1.WPF.Schedule.AddingAppointmentEventArgs)">
      <summary>
            Raises a UserAddingAppointment event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.UserDeletingAppointment">
      <summary>
            Occurs before the currently selected <see cref="T:C1.C1Schedule.Appointment" /> is deleted by a user 
            or as a result of the DeleteAppointment method call 
            or receiving the <see cref="F:C1.WPF.Schedule.C1Scheduler.DeleteAppointmentCommand" /> command.
            </summary>
      <remarks>
            Use this event to make custom actions before appointment deletion and/or to 
            implement your own reaction on this event. To prevent a deletion of the
            appointment, set the e.Handled event argument to True.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnUserDeletingAppointment(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a UserDeletingAppointment event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.AppointmentAdded">
      <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment" /> object is added.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnAppointmentAdded(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a AppointmentAdded event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.AppointmentDeleted">
      <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment" /> object is deleted.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnAppointmentDeleted(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a AppointmentDeleted event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.AppointmentChanged">
      <summary>
            Occurs when an <see cref="T:C1.C1Schedule.Appointment" /> object is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnAppointmentChanged(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a AppointmentChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.AppointmentRecurrenceStateChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Schedule.Appointment.RecurrenceState" /> property of 
            an <see cref="T:C1.C1Schedule.Appointment" /> object is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnAppointmentRecurrenceStateChanged(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a AppointmentRecurrenceStateChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.AppointmentCustomAction">
      <summary>
            Occurs immediately before a custom action of an <see cref="T:C1.C1Schedule.Appointment" /> object executes. 
            </summary>
      <example>
        <code><![CDATA[
            private void c1Scheduler1_AppointmentAdded(object sender, AppointmentActionEventArgs e)
            {
            	// create a new action
            	Action action = new Action();
            	action.Command = "https://www.grapecity.com/en/componentone";
            	// set appointment action
            	e.Appointment.Action = action;
            }
            ]]></code>
      </example>
      <remarks>
            To cancel default handling, set CancelAppointmentEventArgs.Cancel property to true.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnAppointmentCustomAction(C1.WPF.Schedule.AppointmentActionEventArgs)">
      <summary>
            Raises a AppointmentCustomAction event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.ReminderFire">
      <summary>
            Occurs when a reminder set on an appointment fires, before the 
            Reminders dialog will be shown on a screen or activated.
            </summary>
      <remarks>
            Use this event to implement your own reaction on this event, instead
            of activating a standard Reminders window.
            <para>
            To prevent activating a standard window, set the e.Handled event argument to True.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnReminderFire(C1.WPF.Schedule.ReminderActionEventArgs)">
      <summary>
            Raises a ReminderFire event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.ReminderAdded">
      <summary>
            Occurs after a <see cref="T:C1.C1Schedule.Reminder" /> object is added.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnReminderAdded(C1.WPF.Schedule.ReminderActionEventArgs)">
      <summary>
            Raises a ReminderAdded event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.ReminderChanged">
      <summary>
            Occurs after a <see cref="T:C1.C1Schedule.Reminder" /> object is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnReminderChanged(C1.WPF.Schedule.ReminderActionEventArgs)">
      <summary>
            Raises a ReminderChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.ReminderSnooze">
      <summary>
            Occurs when a <see cref="T:C1.C1Schedule.Reminder" /> object is snoozed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnReminderSnooze(C1.WPF.Schedule.ReminderActionEventArgs)">
      <summary>
            Raises a ReminderSnooze event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.ReminderRemoved">
      <summary>
            Occurs when a <see cref="T:C1.C1Schedule.Reminder" /> object is removed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnReminderRemoved(C1.WPF.Schedule.ReminderActionEventArgs)">
      <summary>
            Raises a ReminderRemoved event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.StartChanged">
      <summary>
            Occurs when the <see cref="P:C1.WPF.Schedule.C1Scheduler.Start" /> property value has been changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnStartChanged(C1.WPF.Schedule.DateTimePropertyChangeEventArgs)">
      <summary>
            Raises a StartChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.EndChanged">
      <summary>
            Occurs when the <see cref="P:C1.WPF.Schedule.C1Scheduler.End" /> property value has been changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnEndChanged(C1.WPF.Schedule.DateTimePropertyChangeEventArgs)">
      <summary>
            Raises an EndChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.SelectedDateTimeChanged">
      <summary>
            Occurs when the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedDateTime" /> property value has been changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnSelectedDateTimeChanged(C1.WPF.Schedule.DateTimePropertyChangeEventArgs)">
      <summary>
            Raises a SelectedDateTimeChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="E:C1.WPF.Schedule.C1Scheduler.SelectedAppointmentChanged">
      <summary>
            Occurs when the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedAppointment" /> property value has been changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnSelectedAppointmentChanged(C1.WPF.Schedule.PropertyChangeEventArgsBase)">
      <summary>
            Raises a SelectedAppointmentChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.IsGrouped">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether grouping has been set for the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.IsGroupedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.IsGrouped" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectedGroupItem">
      <summary>
            Gets the selected <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object or returns null if the selection is empty. 
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedGroupItemProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedGroupItem" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.GroupPageSize">
      <summary>
            Gets or sets the <see cref="T:System.Int32" /> value determining the maximum number of the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> objects
            displayed in UI at the same time. Increasing this value might affect performance.
            This is a dependency property.
            </summary>
      <value>The default value is 2.</value>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.GroupPageSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.GroupPageSize" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.CanNavigateNextGroup">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control 
            can be navigated to the next <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.CanNavigateNextGroupProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.CanNavigateNextGroup" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.CanNavigatePreviousGroup">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control 
            can be navigated to the next <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.CanNavigatePreviousGroupProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.CanNavigatePreviousGroup" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.IsTotalGroupItemEnabled">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control generates 
            visual intervals for the total group.
            This is a dependency property. 
            The default value is false.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.IsTotalGroupItemEnabledProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.IsTotalGroupItemEnabled" /> property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.NavigateToPreviousGroupCommand">
      <summary>
            Defines the command that navigates C1Scheduler UI to the previous <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            </summary>
      <remarks>
            Optional command parameter is one of the next values:
            <list type="bullet"><item><term></term><description>"Page" for the page navigation. 
            The page size is determined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.GroupPageSize" /> property value.</description></item><item><term></term><description>"Home" for navigating to the first group.</description></item></list></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.NavigateToNextGroupCommand">
      <summary>
            Defines the command that navigates C1Scheduler UI to the next <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            </summary>
      <remarks>
            Optional command parameter is one of the next values:
            <list type="bullet"><item><term></term><description>"Page" for the page navigation. 
            The page size is determined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.GroupPageSize" /> property value.</description></item><item><term></term><description>"End" for navigating to the last group.</description></item></list></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.HideGroupCommand">
      <summary>
            Defines the command that hides the specified <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            </summary>
      <remarks>
            Command parameter must specify the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object to hide.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.GroupBy">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining the type of grouping.
            </summary>
      <value>The default value is an empty string.</value>
      <remarks>
        <para>
            This property can be equal to one for the next supported keywords:
            <list><item><term>An empty string</term><description>no grouping.</description></item><item><term>"Owner"</term><description>grouping by Appointment.Owner property value.</description></item><item><term>"Category"</term><description>grouping by Appointment.Categories property value.</description></item><item><term>"Contact"</term><description>grouping by Appointment.Links property value.</description></item><item><term>"Resource"</term><description>grouping by Appointment.Resources property value.</description></item></list></para>
      </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ShowEmptyGroupItem">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control
            should display an empty group item.
            </summary>
      <value>The default value is false.</value>
      <remarks>
            This property only makes sense when the <see cref="P:C1.WPF.Schedule.C1Scheduler.GroupBy" /> property is set.
            If this property is set to True, the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control will display a group item 
            without assigned owner (resource, contact or category). This group item will contain all appointments, 
            which don't fall into other group items. 
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.GroupItems">
      <summary>
            Gets a collection of all available <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> objects for the currently set type of grouping.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisibleGroupItems">
      <summary>
            Gets a collection of currently visible <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> objects.
            This collection can be used in xaml in the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control templates.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.TotalGroupItem">
      <summary>
            Gets the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object representing the group item which has no owner,
            but contains appointments of all visible group items.
            </summary>
      <remarks> It is a special group item, it is not included into GroupItems and VisibleGroupItems collections.
            The <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control uses this group to display availability status line in the default TimeLineStyle
            (see source xaml for the sample of using).
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.NavigateToGroup(System.Int32)">
      <summary>
            If the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control is grouped, makes sure that the group with the specified index is visible in the UI.
            </summary>
      <param name="index">The index of group in the <see cref="P:C1.WPF.Schedule.C1Scheduler.GroupItems" /> collection.</param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnInitialized(System.EventArgs)">
      <summary>
            Rebuilds UI after initializing.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.Dispose">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.TodayBackground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to color current day.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.TodayBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.TodayBackground" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.CurrentTimeBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to color the current time.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.CurrentTimeBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.CurrentTimeBrush" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ControlBackground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object that is the face color of a control (Time Ruler, Month View header, etc.). 
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ControlBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.ControlBackground" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ControlForeground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object that is the text color in a control (Time Ruler, Month View header, etc.). 
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ControlForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.ControlForeground" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.AppointmentForeground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used as a foreground for appointment elements. 
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AppointmentForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.AppointmentForeground" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.AlternatingBackground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used as background for working hours and days of alternating months.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.AlternatingBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.AlternatingBackground" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectedBackground">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object used to highlight currently selected day.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectedBackground" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.BackgroundProperty">
      <summary>
            Identifies the Background dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.DefaultThemeKey">
      <summary>
            Gets the <see cref="T:System.Windows.ComponentResourceKey" /> that references the default theme 
            that is defined for the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
      <remarks>
            You can use this read-only static field in XAML by assigning its 
            value to another property value. 
            Specifically, this field's value defines the <see cref="T:System.Windows.ComponentResourceKey" /> 
            that is used to look up the default theme. 
            To redefine this theme, reference the <see cref="F:C1.WPF.Schedule.C1Scheduler.DefaultThemeKey" /> by using the 
            x:Static Markup Extension and assign that value as the x:Key Attribute of 
            the new <see cref="T:System.Windows.ResourceDictionary" /> object.
            You can use this field in XAML as an x:Key Attribute 
            of a <see cref="T:System.Windows.ResourceDictionary" /> that redefines the theme for the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            <example><code><![CDATA[
            <Application.Resources>
            	<ResourceDictionary>
            		<ResourceDictionary x:Key="{x:Static c1sched:C1Scheduler.DefaultThemeKey}"
            							Source="/C1.WPF.Schedule.4;component/themes/SchedulerThemes/Office2007/Silver.xaml" />
            	</ResourceDictionary>
            </Application.Resources> 
            ]]></code></example></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ThemeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.Theme" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.Theme">
      <summary>
            Gets or sets a <see cref="T:System.Windows.ResourceDictionary" /> object containing Scheduler theme resources.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ViewType">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.ViewType" /> value determining what style should be used in the control.
            </summary>
      <remarks>This property does the same thing as <see cref="M:C1.WPF.Schedule.C1Scheduler.ChangeStyle(System.Object)" /> method and <see cref="F:C1.WPF.Schedule.C1Scheduler.ChangeStyleCommand" />. 
            Use it for simpler switching between different views. The relationship between tis property value and the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control styles:
            <list type="bullet"><item>Month (default) - the style defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.MonthStyle" /> property;</item><item>Day - the style defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.OneDayStyle" /> property;</item><item>WorkingWeek - the style defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.WorkingWeekStyle" /> property;</item><item>Week - the style defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.WeekStyle" /> property;</item><item>Custom - the custom style, set by custom code or xaml.</item></list></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ViewTypeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.ViewType" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.OneDayStyle">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Style" /> object that defines a UI representation of
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control in a Day View mode. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.OneDayStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.OneDayStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.WorkingWeekStyle">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Style" /> object that defines a UI representation of
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control in a Work Week View mode. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.WorkingWeekStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.WorkingWeekStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.WeekStyle">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Style" /> object that defines a UI representation of
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control in a Week View mode. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.WeekStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.WeekStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.TimeLineStyle">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Style" /> object that defines a UI representation of the
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control in a Time Line mode. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.TimeLineStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.TimeLineStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.MonthStyle">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Style" /> object that defines a UI representation of
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control in a Month View mode. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.MonthStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.MonthStyle" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI representation of
            <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects from the VisualIntervals
            collection. This is a dependency property.
            </summary>
      <remarks>
            A DataContext for this template is a <see cref="T:C1.WPF.Schedule.VisualInterval" /> object from
            the VisualIntervals collection.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualIntervalTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalPanel">
      <summary>
            Gets or sets a ItemsPanelTemplate that defines the panel that lays out elements
            representing <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects from the VisualIntervals collection. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualIntervalPanelProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalPanel" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.IntervalAppointmentTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI representation of
            an <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> object. This is a dependency property.
            </summary>
      <remarks>
            A single appointment can be represented by multiple elements in control's view.
            For example, in the Months view the appointment that hit two weeks will be 
            represented by two separate elements, a different element for each week.
            Because of this, a DataContext for the appointment template is a 
            <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> object (but not an <see cref="T:C1.C1Schedule.Appointment" /> object), 
            which represents the chunk of
            appointment covering a specific period of time that can be shown by a
            single UI element.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.IntervalAppointmentTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.IntervalAppointmentTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.GroupHeaderTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI representation of
            the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object header. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.GroupHeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.GroupHeaderTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.EditAppointmentTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI for the Edit Appointment dialog. 
            This is a dependency property.
            </summary>
      <remarks>
            A DataContext for this template is an <see cref="T:C1.C1Schedule.Appointment" /> object.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.EditAppointmentTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.EditAppointmentTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.EditRecurrenceTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI for the Edit Recurrence dialog. 
            This is a dependency property.
            </summary>
      <remarks>
            A DataContext for this template is a <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.EditRecurrenceTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.EditRecurrenceTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ShowRemindersTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI for the Show Reminders dialog. 
            This is a dependency property.
            </summary>
      <remarks>
            A DataContext for this template is a <see cref="P:C1.C1Schedule.C1ScheduleStorage.Reminders" /> 
            collection.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ShowRemindersTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.ShowRemindersTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.SelectFromListTemplate">
      <summary>
            Gets or sets a DataTemplate that defines a UI for the dialog like
            Select Resources, Select Categories and Select Contacts. 
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SelectFromListTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.SelectFromListTemplate" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupStyles">
      <summary>
            Gets or sets a collection of <see cref="T:System.Windows.Controls.GroupStyle" />
            objects that characterize UI for each group level defined in the
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupDescriptions" /> collection. 
            This is a dependency property. 
            </summary>
      <remarks>
            A DataContext for GroupStyle.HeaderTemplate template of each GroupStyle item
            of this collection is a <see cref="T:C1.WPF.Schedule.VisualIntervalGroup" /> object, which 
            represents a time range which is a union of time ranges of group's child
            <see cref="T:C1.WPF.Schedule.VisualInterval" />s.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupStylesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupStyles" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ViewStyleSelector">
      <summary>
            Enables you to provide custom style-selection logic for a style that 
            should be applied to the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control. 
            The default value is a null reference. 
            This is a dependency property. 
            </summary>
      <remarks> The <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control has 4 styles:
            <list type="bullet"><item>One Day View (defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.OneDayStyle" /> property);</item><item>Working Week View (defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.WorkingWeekStyle" /> property);</item><item>Week View (defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.WeekStyle" /> property);</item><item>Month View (defined by the <see cref="P:C1.WPF.Schedule.C1Scheduler.MonthStyle" /> property).</item></list>
            By default, the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control changes it's style 
            automatically according to changes in the list of visible dates or on 
            <see cref="F:C1.WPF.Schedule.C1Scheduler.ChangeStyleCommand" /> command. You can alter this behavior by providing
            the custom StyleSelector or by handling <see cref="E:C1.WPF.Schedule.C1Scheduler.BeforeViewChange" /> event.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ViewStyleSelectorProperty">
      <summary>
            Identifies the <see cref="T:System.Windows.Controls.StyleSelector" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.SettingsProperty">
      <summary>
            Identifies the <see cref="T:C1.WPF.Schedule.C1SchedulerSettings" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.Settings">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.Schedule.C1SchedulerSettings" /> object 
            which provides <see cref="T:C1.WPF.Schedule.C1Scheduler" /> settings properties.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.CalendarHelper">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.Schedule.C1Scheduler.CalendarHelper" /> object 
            which provides calendar-dependant properties.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.CalendarHelperProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.CalendarHelper" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.DayViewDayHeaderFormat">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining format 
            used to display day header in a Day view.
            The default value is 'dddd MMM d'.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.DayViewDayHeaderFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.DayViewDayHeaderFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.WeekViewDayHeaderFormat">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining the format string
            used to display the day header in a Week view. The default value is 'D'.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.WeekViewDayHeaderFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.WeekViewDayHeaderFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.MonthViewDayHeaderMonthFormat">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining format 
            used to display month name in a day header of a Month view.
            The default value is 'MMMM'.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.MonthViewDayHeaderMonthFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.MonthViewDayHeaderMonthFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.MonthViewDayHeaderDayFormat">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining format 
            used to display day name in a day header of a Month view.
            The default value is '%d'.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.MonthViewDayHeaderDayFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.MonthViewDayHeaderDayFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.MonthViewHeaderFormat">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining format 
            used to display day names in a Month view header.
            The default value is 'dddd'.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.MonthViewHeaderFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.MonthViewHeaderFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.TimeFormat">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining time format 
            used to display time ruler in a Day, Week and Work Week views.
            The default value is an empty string. In such case C1Scheduler takes default time format from the current culture.
            This is a dependency property.
            </summary>
      <remarks>
            Don't use general formats as "T" for this property. Use detailed format string such as "h:mm tt" or "HH:mm".
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.TimeFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.TimeFormat" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.PreviousAppointmentText">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used as text for the 'Previous Appointment' navigation pane.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.PreviousAppointmentTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.PreviousAppointmentText" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.NextAppointmentText">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used as text for the 'Next Appointment' navigation pane.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.NextAppointmentTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.NextAppointmentText" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.EmptyGroupName">
      <summary>
            Gets or sets a <see cref="T:System.String" /> value used as default value for the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.Name" /> property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.EmptyGroupNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.EmptyGroupName" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.AppointmentComparison">
      <summary>
            Gets or sets the <see cref="T:System.Comparison`1" /> delegate which is used by 
            the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control to sort appointments.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.Compare(C1.C1Schedule.Appointment,C1.C1Schedule.Appointment)">
      <summary>
            Performs a comparison of two <see cref="T:C1.C1Schedule.Appointment" /> objects based on their start time and subject. 
            </summary>
      <param name="x">The first <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <param name="y">The second <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <returns>The <see cref="T:System.Int32" /> value determining the comparison result.</returns>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.StatusComparison">
      <summary>
            Gets or sets the <see cref="T:System.Comparison`1" /> delegate which is used by 
            the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control to compare availability statuses.
            </summary>
      <remarks>This comparision is used to determine <see cref="P:C1.WPF.Schedule.VisualInterval.StatusBrush" /> 
            and <see cref="P:C1.WPF.Schedule.VisualInterval.TotalStatusBrush" /> property values.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.Compare(C1.C1Schedule.Status,C1.C1Schedule.Status)">
      <summary>
            Performs a comparison of two <see cref="T:C1.C1Schedule.Status" /> objects based on their <see cref="P:C1.C1Schedule.Status.StatusType" /> property value. 
            </summary>
      <param name="x">The first <see cref="T:C1.C1Schedule.Status" /> to compare.</param>
      <param name="y">The second <see cref="T:C1.C1Schedule.Status" /> to compare.</param>
      <returns>The <see cref="T:System.Int32" /> value determining the comparison result.</returns>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.IsDragDropDisabled">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value that indicates whether 
            the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> doesn't allow appointment resizing and drag operations. 
            This is a dependency property.
            </summary>
      <remarks>Disabling of appointment resizing and drag operations is implemented with the help of 
            <see cref="P:C1.WPF.Schedule.CoverElementsPane.IsDragDropDisabled" /> property in default styles and templates.
            Make sure to honor <see cref="P:C1.WPF.Schedule.C1Scheduler.IsDragDropDisabled" /> property value 
            in custom styles and templates.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.IsDragDropDisabledProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.IsDragDropDisabled" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.IsInPlaceEditingDisabled">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value that indicates whether
            in-place editing of appointments is enabled for an end-user.
            This is a dependency property.
            </summary>
      <remarks>This value only affects a user who is interacting with the control. 
            All data can always be modified programmatically.
            Note: disabling of in-place editing is implemented with the help of 
            <see cref="P:C1.WPF.Schedule.AppointmentWrapPanel.IsReadOnly" /> property in default IntervalAppointment templates.
            Make sure to honor <see cref="P:C1.WPF.Schedule.C1Scheduler.IsInPlaceEditingDisabled" /> property value 
            in custom IntervalAppointment templates.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.IsInPlaceEditingDisabledProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.IsInPlaceEditingDisabled" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ShowWorkTimeOnly">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether control
            shows working time only. This is a dependency property.
            This property affects Day/Work Week views or any custom view 
            which has <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale" /> value less than one day.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ShowWorkTimeOnlyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.ShowWorkTimeOnly" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1Scheduler.ShowNavigationPanels">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether control
            should show navigation panels. This is a dependency property.
            The default value is True.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.C1Scheduler.ShowNavigationPanelsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.C1Scheduler.ShowNavigationPanels" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="oldParent">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.EditRecurrenceDialog(C1.C1Schedule.Appointment)">
      <summary>
            Shows the Edit Recurrence dialog for editing a <see cref="T:C1.C1Schedule.RecurrencePattern" />
            of the specified <see cref="T:C1.C1Schedule.Appointment" />.
            </summary>
      <param name="appointment">
        <see cref="T:C1.C1Schedule.Appointment" /> whose <see cref="T:C1.C1Schedule.RecurrencePattern" /> will be edited
            in the dialog.
            </param>
      <remarks>
            This methods implements the <see cref="F:C1.WPF.Schedule.C1Scheduler.EditRecurrenceDialogCommand" /> command.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.SelectFromListDialog(System.Collections.IList,System.Collections.IList,System.Type,C1.C1Schedule.Appointment,System.String)">
      <summary>
            Shows the Select From List dialog. Honors property values defined in the <see cref="P:C1.WPF.Schedule.C1Scheduler.Settings" /> object.
            </summary>
      <param name="sourceList">The source list.</param>
      <param name="targetList">The target list.</param>
      <param name="itemType">The type of items in both lists.</param>
      <param name="app">The appointment object, for which the dialog is shown.</param>
      <param name="windowTitle">The dialog title.</param>
    </member>
    <member name="M:C1.WPF.Schedule.C1Scheduler.SelectFromListDialog(System.Collections.IList,System.Collections.IList,System.Type,C1.C1Schedule.Appointment,System.String,System.Boolean,System.Boolean)">
      <summary>
            Shows the Select From List dialog.
            </summary>
      <param name="sourceList">The source list.</param>
      <param name="targetList">The target list.</param>
      <param name="itemType">The type of items in both lists.</param>
      <param name="app">The appointment object, for which the dialog is shown.</param>
      <param name="windowTitle">The dialog title.</param>
      <param name="allowEdit">Determines whether the dialog should allow source collection editing.</param>
      <param name="allowMultipleSelection">Determines whether multiple selection is allowed.</param>
    </member>
    <member name="T:C1.WPF.Schedule.C1SchedulerPresenter">
      <summary>
            An instance of this class is used in the C1Scheduler's template
            visual tree to define a place where a pane representing schedule time intervals 
            will appear.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerPresenter.AttachSchedulerEvents">
      <summary>
            Attaches presenter to the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerPresenter.DetachFromScheduler(C1.WPF.Schedule.C1Scheduler)">
      <summary>
            Detaches presenter from the specified <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
      <param name="scheduler">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerPresenter.SelectItems(System.DateTime,System.DateTime)">
      <summary>
            Selects all items from time interval determined by the specified start and end values.
            </summary>
      <param name="start">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerPresenter.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>True if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ViewType">
      <summary>
            Determine the view type which should be used in the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ViewType.Month">
      <summary>
            Month.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ViewType.Day">
      <summary>
            Day.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ViewType.WorkingWeek">
      <summary>
            Working Week.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ViewType.Week">
      <summary>
            Week.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ViewType.TimeLine">
      <summary>
            Time Line.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ViewType.Custom">
      <summary>
            Custom style.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.ThemeResources">
      <summary>
            The <see cref="T:C1.WPF.Schedule.ThemeResources" /> class is a base abstract class for ThemeResources classes. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ThemeResources.RefreshResources">
      <summary>
            When overridden in a derived class, refreshes class properties from the current theme resources.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ThemeResources.Theme">
      <summary>
            Gets or sets the <see cref="T:System.Windows.ResourceDictionary" /> object used as the theme for the control.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.C1SchedulerResources">
      <summary>
            The <see cref="T:C1.WPF.Schedule.C1SchedulerResources" /> keeps the set of resources used by the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            Static fields of this class return default C1Scheduler's themes.
            </summary>
      <remarks>
            Resource lookup behavior:
            <list type="bullet"><item>
            If Theme property is set to something other than default Office 2007 Blue theme, the lookup 
            process checks for the requested key within the resource dictionary defined by the current control theme
            </item><item>
            The lookup process checks resources in a usual way (in page, window or application resources)
            </item><item>
            The lookup process checks resources in default theme dictionary.
            </item></list></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.C1SchedulerResources.Office2007Default">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2007 Default theme.
            This is a default theme for <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2007Blue">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2007 Blue theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2007Black">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2007 Black theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2007Silver">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2007 Silver theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2010Blue">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2010 Blue theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2010Black">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2010 Black theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2010Silver">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2010 Silver theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2016Black">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2016 Black theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2016White">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2016 White theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2016Colorful">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2016 Colorful theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Office2016DarkGray">
      <summary>
            Gets the ResourceDictionary representing C1Scheduler Office 2016 Dark Gray theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.DuskBlue">
      <summary>
            Obsolete. Gets the ResourceDictionary representing C1Scheduler Dusk Blue theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.DuskGreen">
      <summary>
            Obsolete. Gets the ResourceDictionary representing C1Scheduler Dusk Green theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Vista">
      <summary>
            Obsolete. Gets the ResourceDictionary representing C1Scheduler Vista theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.MediaPlayer">
      <summary>
            Obsolete. Gets the ResourceDictionary representing C1Scheduler Media Player theme.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerResources.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.C1SchedulerResources" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.Theme">
      <summary>
            Gets or sets the <see cref="T:System.Windows.ResourceDictionary" /> object used as the theme 
            for the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerResources.RefreshResources">
      <summary>
            Refreshes resources according to the currently selected theme.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.OneDayStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing One Day view of <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.WorkingWeekStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing Working Week view of <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.WeekStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing Week view of <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.MonthStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing Month view of <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.EditAppointmentTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> object used in Edit(New) Appointment dialogs.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.ShowRemindersTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> object used in Show Reminders window.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.IntervalAppointmentTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> object used for displaying Appointment objects.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.SelectFromListTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> object used for displaying Resources, Contacts and Categories dialogs.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.TimeLineStyle">
      <summary>
            Gets the <see cref="T:System.Windows.Style" /> object describing Time Line view of <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.EditRecurrenceTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> object used in Edit Recurrence dialog.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerResources.GroupHeaderTemplate">
      <summary>
            Gets the <see cref="T:System.Windows.DataTemplate" /> object used for displaying SchedulerGroupItem header.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.C1SchedulerSettings">
      <summary>
            Determines auxiliary properties providing different <see cref="T:C1.WPF.Schedule.C1Scheduler" /> object settings.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.C1SchedulerSettings" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.ShowReminderDialog">
      <summary>
            Determines whether control should display embedded reminder dialog when reminder is fired.
            </summary>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AllowContactsEditing">
      <summary>
            Determines whether end-user has permission to edit Contacts.
            </summary>
      <remarks>If this property is false, default dialogs will only allow selection from the existing items. 
            If this property is false and ContactCollection is empty, default Appointment dialog won't 
            show controls for editing Contacts.</remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AllowContactsMultiSelection">
      <summary> 
            Determines whether multiple Contact objects might be assigned to the single Appointment object.
            </summary>
      <remarks>
        <para>If both <see cref="P:C1.WPF.Schedule.C1SchedulerSettings.AllowContactsMultiSelection" /> and <see cref="P:C1.WPF.Schedule.C1SchedulerSettings.AllowContactsEditing" />
            properties are false, the default Appointment dialog will show ComboBox for selecting single Contact object.
            </para>
        <para>
            If this property is true, the default Appointment dialog will allow selecting multiple contacts in a separate dialog.
            </para>
      </remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AllowResourcesEditing">
      <summary>
            Determines whether end-user has permission to edit Resources.
            </summary>
      <remarks>If this property is false, default dialogs will only allow selection from the existing items. 
            If this property is false and ResourceCollection is empty, default Appointment dialog won't 
            show controls for editing Resources.</remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AllowResourcesMultiSelection">
      <summary> 
            Determines whether multiple Resource objects might be assigned to the single Appointment object.
            </summary>
      <remarks>
        <para>If both <see cref="P:C1.WPF.Schedule.C1SchedulerSettings.AllowResourcesMultiSelection" /> and <see cref="P:C1.WPF.Schedule.C1SchedulerSettings.AllowResourcesEditing" />
            properties are false, the default Appointment dialog will show ComboBox for selecting single Resource object.
            </para>
        <para>
            If this property is true, the default Appointment dialog will allow selecting multiple resources in a separate dialog.
            </para>
      </remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AllowCategoriesEditing">
      <summary>
            Determines whether end-user has permission to edit Categories.
            </summary>
      <remarks>If this property is false, default dialogs will only allow selection from the existing items. 
            If this property is false and CategoryCollection is empty, default Appointment dialog won't 
            show controls for editing Categories.</remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AllowCategoriesMultiSelection">
      <summary> 
            Determines whether multiple Category objects might be assigned to the single Appointment object.
            </summary>
      <remarks>
        <para>If both <see cref="P:C1.WPF.Schedule.C1SchedulerSettings.AllowCategoriesMultiSelection" /> and <see cref="P:C1.WPF.Schedule.C1SchedulerSettings.AllowCategoriesEditing" />
            properties are false, the default Appointment dialog will show ComboBox for selecting single Category object.
            </para>
        <para>
            If this property is true, the default Appointment dialog will allow selecting multiple categories in a separate dialog.
            </para>
      </remarks>
      <value>The default value is true.</value>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AppointmentDialogSize">
      <summary>
            Gets or sets the size of the Appointment dialog. 
            </summary>
      <remarks>Note, Appointment dialog is resizable, so this property might be changed at run time if end-user resizes the window.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AppointmentDialogMinSize">
      <summary>
            Gets or sets the minimum size of the Appointment dialog. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.FirstVisibleTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value representing
            the first visible time slot in a Day/Work Week views or in any custom view 
            which has a <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale" /> value of less than one day.
            </summary>
      <remarks>This property only affects initial scroll position.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.AutoScrollToFirstAppointment">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether control
            scrolls itself to the earliest appointment in the current view.
            This property affects Day/Work Week views or any custom view 
            which has <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale" /> value less than one day.
            </summary>
      <remarks>This property affects only initial scroll position.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.SetReminder">
      <summary>
            Gets or sets whether reminder should be set for the newly created appointments. The default value is true.
            </summary>
      <remarks>This property only affects initial setting. End-user will be able to change reminder settings
            for every individual <see cref="T:C1.C1Schedule.Appointment" /> object.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.ReminderTimeBeforeStart">
      <summary>
            Gets or sets the default <see cref="T:System.TimeSpan" /> value which should be used as initial value for the 
            <see cref="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart" /> property. The default value is 15 minutes.
            </summary>
      <remarks>You should honor this property if you create appointments from code.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerSettings.UseMouseWheelForGroupNavigation">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining whether mouse wheel 
            in the TimeLine view should be used for group navigation.
            The default value is false.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.C1SchedulerViewModel">
      <summary>
            Represents the bridge between the view and the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control. 
            </summary>
      <remarks>The <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control creates the <see cref="T:C1.WPF.Schedule.C1SchedulerViewModel" /> object and uses it as a DataContext. 
            You can use this DataContext in the custom ControlTemplates for the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerViewModel.Scheduler">
      <summary>
            Gets the reference to the owning <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerViewModel.GroupItems">
      <summary>
            Gets a collection of all available <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> objects for the currently set type of grouping.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerViewModel.VisibleGroupItems">
      <summary>
            Gets a collection of currently visible <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> objects.
            This collection can be used in xaml in the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control templates.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.C1SchedulerViewModel.TotalGroupItem">
      <summary>
            Gets the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object representing the group item which has no owner,
            but contains appointments of all visible group items.
            </summary>
      <remarks> It is a special group item, it is not included into GroupItems and VisibleGroupItems collections.
            The <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control uses this group to display availability status line in the default TimeLineStyle
            (see source xaml for the sample of using).
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerViewModel.FindUIForTime(System.DateTime)">
      <summary>
            Returns the <see cref="T:System.Windows.FrameworkElement" /> corresponding to the given <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="time">The <see cref="T:System.DateTime" /> value to find the <see cref="T:System.Windows.FrameworkElement" /> for.</param>
      <returns>A <see cref="T:System.Windows.FrameworkElement" /> that corresponds to the given <see cref="T:System.DateTime" /> value. 
            Returns null if the <see cref="T:System.DateTime" /> value does not belong to displayed range, 
            or if a <see cref="T:System.Windows.FrameworkElement" /> has not been generated for it.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerViewModel.Dispose">
      <summary>
            Clean up any resources being used.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.C1SchedulerViewModel.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.WPF.Schedule.DeferrableObservableCollection`1">
      <summary>
            The <see cref="T:C1.WPF.Schedule.DeferrableObservableCollection`1" /> represents an
            <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> supported deferring events during the massive 
            collection changes.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:C1.WPF.Schedule.DeferrableObservableCollection`1.BeginUpdate">
      <summary>
            Prevents raising events until the <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.EndUpdate" /> method is called. 
            </summary>
      <remarks>The <see cref="T:C1.WPF.Schedule.DeferrableObservableCollection`1" /> keeps count 
            of calls to <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.BeginUpdate" /> method. 
            Be sure to call <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.EndUpdate" /> method for each call to <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.BeginUpdate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.DeferrableObservableCollection`1.EndUpdate">
      <summary>
            Enables raising events. If collection has been changed since the call 
            to the <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.BeginUpdate" /> method, raises PropertyChanged and CollectionChanged events.
            </summary>
      <remarks>The <see cref="T:C1.WPF.Schedule.DeferrableObservableCollection`1" /> keeps count 
            of calls to <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.BeginUpdate" /> method. 
            Be sure to call <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.EndUpdate" /> method for each call to <see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.BeginUpdate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.DeferrableObservableCollection`1.InUpdate">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.WPF.Schedule.DeferrableObservableCollection`1" />
            is in update mode (<see cref="M:C1.WPF.Schedule.DeferrableObservableCollection`1.BeginUpdate" /> has been called).
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DeferrableObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.DeferrableObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.ObservableCollectionStringConverter">
      <summary>
            The <see cref="T:C1.WPF.Schedule.ObservableCollectionStringConverter" /> provides a type converter 
            to convert <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> objects to and from various other representations. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ObservableCollectionStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>True if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ObservableCollectionStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>True if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ObservableCollectionStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ObservableCollectionStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.IntervalAppointment">
      <summary>
            Represents an <see cref="P:C1.WPF.Schedule.IntervalAppointment.Appointment" /> in a <see cref="T:C1.WPF.Schedule.VisualInterval" />.
            </summary>
      <remarks>
            A single <see cref="P:C1.WPF.Schedule.IntervalAppointment.Appointment" /> may cover multiple time intervals represented by 
            <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects from the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.VisualIntervals" /> collection. 
            The <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> object represents an <see cref="P:C1.WPF.Schedule.IntervalAppointment.Appointment" />
            belonging to a certain <see cref="P:C1.WPF.Schedule.IntervalAppointment.Interval" />.
            <para>
            The <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> objects are used as DataContext for
            the <see cref="P:C1.WPF.Schedule.C1Scheduler.IntervalAppointmentTemplate" /> DataTemplate.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.IntervalAppointment.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.IntervalAppointment.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.IntervalAppointment.IsSelectedAppointmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.IntervalAppointment.IsSelectedAppointment" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.IntervalAppointment.Interval">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.VisualInterval" /> that intersects with an <see cref="P:C1.WPF.Schedule.IntervalAppointment.Appointment" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.IntervalAppointment.Appointment">
      <summary>
            Gets an <see cref="P:C1.WPF.Schedule.IntervalAppointment.Appointment" /> that is intersected with a <see cref="T:C1.WPF.Schedule.VisualInterval" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.IntervalAppointment.IsSelected">
      <summary>
            Gets or sets a value that determines whether the UI element that has this 
            <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> as a DataContext is selected.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.IntervalAppointment.IsSelectedAppointment">
      <summary>
            Gets or sets a value that determines whether the <see cref="P:C1.WPF.Schedule.IntervalAppointment.Appointment" />
            is selected in <see cref="T:C1.WPF.Schedule.C1Scheduler" /> UI.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.IntervalAppointmentCollection">
      <summary>
            The <see cref="T:C1.WPF.Schedule.IntervalAppointmentCollection" /> class is a
            <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> collection 
            of <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> objects belonging to a certain <see cref="T:C1.WPF.Schedule.VisualInterval" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IntervalAppointmentCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{C1.WPF.Schedule.IntervalAppointment})">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.IntervalAppointmentCollection" /> class.
            </summary>
      <param name="list">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> object.</param>
    </member>
    <member name="P:C1.WPF.Schedule.IntervalAppointmentCollection.HasItems">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value specifying whether collection has items.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IntervalAppointmentCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Refreshes the <see cref="P:C1.WPF.Schedule.IntervalAppointmentCollection.HasItems" /> property value.
            </summary>
      <param name="args">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.VisualIntervalGroupDescription">
      <summary>
            Represents a grouping criteria for a collection of <see cref="T:C1.WPF.Schedule.VisualInterval" />
            objects.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalGroupDescription.#ctor">
      <summary>
            Creates a <see cref="T:C1.WPF.Schedule.VisualIntervalGroupDescription" /> instance.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>
            Overrides the behavior of the GroupDescription.GroupNameFromItem method.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalGroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>
            Overrides the behavior of the GroupDescription.NamesMatch method.
            </summary>
      <param name="groupName">
      </param>
      <param name="itemName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalGroupDescription.PropertyNames">
      <summary>
            Gets or sets a collection of property paths defining a group.
            </summary>
      <remarks>
            This property value can be defined in XAML as a string with property
            paths separated by comma or semicolon.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalGroupDescription.PropertyName">
      <summary>
            Gets or sets a property path defining a group.
            </summary>
      <remarks>
            This property value can be defined in XAML as a string with property path.
            </remarks>
    </member>
    <member name="T:C1.WPF.Schedule.IntervalGroupDescriptionCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.Schedule.VisualIntervalGroupDescription" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IntervalGroupDescriptionCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.IntervalGroupDescriptionCollection" /> class.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.IntervalGroupStyleCollection">
      <summary>
            Represents a collection of <see cref="T:System.Windows.Controls.GroupStyle" /> objects.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.VisualIntervalGroup">
      <summary>
            Instances of this class appear as DataContext for the <see cref="T:C1.WPF.Schedule.C1Scheduler" />
            group headers defined in the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupStyles" />
            collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalGroup.Group">
      <summary>
            Gets a <see cref="T:System.Windows.Data.CollectionViewGroup" /> object representing a group item.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalGroup.Items">
      <summary>
            Gets a <see cref="P:System.Windows.Data.CollectionViewGroup.Items" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalGroup.VisualIntervals">
      <summary>
            Gets a collection of child <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.TimeSlotGroupStyleSelector">
      <summary>
            This class provides a way to apply time slot group styles for working/free hours
            in DayView/WorkWeekView modes.
            </summary>
      <remarks>For the sample of using look at OneDayStyleBase in generic.xaml.
            <list type="number"><item><para>Create an instance of this class:</para><para> &lt;local:TimeSlotGroupStyleSelector x:Key="TimeSlotGroupStyleSelector"/&gt;</para></item><item>
            Define two group styles:
            <list type="bullet"><item>
            with the key "PART_C1Scheduler_WorkHour_Style" for work hours; 
            </item><item>
            with the key "PART_C1Scheduler_FreeHour_Style" for free hours.    
            </item></list></item><item><para>Specify style selector in the group definition:</para><para> &lt;GroupStyle ContainerStyleSelector="{StaticResource TimeSlotGroupStyleSelector}"&gt;</para></item></list></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.TimeSlotGroupStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
      <summary>
            Returns the <see cref="T:System.Windows.Style" /> object for the specified group if it is found in resources.
            </summary>
      <param name="item">The content.</param>
      <param name="container">The element to which the style will be applied.</param>
      <returns>Returns an application-specific style to apply; 
            otherwise, a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DayGroupStyleSelector">
      <summary>
            This class provides a way to apply day group styles in DayView/WorkWeekView modes.
            </summary>
      <remarks>For the sample of using look at OneDayStyle in themes/SchedulerThemes/Office2007/Blue.xaml.
            <list type="number"><item><para>Create an instance of this class:</para><para> &lt;local:DayGroupStyleSelector x:Key="DayGroupStyleSelector"/&gt;</para></item><item>
            Define two group styles:
            <list type="bullet"><item>
            with the key "PART_C1Scheduler_Day_Style" for ordinal day style; 
            </item><item>
            with the key "PART_C1Scheduler_Today_Style" for the current day style.    
            </item></list></item><item><para>Specify style selector in the group definition:</para><para> &lt;GroupStyle ContainerStyleSelector="{StaticResource DayGroupStyleSelector}"/&gt;</para></item></list></remarks>
    </member>
    <member name="M:C1.WPF.Schedule.DayGroupStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
      <summary>
            Returns the <see cref="T:System.Windows.Style" /> object for the specified group if it is found in resources.
            </summary>
      <param name="item">The content.</param>
      <param name="container">The element to which the style will be applied.</param>
      <returns>Returns an application-specific style to apply; 
            otherwise, a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:C1.WPF.Schedule.TimeSlotTemplateSelector">
      <summary>
            This class provides a way to choose a DataTemplate for the <see cref="T:C1.WPF.Schedule.VisualInterval" /> 
            object representing the single time slot in DayView/WorkWeekView modes.
            </summary>
      <remarks>For the sample of using look at OneDayStyleBase in generic.xaml.
            <list type="number"><item><para>Create an instance of this class:</para><para> &lt;local:TimeSlotTemplateSelector x:Key="TimeSlotTemplateSelector"/&gt;</para></item><item>
            Define two DataTemplates:
            <list type="bullet"><item>
            with the key "PART_C1Scheduler_FreeSlot_Template" for free time; 
            </item><item>
            with the key "PART_C1Scheduler_WorkSlot_Template" for working time.    
            </item></list></item><item><para>Specify ItemsControl.ItemTemplateSelector for the <see cref="T:C1.WPF.Schedule.C1SchedulerPresenter" /> object:</para><para> &lt;local:C1SchedulerPresenter ItemTemplateSelector="{StaticResource TimeSlotTemplateSelector}" /&gt;</para></item></list>
            Note, that if you use this method for choosing VisualInterval DataTemplate, you shouldn't set
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalTemplate" /> property. 
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.TimeSlotTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
      <summary>
            Returns the <see cref="T:System.Windows.DataTemplate" /> object for the specified group if it is found in resources.
            </summary>
      <param name="item">The data object for which to select the template.</param>
      <param name="container">The data-bound object.</param>
      <returns>Returns a DataTemplate or a null reference (Nothing in Visual Basic). 
            The default value is a null reference (Nothing in Visual Basic). </returns>
    </member>
    <member name="T:C1.WPF.Schedule.DayIntervalStyleSelector">
      <summary>
            This class provides a way to apply day group styles for ordinal/current days.
            </summary>
      <remarks>For the sample of using look at OneDayStyleBase in generic.xaml.
            <list type="number"><item><para>Create an instance of this class:</para><para> &lt;local:DayIntervalStyleSelector x:Key="DayIntervalStyleSelector"/&gt;</para></item><item>
            Define two group styles:
            <list type="bullet"><item>
            with the key "C1Scheduler_Day_Style" for ordinal days; 
            </item><item>
            with the key "C1Scheduler_Today_Style" for the current day.    
            </item></list></item><item><para>Specify style selector in the group definition:</para><para> &lt;GroupStyle ContainerStyleSelector="{StaticResource DayIntervalStyleSelector}"&gt;</para></item></list></remarks>
    </member>
    <member name="T:C1.WPF.Schedule.TimeSlotStyleSelector">
      <summary>
            This class provides a way to apply time slot styles for working/free hours
            in DayView/WorkWeekView modes.
            </summary>
      <remarks>For the sample of using look at OneDayStyle in generic.xaml.
            <list type="number"><item><para>Create an instance of this class:</para><para> &lt;local:TimeSlotStyleSelector x:Key="TimeSlotStyleSelector"/&gt;</para></item><item>
            Define two styles:
            <list type="bullet"><item>
            with the key "C1Scheduler_WorkSlot_Style" for work hours; 
            </item><item>
            with the key "C1Scheduler_FreeSlot_Style" for free hours.    
            </item></list></item><item>
            Define two optional styles:
            <list type="bullet"><item>
            with the key "C1Scheduler_TopWorkSlot_Style" for the top slot in every work hour; 
            </item><item>
            with the key "C1Scheduler_TopFreeSlot_Style" for the top slot in every free hour.    
            </item></list></item><item><para>Specify ItemContainerStyleSelector property for the <see cref="T:C1.WPF.Schedule.C1SchedulerPresenter" /> object:</para><para> &lt;local:C1SchedulerPresenter ItemContainerStyleSelector="{StaticResource TimeSlotTemplateSelector}" /&gt;</para></item></list></remarks>
    </member>
    <member name="T:C1.WPF.Schedule.VisualInterval">
      <summary>
            Represents a definition of a minimal indivisible time interval represented
            by the <see cref="T:C1.WPF.Schedule.C1Scheduler" />.
            </summary>
      <remarks>
            The instances of this class are used as DataContext for the 
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalTemplate" />.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.VisualInterval.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.VisualInterval.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.VisualInterval.StatusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.VisualInterval.StatusBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.VisualInterval.TotalStatusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.VisualInterval.TotalStatusBrush" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.VisualInterval.StartTimeInfoProperty">
      <summary>
            Identifies the <see cref="F:C1.WPF.Schedule.VisualInterval.StartTimeInfoProperty" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualInterval.#ctor(C1.WPF.Schedule.C1Scheduler,C1.WPF.Schedule.SchedulerGroupItem,System.DateTime,System.TimeSpan)">
      <summary>
            Creates a new <see cref="T:C1.WPF.Schedule.VisualInterval" /> object for the specified 
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> that represents the specified time range.
            </summary>
      <param name="scheduler">
            A <see cref="T:C1.WPF.Schedule.C1Scheduler" /> that <see cref="T:C1.WPF.Schedule.VisualInterval" /> is created for.
            </param>
      <param name="ownerGroup">
            A <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> that <see cref="T:C1.WPF.Schedule.VisualInterval" /> is created for.
            </param>
      <param name="startTime">
            A start time of a time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" />.
            </param>
      <param name="timescale">
            A TimeSpan of a time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" />.
            </param>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.IsToday">
      <summary>
            Indicates whether the <see cref="T:C1.WPF.Schedule.VisualInterval" /> represents the current day.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.OwnerGroup">
      <summary>
            Gets the owning <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.Items">
      <summary>
            Virtual property returns null in this class implementation.
            </summary>
      <remarks>It is necessary to avoid silent exceptions 
            at binding when it is used with inherited classes 
            (in other case binding takes double time).
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.Scheduler">
      <summary>
            Gets the <see cref="P:C1.WPF.Schedule.VisualInterval.Scheduler" /> that <see cref="T:C1.WPF.Schedule.VisualInterval" />
            belongs to.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.StartTime">
      <summary>
            Gets a start time of a time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.TimeScale">
      <summary>
            Gets a TimeSpan of a time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.EndTime">
      <summary>
            Gets an end time of a time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" /> object.
            </summary>
      <remarks>
        <para>
          <see cref="P:C1.WPF.Schedule.VisualInterval.EndTime" /> is calculated as a sum of the <see cref="P:C1.WPF.Schedule.VisualInterval.StartTime" />
            and <see cref="P:C1.WPF.Schedule.VisualInterval.TimeScale" /> property values.
            </para>
            This property represents an exclusive boundary of the time range, that
            is the DateTime returned by this property is considered as not belonging to
            the <see cref="T:C1.WPF.Schedule.VisualInterval" /> time range. The inclusive boundary is
            represented by the <see cref="P:C1.WPF.Schedule.VisualInterval.InclusiveEndTime" /> property.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.InclusiveEndTime">
      <summary>
            Gets an inclusive end time of a time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" /> object.
            </summary>
      <remarks>
            This property represents an inclusive boundary of the time range, that is
            the maximum DateTime value that is included in the time range represented
            by the <see cref="T:C1.WPF.Schedule.VisualInterval" />, as opposite to the <see cref="P:C1.WPF.Schedule.VisualInterval.EndTime" />
            property.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.Culture">
      <summary>
            Gets a CultureInfo.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.StartTimeInfo">
      <summary>
            Gets a DateTimeInfo object containing auxiliary properties for a usage in XAML
            that provides additional information for the <see cref="P:C1.WPF.Schedule.VisualInterval.StartTime" /> property 
            value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.EndTimeInfo">
      <summary>
            Gets a DateTimeInfo object containing auxiliary properties for a usage in XAML
            that provides additional information for the <see cref="P:C1.WPF.Schedule.VisualInterval.EndTime" /> property 
            value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.InclusiveEndTimeInfo">
      <summary>
            Gets a DateTimeInfo object containing auxiliary properties for a usage in XAML
            that provides additional information for the <see cref="P:C1.WPF.Schedule.VisualInterval.EndTimeInfo" /> property 
            value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.IsSelected">
      <summary>
            Gets or sets a value that determines whether the UI element that has this 
            <see cref="T:C1.WPF.Schedule.VisualInterval" /> as a DataContext is selected.
            This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.Index">
      <summary>
            Gets an index of <see cref="T:C1.WPF.Schedule.VisualInterval" /> in 
            the owning <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.VisualIntervals" /> collection.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.Appointments">
      <summary>
            Gets a collection of <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> objects representing
            appointments whose time range is intersected with the time range of this
            <see cref="T:C1.WPF.Schedule.VisualInterval" />.
            </summary>
      <remarks>
            This collection provides active notifications when a set of appointments
            intersecting with this <see cref="T:C1.WPF.Schedule.VisualInterval" /> is changed, so you
            can safely bind UI elements to it in XAML.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.StatusBrush">
      <summary>
            Gets the <see cref="T:System.Windows.Media.Brush" /> object representing interval availability status.
            Only honors all-day and multi-day events availability status.
            This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualInterval.TotalStatusBrush">
      <summary>
            Gets the <see cref="T:System.Windows.Media.Brush" /> object representing interval availability status.
            Honors status of all appointments in the interval.
            This is a dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualInterval.ContainsTime(System.DateTime)">
      <summary>
            Gets a value indicating whether the specified DateTime belongs to the
            time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" />.
            </summary>
      <param name="time">
            A checked DateTime.
            </param>
      <returns>
            This method returns true if the specified DateTime belongs 
            to the time range represented by the <see cref="T:C1.WPF.Schedule.VisualInterval" />;
            otherwise, false.
            </returns>
      <remarks>
            A DateTime is considered as belonging to a <see cref="T:C1.WPF.Schedule.VisualInterval" />
            if the following condition is satisfied:
            <para><see cref="P:C1.WPF.Schedule.VisualInterval.StartTime" /> &lt;= DateTime and 
            DateTime &gt; <see cref="P:C1.WPF.Schedule.VisualInterval.EndTime" /></para><para>
            Note that the bottom boundary of the interval is exclusive, that is 
            DateTime = <see cref="P:C1.WPF.Schedule.VisualInterval.EndTime" /> is considered as not
            belonging to the interval.
            </para></remarks>
    </member>
    <member name="E:C1.WPF.Schedule.VisualInterval.PropertyChanged">
      <summary>
            Occurs when property value is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualInterval.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>True if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.VisualIntervalCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.VisualInterval" /> object at the specified index.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalCollection.Item(System.DateTime)">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.VisualInterval" /> that includes the specified DateTime.
            </summary>
      <param name="time">
            DateTime for which a <see cref="T:C1.WPF.Schedule.VisualInterval" /> to find.
            </param>
      <returns>
            Returns a <see cref="T:C1.WPF.Schedule.VisualInterval" /> that includes the specified DateTime,
            if exists; otherwise, a null value.
            </returns>
      <remarks>
            A DateTime is considered as belonging to a <see cref="T:C1.WPF.Schedule.VisualInterval" />
            if the following condition is satisfied:
            <para><see cref="P:C1.WPF.Schedule.VisualInterval.StartTime" /> &lt;= DateTime and 
            DateTime &gt; <see cref="P:C1.WPF.Schedule.VisualInterval.EndTime" /></para><para>
            Note that the bottom boundary of the interval is exclusive, that is 
            DateTime = <see cref="P:C1.WPF.Schedule.VisualInterval.EndTime" /> is considered as not
            belonging to the interval.
            </para></remarks>
    </member>
    <member name="T:C1.WPF.Schedule.VisualIntervalToStringConverter">
      <summary>
            VisualIntervalToStringConverter converts VisualInterval start time to string
            using formatting string specified in one of the C1Scheduler properties:
            - DayViewDayHeaderFormat,
            - WeekViewDayHeaderFormat,
            - MonthViewDayHeaderMonthFormat,
            - MonthViewDayHeaderDayFormat,
            - MonthViewHeaderFormat.
            Converter parameter should specify C1Scheduler property name.
            If converter parameter is null, uses VisualInterval.Culture.DateTimeFormat.ShortDatePattern 
            as formatting string.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.VisualIntervalToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.VisualIntervalToStringConverter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.MonthToStringConverter">
      <summary>
            MonthToStringConverter converts VisualInterval start time to string.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.MonthToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.MonthToStringConverter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.AlternateMonthBrushConverter">
      <summary>
            AlternateMonthBrushConverter returns background brush for the specified VisualInterval.
            ConverterParameter property should be set to the base brush value.
            Returns the base brush for even months; <see cref="P:C1.WPF.Schedule.AlternateMonthBrushConverter.AlternateMonthBrush" /> property value for odd months.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AlternateMonthBrushConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.AlternateMonthBrushConverter" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AlternateMonthBrushConverter.AlternateMonthBrush">
      <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Brush" /> object which should be used for alternate months.
            The default value is white SolidColorBrush.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.AddingAppointmentEventArgs">
      <summary>
            The <see cref="T:C1.WPF.Schedule.AddingAppointmentEventArgs" /> class describes routed 
            event data for the <see cref="E:C1.WPF.Schedule.C1Scheduler.UserAddingAppointment" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AddingAppointmentEventArgs.#ctor(System.Windows.RoutedEvent,C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.AddingAppointmentEventArgs" />
            class with the specified routed event and appointment. 
            </summary>
      <param name="routedEvent">The <see cref="T:System.Windows.RoutedEvent" />.</param>
      <param name="appointment">The <see cref="P:C1.WPF.Schedule.AddingAppointmentEventArgs.Appointment" /> object.</param>
    </member>
    <member name="P:C1.WPF.Schedule.AddingAppointmentEventArgs.Appointment">
      <summary>
            Gets or sets an <see cref="P:C1.WPF.Schedule.AddingAppointmentEventArgs.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.AppointmentActionEventArgs">
      <summary>
            The <see cref="T:C1.WPF.Schedule.AppointmentActionEventArgs" /> class describes routed 
            event data for user actions on the <see cref="P:C1.WPF.Schedule.AppointmentActionEventArgs.Appointment" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentActionEventArgs.#ctor(System.Windows.RoutedEvent,C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.AppointmentActionEventArgs" />
            class with the specified routed event and appointment. 
            </summary>
      <param name="routedEvent">The <see cref="T:System.Windows.RoutedEvent" />.</param>
      <param name="appointment">The <see cref="P:C1.WPF.Schedule.AppointmentActionEventArgs.Appointment" /> object.</param>
    </member>
    <member name="P:C1.WPF.Schedule.AppointmentActionEventArgs.Appointment">
      <summary>
            Gets an <see cref="P:C1.WPF.Schedule.AppointmentActionEventArgs.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.ReminderActionEventArgs">
      <summary>
            The <see cref="T:C1.WPF.Schedule.ReminderActionEventArgs" /> class describes routed 
            event data for actions on the <see cref="P:C1.WPF.Schedule.ReminderActionEventArgs.Reminder" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ReminderActionEventArgs.#ctor(System.Windows.RoutedEvent,C1.C1Schedule.Reminder)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.ReminderActionEventArgs" />
            class with the specified routed event and reminder. 
            </summary>
      <param name="routedEvent">The <see cref="T:System.Windows.RoutedEvent" />.</param>
      <param name="reminder">The <see cref="P:C1.WPF.Schedule.ReminderActionEventArgs.Reminder" /> object.</param>
    </member>
    <member name="P:C1.WPF.Schedule.ReminderActionEventArgs.Reminder">
      <summary>
            Gets a <see cref="P:C1.WPF.Schedule.ReminderActionEventArgs.Reminder" /> object.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.PropertyChangeEventArgsBase">
      <summary>
            The <see cref="T:C1.WPF.Schedule.PropertyChangeEventArgsBase" /> class describes routed 
            event data for the dependency property changing events.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.PropertyChangeEventArgsBase.#ctor(System.Windows.RoutedEvent,System.Windows.DependencyProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.PropertyChangeEventArgsBase" />
            class with the specified routed event and DependencyProperty. 
            </summary>
      <param name="routedEvent">The <see cref="T:System.Windows.RoutedEvent" />.</param>
      <param name="property">The <see cref="T:System.Windows.DependencyProperty" />.</param>
    </member>
    <member name="P:C1.WPF.Schedule.PropertyChangeEventArgsBase.Property">
      <summary>
            Gets a <see cref="T:System.Windows.DependencyProperty" /> object.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.DateTimePropertyChangeEventArgs">
      <summary>
            The <see cref="T:C1.WPF.Schedule.DateTimePropertyChangeEventArgs" /> class describes routed 
            event data for the DateTime property changing events.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimePropertyChangeEventArgs.#ctor(System.Windows.RoutedEvent,System.Windows.DependencyProperty,System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.DateTimePropertyChangeEventArgs" />
            class with the specified routed event, dependency property, old and new DateTime value. 
            </summary>
      <param name="routedEvent">The <see cref="T:System.Windows.RoutedEvent" />.</param>
      <param name="property">The <see cref="T:System.Windows.DependencyProperty" />.</param>
      <param name="oldValue">The old value of the specified property.</param>
      <param name="newValue">The new value of the specified property.</param>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimePropertyChangeEventArgs.OldValue">
      <summary>
            Gets an old property value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimePropertyChangeEventArgs.NewValue">
      <summary>
            Gets a new property value.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.NullableDateTimePropertyChangeEventArgs">
      <summary>
            The <see cref="T:C1.WPF.Schedule.NullableDateTimePropertyChangeEventArgs" /> class describes routed 
            event data for the nullable DateTime property changing events.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.NullableDateTimePropertyChangeEventArgs.#ctor(System.Windows.RoutedEvent,System.Windows.DependencyProperty,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.DateTimePropertyChangeEventArgs" />
            class with the specified routed event, dependency property, old and new DateTime value. 
            </summary>
      <param name="routedEvent">The <see cref="T:System.Windows.RoutedEvent" />.</param>
      <param name="property">The <see cref="T:System.Windows.DependencyProperty" />.</param>
      <param name="oldValue">The old value of the specified property.</param>
      <param name="newValue">The new value of the specified property.</param>
    </member>
    <member name="P:C1.WPF.Schedule.NullableDateTimePropertyChangeEventArgs.OldValue">
      <summary>
            Gets an old property value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NullableDateTimePropertyChangeEventArgs.NewValue">
      <summary>
            Gets a new property value.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.BeforeViewChangeEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.WPF.Schedule.C1Scheduler.BeforeViewChange" /> event 
            of the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.BeforeViewChangeEventArgs.Style">
      <summary>
            Gets or sets <see cref="P:C1.WPF.Schedule.BeforeViewChangeEventArgs.Style" /> value determining 
            which Style should be selected.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.BeforeViewChangeEventArgs.Dates">
      <summary>
            Gets or sets the range of dates which should be selected in the view. 
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.SchedulerGroupItem">
      <summary>
            Holds all the data required for displaying individual UI part for the single resource, 
            category or contact when the <see cref="P:C1.WPF.Schedule.C1Scheduler.GroupBy" /> property is set,
            or default UI otherwise.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SchedulerGroupItem.HasVisibleAppointmentsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.HasVisibleAppointments" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.HasVisibleAppointments">
      <summary>
            Indicates whether there is at least one visible appointment in the current view.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SchedulerGroupItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.IsSelected" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.IsSelected">
      <summary>
            Gets or sets a value that determines whether the UI element that has this 
            <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> as a DataContext is selected.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SchedulerGroupItem.ShowPreviousButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.ShowPreviousButton" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.ShowPreviousButton">
      <summary>
            Gets or sets a value that determines whether to show the previous group navigation button (buttons).
            The default value is True. This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SchedulerGroupItem.ShowNextButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.ShowNextButton" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.ShowNextButton">
      <summary>
            Gets or sets a value that determines whether to show the next group navigation button (buttons).
            The default value is True. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.Scheduler">
      <summary>
            Gets the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.Scheduler" /> that <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> belongs to.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.BaseObject" /> object representing the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object owner.
            This property can be null for an empty group item.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.Name">
      <summary>
            Gets the <see cref="T:System.String" /> value representing the name of the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.DisplayName">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value representing the display name of the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            This is a dependency property.
            </summary>
      <value>The display name.</value>
    </member>
    <member name="F:C1.WPF.Schedule.SchedulerGroupItem.DisplayNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.DisplayName" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.Background">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> objects which should be used as background color for UI, 
            representing the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SchedulerGroupItem.BackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.Background" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.IsChecked">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value determinign whether this <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object should be
            displayed in UI.  
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.Tag">
      <summary>
            Gets or sets the object that contains custom data about the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SchedulerGroupItem.TagProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.Tag" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.VisualIntervals">
      <summary>
            Gets a collection of <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects defining time 
            intervals currently represented by the control on a screen.
            </summary>
      <remarks>
            This collection is generated automatically based on the following
            property values:
            <list type="bullet"><item><term /><description><see cref="P:C1.WPF.Schedule.C1Scheduler.VisualStartTime" /> - defines a start time of a period represented 
            by the collection.
            </description></item><item><term /><description><see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" /> - defines a length of a period represented 
            by the collection.
            </description></item><item><term /><description><see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalScale" /> - defines a length of each 
            <see cref="T:C1.WPF.Schedule.VisualInterval" /> in the collection.
            </description></item></list></remarks>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.VisualIntervalGroups">
      <summary>
            Gets a collection of <see cref="T:C1.WPF.Schedule.VisualIntervalGroup" /> objects 
            defining top-level groups of <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects 
            currently represented by the control on a screen.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItem.VisualIntervalsView">
      <summary>
            Gets a grouped view on the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.VisualIntervals" /> collection.
            </summary>
      <remarks>
            This view is primarily intended to provide a data for building control UI
            in XAML. It represents a list of <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects
            from the <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.VisualIntervals" /> grouped according to the
            <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalGroupDescriptions" /> property value.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.SchedulerGroupItem.ToString">
      <summary>
            Returns the string representation of the current <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object.
            </summary>
      <returns>The <see cref="P:C1.WPF.Schedule.SchedulerGroupItem.DisplayName" /> property value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.SchedulerGroupItemCollection">
      <summary>
            Represents a collection of the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> objects.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItemCollection.Item(System.Int32)">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object at the specified index.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.SchedulerGroupItemCollection.Item(System.Object)">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object with the specified owner.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter">
      <summary>
            GroupToSeparatorVisibilityConverter returns a <see cref="T:System.Windows.Visibility" /> value
            determining whether separator should be shown for the specified <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" />.
            </summary>
      <remarks>
            The <see cref="T:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.GroupToSeparatorVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.AppointmentWrapPanel">
      <summary>
            Positions child elements in sequential position from left to right, 
            breaking content to the next line at the edge of the containing box. 
            Subsequent ordering happens sequentially from top to bottom or from right to left, 
            depending on the value of the <see cref="T:System.Windows.Controls.Orientation" /> property. 
            If <see cref="T:System.Windows.Controls.Orientation" /> property is <see cref="F:System.Windows.Controls.Orientation.Vertical" />
            this panel behaves as the base class.
            If <see cref="T:System.Windows.Controls.Orientation" /> property is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />
            then <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" /> tries to position child elements in 
            available space. For example, it doesn't wrap the child to the next line if
            the next line invisible. Instead, it shows as much as possible in
            the last visible line.
            When user clicks on the panel it tries to find and focus child element 
            with x:Name="PART_Subject". It is used for switching appointment element 
            into in-place editing mode.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AppointmentWrapPanel.IsReadOnlyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AppointmentWrapPanel.IsReadOnly" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AppointmentWrapPanel.DockLastChildToEndProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AppointmentWrapPanel.DockLastChildToEnd" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentWrapPanel.#ctor">
      <summary>
            Creates the new instance of the <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AppointmentWrapPanel.DockLastChildToEnd">
      <summary>
            The DockLastChildToEnd property determines whether the last child element should be docked
            to the bottom right corner of the <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" />.
            The default value is False. This is a dependency property.
            </summary>
      <remarks>For the sample of using look at IntervalAppointmentTemplate in Office 2007 themes.
            It always shows appointment icons in the bottom right corner of the <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" />.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.AppointmentWrapPanel.IsReadOnly">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value that indicates whether 
            the <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" /> is read-only to a user interacting with the control. 
            This is a dependency property.
            </summary>
      <remarks>This value only affects a user who is interacting with the control. 
            The contents of the <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" /> can always be modified programmatically.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentWrapPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Arranges the content of a <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" /> element. 
            </summary>
      <param name="finalSize">The <see cref="T:System.Windows.Size" /> that this element 
            should use to arrange its child elements.</param>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the arranged size 
            of this <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" /> element and its children.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentWrapPanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Measures the child elements of a <see cref="T:C1.WPF.Schedule.AppointmentWrapPanel" /> in anticipation 
            of arranging them during the <see cref="M:C1.WPF.Schedule.AppointmentWrapPanel.ArrangeOverride(System.Windows.Size)" /> pass. 
            </summary>
      <param name="constraint">An upper limit <see cref="T:System.Windows.Size" /> that should not be exceeded.</param>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the desired size of the element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentWrapPanel.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)">
      <summary>
            If appointment text is not clipped, sets e.Handled to true in order to do not show tooltip.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentWrapPanel.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.AutoDistributionGrid">
      <summary>
            Represents a grid panel that automatically distributes child elements among
            grid cells.
            </summary>
      <remarks>
        <para>
            The <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> class provides the following additional 
            functionality to the base Grid class.
            </para>
        <list type="bullet">
          <item>
            <term />
            <description>
            Scatters child elements by rows or columns depending on the 
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirection" /> property value, with an 
            ability
            to change a default placement for any child element by specifying the 
            <see cref="T:C1.WPF.Schedule.DistributionInfo" /> objects in the 
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenDistributionInfo" /> collection.
            </description>
          </item>
          <item>
            <term />
            <description>
            Introduces the settable and bindable <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.RowCount" /> and 
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ColumnCount" /> properties that allows defining of 
            row and column count 
            numerically, without adding/removing items in the 
            Grid.RowDefinitions/ColumnDefinitions collections. Along with the introduced 
            bindable <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.VisualChildCount" /> property it gives, for 
            example, an ability 
            to have as many rows as you have children.
            </description>
          </item>
          <item>
            <term />
            <description>
            Gives an ability to automatically keeps a number of column and rows so as cells
            with a fixed width and/or height fully fit in the 
            <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> size. This is controlled by the
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfWidth" /> and 
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfHeight" /> properties.
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirection" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirection">
      <summary>
            Gets or sets a value that determines a flow direction of child elements
            in the <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" />. 
            The default value is <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            This is a dependency property.
            </summary>
      <remarks>
        <para>
            If <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirection" /> is set to 
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />, child elements are distributed 
            row by row, that is a first grid row is filled first (in the left to right
            direction), then the second row, and so on.
            </para>
        <para>
            If <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirection" /> is set to 
            <see cref="F:System.Windows.Controls.Orientation.Vertical" />, child elements are distributed 
            column by column, that is a first grid column is filled first (in the top to 
            bottom direction), then the second column, and so on.
            </para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.AutoDistributionGrid.RowCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.RowCount" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.RowCount">
      <summary>
            Gets or sets a value that determines a number of rows in the 
            <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" />. This is a dependency property.
            </summary>
      <remarks>
            Use this property to specify a number of grid rows numerically. 
            <para>
            This property
            value is being kept in sync with a number of items in the 
            <see cref="P:System.Windows.Controls.Grid.RowDefinitions" /> collection.
            </para><para>
            If a number of items in the 
            <see cref="P:System.Windows.Controls.Grid.RowDefinitions" /> collection has been changed
            then the value of the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.RowCount" /> property is updated automatically.
            </para><para>
            If a value of the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.RowCount" /> property is changed directly,
            then items will be added or removed to/from the end of
            <see cref="P:System.Windows.Controls.Grid.RowDefinitions" /> collection until its number
            becomes equal to the new <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.RowCount" /> value. 
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.AutoDistributionGrid.ColumnCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ColumnCount" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.ColumnCount">
      <summary>
            Gets or sets a value that determines a number of columns in the 
            <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" />. This is a dependency property.
            </summary>
      <remarks>
            Use this property to specify a number of grid columns numerically. 
            <para>
            This property
            value is being kept in sync with a number of items in the 
            <see cref="P:System.Windows.Controls.Grid.ColumnDefinitions" /> collection.
            </para><para>
            If a number of items in the 
            <see cref="P:System.Windows.Controls.Grid.ColumnDefinitions" /> collection has been changed
            then the value of the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ColumnCount" /> property is updated automatically.
            </para><para>
            If a value of the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ColumnCount" /> property is changed directly, 
            then items will be added or removed to/from the end of
            <see cref="P:System.Windows.Controls.Grid.ColumnDefinitions" /> collection until its number
            becomes equal to the new <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ColumnCount" /> value. 
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.AutoDistributionGrid.VisualChildCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.VisualChildCount" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.VisualChildCount">
      <summary>
            Gets a number of child elements of the <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" />.
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfHeight" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfHeight">
      <summary>
            Allows the forcing of the <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> to generate cells
            of the specified height, where a number of rows will be automatically 
            adjusted so as to fully fit a maximum number of cells in a current grid
            height. The default value is <see cref="F:System.Double.NaN" />.
            This is a dependency property.
            </summary>
      <remarks>
        <para>
            Setting <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfHeight" /> to non Double.NaN value directs
            grid to automatically create as many columns of the height specified as the 
            property value
            that can fully fit in the grid's height (but at least one). When grid height 
            is changed, the number of rows is adjusted automatically.
            </para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfWidth" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfWidth">
      <summary>
            Allows the forcing of the <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> to generate cells
            of the specified width, where a number of columns will be automatically 
            adjusted so as to fully fit a maximum number of cells in a current grid
            width. The default value is <see cref="F:System.Double.NaN" />.
            This is a dependency property.
            </summary>
      <remarks>
        <para>
            Setting <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.FitCellsOfWidth" /> to non Double.NaN value directs
            grid to automatically create as many columns of the width specified as the 
            property value
            that can fully fit in the grid's width (but at least one). When grid width 
            is being changed the number of columns is adjusted automatically.
            </para>
      </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.AutoDistributionGrid.CellCountProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.CellCount" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.CellCount">
      <summary>
            Gets a number of cells in the <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" />.
            This is a dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AutoDistributionGrid.#ctor">
      <summary>
            Creates a new instance of <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenDistributionInfo">
      <summary>
            Gets a collection of <see cref="T:C1.WPF.Schedule.DistributionInfo" /> objects that allows to
            redefine a default placement of a certain child element.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AutoDistributionGrid.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>
            Called when the visual children of a <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> element change.
            </summary>
      <param name="visualAdded">Identifies the visual child that's added.</param>
      <param name="visualRemoved">Identifies the visual child that's removed.</param>
    </member>
    <member name="M:C1.WPF.Schedule.AutoDistributionGrid.MeasureOverride(System.Windows.Size)">
      <summary>
            Measures the child elements of a <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> in anticipation 
            of arranging them during the ArrangeOverride pass. 
            </summary>
      <param name="constraint">An upper limit <see cref="T:System.Windows.Size" /> that should not be exceeded.</param>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the desired size of the element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AutoDistributionGrid.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>
            Raises the SizeChanged event, using the specified information as part of the eventual event data. 
            </summary>
      <param name="sizeInfo">Details of the old and new size involved in the change.</param>
    </member>
    <member name="T:C1.WPF.Schedule.DistributionInfoCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.Schedule.DistributionInfo" /> objects.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.DistributionInfo">
      <summary>
            Describes a non-default placement for a child element of the
            <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" />.
            </summary>
      <remarks>
            Use instances of the <see cref="T:C1.WPF.Schedule.DistributionInfo" /> class as items of the
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenDistributionInfo" /> collection 
            to change a default placement of a certain child element.
            Each <see cref="T:C1.WPF.Schedule.DistributionInfo" /> object of the collection instructs the grid that 
            a child object at index <see cref="P:C1.WPF.Schedule.DistributionInfo.ElementIndex" /> should be (optionally) 
            placed to a cell with <see cref="P:C1.WPF.Schedule.DistributionInfo.Row" /> and <see cref="P:C1.WPF.Schedule.DistributionInfo.Column" /> 
            indexes and also has <see cref="P:C1.WPF.Schedule.DistributionInfo.RowSpan" /> and <see cref="P:C1.WPF.Schedule.DistributionInfo.ColumnSpan" /> spans. 
            If the position is redefined for a certain element in such a way, then the next element 
            will be placed in a cell next to this element according to the 
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirection" /> specified. 
            If a span is defined and the span direction conforms to the Orientation specified in the
            <see cref="P:C1.WPF.Schedule.AutoDistributionGrid.ChildrenFlowDirection" /> property, then the next element 
            will skip over the span. Each <see cref="T:C1.WPF.Schedule.DistributionInfo" /> item's info can be 
            propagated to a number (fixed or infinite) of next elements, which is specified in 
            the <see cref="P:C1.WPF.Schedule.DistributionInfo.Propagate" /> property.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.DistributionInfo.ElementIndex">
      <summary>
            Gets or sets an index of a child element in the child elements collection 
            of the <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> grid whose distribution info is defined by this object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DistributionInfo.Row">
      <summary>
            Gets or sets a row number where the element described by the 
            <see cref="T:C1.WPF.Schedule.DistributionInfo" /> will be placed.
            </summary>
      <remarks>
            The default value is Null, which means that a default row position is not changed. 
            Setting it to a non-null value forces <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> to place the child element 
            in the specified row position.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.DistributionInfo.Column">
      <summary>
            Gets or sets a column number where the element described by the 
            <see cref="T:C1.WPF.Schedule.DistributionInfo" /> will be placed.
            </summary>
      <remarks>
            The default value is Null, which means that a default column position is not changed. 
            Setting it to a non-null value forces <see cref="T:C1.WPF.Schedule.AutoDistributionGrid" /> to place the child element 
            in the specified column position.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.DistributionInfo.RowSpan">
      <summary>
            Gets or sets a number of rows spanned by a child element.
            The default value is 1.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DistributionInfo.ColumnSpan">
      <summary>
            Gets or sets a number of columns spanned by a child element.
            The default value is 1.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DistributionInfo.Propagate">
      <summary>
            Gets or sets a value that defines a number of child elements whose placement
            is described by the <see cref="T:C1.WPF.Schedule.DistributionInfo" />.
            The default value is 0, which means no propagation.
            </summary>
      <remarks>
        <see cref="P:C1.WPF.Schedule.DistributionInfo.Propagate" /> defines a number of elements with indexes started at 
            <see cref="P:C1.WPF.Schedule.DistributionInfo.ElementIndex" /> + 1
            that will get a distribution info which is defined in this object. 
            A negative value indicates that all elements that follows the element at 
            <see cref="P:C1.WPF.Schedule.DistributionInfo.ElementIndex" /> index will be
            provided with this distribution info. A propagation is stopped at a first element 
            that has a corresponding <see cref="T:C1.WPF.Schedule.DistributionInfo" /> object defined.
            </remarks>
    </member>
    <member name="T:C1.WPF.Schedule.AppointmentFilterEnum">
      <summary>
            Determines the type of appointments drawn by 
            the <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" /> pane. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AppointmentFilterEnum.All">
      <summary>
            All appointments.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AppointmentFilterEnum.Event">
      <summary>
            All-day and multi-day events.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AppointmentFilterEnum.Appointment">
      <summary>
            Appointments with duration less than 1 day.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.AppointmentsCoverPane">
      <summary>
            Provides a surface for painting appointment boxes over an arbitrary visual
            intervals layout.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" /> allows you to visually represent a set of appointments 
            that fit in a time range exposed by a current view, and to draw appointment boxes 
            relative to UI elements representing <see cref="T:C1.WPF.Schedule.VisualInterval" />s covered by the appointment. 
            The <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" /> element, being placed somewhere inside 
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> visual tree (usually in C1Scheduler's ControlTemplate), 
            provides a surface where it draws appointment boxes relative to UI elements 
            representing VisualIntervals. AppointmentsCoverPane is capable to recognize the 
            case when the appointment box must be divided into two or more visual boxes, 
            for example, if appointment covers three days in the Working Week View, 
            AppointmentsCoverPane will automatically draw three boxes for the appointment, 
            each box in a corresponding day column, with starting and ending edges positioned 
            at interval UI elements corresponding to start and end time of the appointment 
            in this day.
            <para>
            AppointmentsCoverPane provides this functionality for an arbitrary UI representing 
            <see cref="T:C1.WPF.Schedule.VisualInterval" />s. To make it possible, each element that can be 
            treated as VisualInterval UI representative (usually it's an outer (root) element 
            in the <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualIntervalTemplate" /> definition) must have the 
            attached <see cref="F:C1.WPF.Schedule.CoverElementsPane.OrientationProperty" /> assigned 
            (<see cref="T:C1.WPF.Schedule.CoverElementsPane" /> is the base class for 
            <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" />). The assigned value indicates a chronological 
            flow direction of interval elements and can take Horizontal or Vertical values. 
            For example, interval elements in the Working Week View have it assigned to 
            Vertical, while elements of Month View assign it to Horizontal.
            A content of an appointment box of AppointmentsCoverPane is represented by 
            DataTemplate defined in the <see cref="P:C1.WPF.Schedule.C1Scheduler.IntervalAppointmentTemplate" /> 
            property.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.AppointmentsCoverPane.AppointmentFilterProperty">
      <summary>
            The AppointmentFilter attached property can be used to specify
            which type of appointments should be drawn by the 
            <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" /> pane.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.AppointmentsCoverPane.KeepTimesAtDropProperty">
      <summary>
            The KeepTimesAtDrop attached property determines the behavior of moved (dragged) appointments. 
            If this value is True, after dragging an appointment to the desired VisualInterval, 
            the Appointment start date is changed to the VisualInterval start date. 
            If this value is False, the Appointment.Start becomes equal to the VisualInterval.StartTime, 
            and Appointment.Duration becomes equal to the VisualInterval.TimeScale. The default value is False.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" /> pane.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.IsPaneAppointment(C1.C1Schedule.Appointment,C1.WPF.Schedule.AppointmentFilterEnum)">
      <summary>
            Checks whether the specified appointment should be shown in the current pane.
            The default implementation filters appointments according to the AppointmentsCoverPane.AppointmentFilter property value.
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object to check.</param>
      <param name="filter">The <see cref="T:C1.WPF.Schedule.AppointmentFilterEnum" /> value which should be used for filtering.</param>
      <returns>True if the <see cref="T:C1.C1Schedule.Appointment" /> object should be shown in the current pane; otherwise, False.</returns>
      <remarks>Override this method in the derived class to filter appointments by additional conditions.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.InitializeAppointment(C1.C1Schedule.Appointment)">
      <summary>
            Initializes the newly created appointment or edits existing one when it is dropped to the AppointmentsCoverPane by the end-user.
            This method is called by the C1Scheduler control immediately before firing UserAddingAppointment and BeforeAppointmentDrop events.
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object to initialize.</param>
      <remarks>Override this method in derived class if you need additional appointment initialization.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.AppointmentsCoverPane.ContentKind">
      <summary>
            Gets the type of content acceptable by the current instance of <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" />.
            </summary>
      <remarks> This property always returns the <see cref="T:C1.WPF.Schedule.IntervalAppointment" /> type.
            The setter for this property does nothing.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.GetAppointmentFilter(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the AppointmentFilter attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is read.</param>
      <returns>The <see cref="T:C1.WPF.Schedule.AppointmentFilterEnum" /> value of the specified element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.SetAppointmentFilter(System.Windows.FrameworkElement,C1.WPF.Schedule.AppointmentFilterEnum)">
      <summary>
            Sets the value of the AppointmentFilter attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> for which the property value is set.</param>
      <param name="value">The <see cref="T:C1.WPF.Schedule.AppointmentFilterEnum" /> value to be set on the specified element.</param>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.GetKeepTimesAtDrop(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the KeepTimesAtDrop attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is read.</param>
      <returns>The <see cref="T:System.Boolean" /> value of the specified element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.SetKeepTimesAtDrop(System.Windows.FrameworkElement,System.Boolean)">
      <summary>
            Sets the value of the KeepTimesAtDrop attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> for which the property value is set.</param>
      <param name="value">The <see cref="T:System.Boolean" /> value to be set on the specified element.</param>
    </member>
    <member name="P:C1.WPF.Schedule.AppointmentsCoverPane.UseSimpleLayout">
      <summary>
            Only set this property to false if you use complex layout in the custom <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control template
            and found problems with laying out appointments at runtime. In such case <see cref="T:C1.WPF.Schedule.AppointmentsCoverPane" /> 
            will use more slow algorithm to determine what elements should be used to layout appointments over them.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.GetCoverElement(System.Object)">
      <summary>
            Creates new wrapper to represent cover element.
            </summary>
      <param name="dataObject">The represented data object.</param>
      <returns>Return new cover element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.GetHosts">
      <summary>
            Gets the list of the <see cref="T:System.Windows.FrameworkElement" /> elements, which are the root of visual tree to search covered elements.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.IsPaneElementInternal(System.Windows.FrameworkElement)">
      <summary>
            Checks whether specified element is covered by the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> instance.
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to check.</param>
      <returns>Returns True if specified element is covered by the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> 
            instance; False otherwise.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.IsHostElementInternal(System.Windows.FrameworkElement)">
      <summary>
            Checks whether specified element is hosted in the same host as the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> instance.
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to check.</param>
      <returns>Returns True if specified element is hosted in the same host as the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> 
            instance; False otherwise.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AppointmentsCoverPane.GetLaneSize(C1.WPF.Schedule.SizingType,System.Object,System.Double,System.Int32)">
      <summary>
            Overrides base class behavior. If sizingType is <see cref="F:C1.WPF.Schedule.SizingType.ExtendedSingle" />, always
            returns fixed size for all-day or multi-day appointments.
            </summary>
      <param name="sizingType">The <see cref="T:C1.WPF.Schedule.SizingType" /> value.</param>
      <param name="dataContext">The cover element data context. It can be used to determine additional sizing conditions in overrides.</param>
      <param name="availableSpace">The <see cref="T:System.Double" /> value specifying avaliable size.</param>
      <param name="totalLanes">The <see cref="T:System.Int32" /> value specifying the number of intersecting elements (1 for the single element without intersection).</param>
      <returns>The <see cref="T:System.Double" /> value specifying actual cover element size (height or width depending on the orientation.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.CoverElement">
      <summary>
            Defines a construction that describes a UI that represents a single data object.
            The UI is constituted of a number of CoverElementChunk elements.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElement.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.CoverElement" /> class.
            </summary>
      <param name="dataObject">The represented data object.</param>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElement.DataObject">
      <summary>
            Gets an <see cref="T:System.Object" /> which is represented by the current <see cref="T:C1.WPF.Schedule.CoverElement" /> instance.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElement.Chunks">
      <summary>
            Gets a list of <see cref="T:C1.WPF.Schedule.CoverElementChunk" /> elements that constitute this
            CoverElement UI.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElement.CoveredElements">
      <summary>
            Gets a list of elements that are covered by this CoverElement.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElement.GetCoveredElement(System.Windows.FrameworkElement)">
      <summary>
            Creates new wrapper element for the specified owner element;
            </summary>
      <param name="owner">The element in UI for which we need to calculate layout.</param>
      <returns>The object that is used to calculate layout.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.CoverElementCollection">
      <summary>
            The <see cref="T:C1.WPF.Schedule.CoverElementCollection" /> is a observable keyed collection of <see cref="T:C1.WPF.Schedule.CoverElement" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementCollection.#ctor(C1.WPF.Schedule.CoverElementsPane)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.CoverElementCollection" /> class.
            </summary>
      <param name="owner">An owning <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> pane.</param>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementCollection.Owner">
      <summary>
            Gets a reference to the owning <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> pane.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementCollection.Item(System.Int32)">
      <summary>
            Gets an object by index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
      <remarks>The default implementation tries to get an object by key if integer value is specified.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementCollection.GetKeyForItem(C1.WPF.Schedule.CoverElement)">
      <summary>
            Returns the <see cref="P:C1.WPF.Schedule.CoverElement.DataObject" /> property value.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Schedule.CoveredElement">
      <summary>
            Defines a construction that describes a wrapper for the single covered element.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoveredElement.#ctor(System.Windows.FrameworkElement)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.CoveredElement" /> class.
            </summary>
      <param name="owner">The actual <see cref="T:System.Windows.FrameworkElement" />.</param>
    </member>
    <member name="P:C1.WPF.Schedule.CoveredElement.Owner">
      <summary>
            Gets a <see cref="T:System.Windows.FrameworkElement" /> which is wrapped 
            by the current <see cref="T:C1.WPF.Schedule.CoveredElement" /> instance.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.CoveredElementsCollection">
      <summary>
            The <see cref="T:C1.WPF.Schedule.CoveredElementsCollection" /> represents an observable collection of
            <see cref="T:System.Windows.FrameworkElement" />s.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoveredElementsCollection.GetKeyForItem(C1.WPF.Schedule.CoveredElement)">
      <summary>
            Extracts the key from the specified element.
            </summary>
      <param name="item">The <see cref="T:C1.WPF.Schedule.CoveredElement" /> item.</param>
      <returns>Returns <see cref="P:C1.WPF.Schedule.CoveredElement.Owner" /> property for the specified item.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.CoverElementChunk">
      <summary>
            The <see cref="T:C1.WPF.Schedule.CoverElementChunk" /> class represents an indivisible part of a UI for a data object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementChunk.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.CoverElementChunk" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementChunk.Owner">
      <summary>
            Gets the owning <see cref="T:C1.WPF.Schedule.CoverElement" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementChunk.CoveredElements">
      <summary>
            Gets the <see cref="T:C1.WPF.Schedule.CoveredElementsCollection" /> object representing the collection
            of elements covered by this <see cref="T:C1.WPF.Schedule.CoverElementChunk" /> object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementChunk.IsFirst">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value determining if this <see cref="T:C1.WPF.Schedule.CoverElementChunk" /> object
            is the first one in the representation of the data object.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementChunk.IsLast">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value determining if this <see cref="T:C1.WPF.Schedule.CoverElementChunk" /> object
            is the last one in the representation of the data object.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.CoverElementChunkCollection">
      <summary>
            The <see cref="T:C1.WPF.Schedule.CoverElementChunkCollection" /> represents the observable collection of
            <see cref="T:C1.WPF.Schedule.CoverElementChunk" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementChunkCollection.#ctor(C1.WPF.Schedule.CoverElement)">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.CoverElementChunkCollection" /> collection.
            </summary>
      <param name="owner">The owning <see cref="T:C1.WPF.Schedule.CoverElement" /> object.</param>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementChunkCollection.Owner">
      <summary>
            Gets the owning <see cref="T:C1.WPF.Schedule.CoverElement" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementChunkCollection.InsertItem(System.Int32,C1.WPF.Schedule.CoverElementChunk)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementChunkCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementChunkCollection.ClearItems">
      <summary>
            Overrides the default behavior.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementChunkCollection.SetItem(System.Int32,C1.WPF.Schedule.CoverElementChunk)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.ActiveDateTime">
      <summary>
            The <see cref="T:C1.WPF.Schedule.ActiveDateTime" /> class provides the Now dependency property that returns
            a current date/time and is being updated permanently over a specified period of time.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ActiveDateTime.NowProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.ActiveDateTime.Now" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ActiveDateTime.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.ActiveDateTime" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ActiveDateTime.#ctor(System.TimeSpan)">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.ActiveDateTime" /> object with the specified interval.
            </summary>
      <param name="interval">The <see cref="T:System.TimeSpan" /> value determining interval 
            of the <see cref="P:C1.WPF.Schedule.ActiveDateTime.Now" /> property refreshing.</param>
    </member>
    <member name="M:C1.WPF.Schedule.ActiveDateTime.Dispose">
      <summary>
            Releases all the resources used by the <see cref="T:C1.WPF.Schedule.ActiveDateTime" /> object. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ActiveDateTime.Now">
      <summary>
            Gets a current date/time value. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ActiveDateTime.Interval">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value determining interval 
            of the <see cref="P:C1.WPF.Schedule.ActiveDateTime.Now" /> property refreshing.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ActiveDateTime.Aligned">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining if value of the 
            <see cref="P:C1.WPF.Schedule.ActiveDateTime.Now" /> property should be aligned to the nearest millisecond.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.AddValueConverter">
      <summary>
            The <see cref="T:C1.WPF.Schedule.AddValueConverter" /> class is the abstract base class for the
            <see cref="T:C1.WPF.Schedule.IncrementConverter" /> and <see cref="T:C1.WPF.Schedule.DecrementConverter" /> classes.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.AddValueConverter.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.AddValueConverter" /></summary>
      <param name="delta">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.AddValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.AddValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.IncrementConverter">
      <summary>
            Represents a Binding converter that keeps binding target = binding source + 1,
            where source and target values are numeric.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.IncrementConverter" /> is a two-way converter. When converting in any 
            direction, a source value must be of any numeric type, and a converted value is
            of the System.Int32 type.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.IncrementConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.IncrementConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IncrementConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.IncrementConverter" /></summary>
    </member>
    <member name="T:C1.WPF.Schedule.DecrementConverter">
      <summary>
            Represents a Binding converter that keeps binding target = binding source - 1,
            where source and target values are numeric.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.DecrementConverter" /> is a two-way converter. When converting in any 
            direction, a source value must be of any numeric type, and a converted value is
            of the System.Int32 type.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.DecrementConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.DecrementConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DecrementConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.DecrementConverter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.SelectedEnumMemberConverterBase">
      <summary>
      </summary>
    </member>
    <member name="M:C1.WPF.Schedule.SelectedEnumMemberConverterBase.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.SelectedEnumMemberConverterBase" />.
            </summary>
      <param name="isFlag">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.SelectedEnumMemberConverterBase.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.SelectedEnumMemberConverterBase.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.SelectedEnumMemberConverter">
      <summary>
            Represents a Binding converter that indicates whether a binding source value
            is an enum member specified in the converter parameter.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.SelectedEnumMemberConverter" /> is a two-way converter. 
            <para>
            Source - Target behavior:
            </para><para>
            If a binding source value is an enum member specified in a converter parameter,
            then the binding target value is True; otherwise, False.
            </para><para>
            Target - Source behavior:
            </para><para>
            If target is True, then the source is the enum member specified in a parameter. 
            Otherwise, the source is not updated. 
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.SelectedEnumMemberConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.SelectedEnumMemberConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.SelectedEnumMemberConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.SelectedEnumMemberConverter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.SelectedEnumMemberFlagConverter">
      <summary>
            Represents a Binding converter that indicates whether a binding source value
            contains an enum member (flag) specified in the converter parameter.
            </summary>
      <remarks>
            Source - Target behavior:
            <para>
            If source value is an enum member and it contains a flag specified in a converter parameter, 
            then the target is True; otherwise, False. 
            </para><para>
            Target - Source behavior:
            </para><para>
            If target is True, then the source is the enum member specified in a parameter. 
            Otherwise, the source is not updated. 
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.SelectedEnumMemberFlagConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.SelectedEnumMemberFlagConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.SelectedEnumMemberFlagConverter.#ctor">
      <summary>
            Creates a new instance of <see cref="T:C1.WPF.Schedule.SelectedEnumMemberFlagConverter" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.EnsureEnumMemberConverter">
      <summary>
            Represents a Binding converter that indicates whether a binding source value
            is one of enum members specified in the converter parameter.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.EnsureEnumMemberConverter" /> is a two-way converter. 
            A converter parameter should be a string representing a list of enum member 
            names separated by the ';' or ',' character.  
            <para>
            Source - Target behavior:
            </para><para>
            Returns True if a source value is one of the enum members listed in a parameter; otherwise, False.
            </para><para>
            Target - Source behavior:
            </para><para>
            If target is True, then returns a first enum member (as enum, not as a string name) 
            from members listed in a converter parameter.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.EnsureEnumMemberConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.EnsureEnumMemberConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.EnsureEnumMemberConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.EnsureEnumMemberConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.TimeToStringConverter">
      <summary>
            Represents a Binding converter that converts a <see cref="T:System.TimeSpan" /> value to one of its string representations.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.TimeToStringConverter" /> is a two-way converter. A source value 
            must be a <see cref="T:System.TimeSpan" />, and a target value is a string that represents the TimeSpan.
            Converter parameter should contain valid format string corresponding to format strings
            used in the <see cref="M:System.DateTime.ToString(System.String)" /> method.
            If the converter parameter value is not specified, then the 'T' specifier is used.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.TimeToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.TimeToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.TimeToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.TimeToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DateTimeToStringConverter">
      <summary>
            Represents a Binding converter that converts a <see cref="T:System.DateTime" /> 
            to one of its string representations.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.DateTimeToStringConverter" /> is a two-way converter. The source value 
            must be the DateTime, and a target value is a string that represents the DateTime
            according to a format specifier defined in a converter parameter. The format
            specifier definition rules are the same as used in the 
            System.DateTime.ToString(format) method. A back conversion is performed via 
            the DateTime.DateTime.TryParseExact method if converter parameter is specified;
            otherwise, the DateTime.DateTime.TryParse method is used.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.DateTimeToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.DateTimeToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimeToStringConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.DateTimeToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimeToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimeToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.BooleanToVisibilityConverter">
      <summary>
            Represents a Binding converter that converts a <see cref="T:System.Boolean" /> 
            to the corresponding <see cref="T:System.Windows.Visibility" /> value.
            If ConverterParameter is not null, returns inverted value.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.BooleanToVisibilityConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.BooleanToVisibilityConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.BooleanToVisibilityConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.BooleanToVisibilityConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ColorToBrushConverter">
      <summary>
            Represents a Binding converter that converts a color to a brush.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.ColorToBrushConverter" /> is a two-way converter. The source value 
            must be a System.Windows.Media.Color, and the target value is a 
            System.Windows.Media.SolidColorBrush based on the color.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.ColorToBrushConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.ColorToBrushConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ChangeSignConverter">
      <summary>
            Represents a Binding converter that changes a sign of a numeric value.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.ChangeSignConverter" /> is a two-way converter. A source value must be
            of a numeric type, and a converted value has the same type as a source value.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.ChangeSignConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.ChangeSignConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ChangeSignConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ChangeSignConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ChangeThicknessSignConverter">
      <summary>
            Represents a Binding converter that changes a sign of each member of Thickness.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.ChangeThicknessSignConverter" /> is a two-way converter. The source value
            must be a Thickness object, and the converted value is a Thickness where all 
            edges has a thickness with the opposite sign.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.ChangeThicknessSignConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.ChangeThicknessSignConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ChangeThicknessSignConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ChangeThicknessSignConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.IsNullConverter">
      <summary>
            Represents a Binding converter that returns a Boolean value indicating whether a 
            source value is null.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.IsNullConverter" /> is a one-way converter. A target value returned by
            the converter is true if a source value is null; otherwise, a target value is false.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.IsNullConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.IsNullConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IsNullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.IsNullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Returns <see cref="F:System.Windows.Data.Binding.DoNothing" />. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.IsEmptyOrSpaceStringConverter">
      <summary>
            Represents a Binding converter that returns a Boolean value indicating whether a 
            source value is null or a string containing zero or more space characters only, or
            a not empty string.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.IsEmptyOrSpaceStringConverter" /> is a one-way converter. A target value 
            returned by the converter is true if a source value is null or a zero length string 
            or a string containing space characters only; otherwise, a target value is false.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.IsEmptyOrSpaceStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.IsEmptyOrSpaceStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IsEmptyOrSpaceStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.IsNotEmptyOrSpaceStringConverter">
      <summary>
            Represents a Binding converter that returns a Boolean value indicating whether a 
            source value is null or a string containing zero or more space characters only, or
            a not empty string.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.IsNotEmptyOrSpaceStringConverter" /> is a one-way converter. A target value 
            returned by the converter is false if a source value is null or a zero length string 
            or a string containing space characters only; otherwise, a target value is true.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.IsNotEmptyOrSpaceStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.IsNotEmptyOrSpaceStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IsNotEmptyOrSpaceStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.IsNotEmptyOrSpaceStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Returns Binding.DoNothing. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.IsTodayConverter">
      <summary>
            Represents a Binding converter that returns a <see cref="T:System.Boolean" /> value 
            indicating whether a source value is today's date.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.IsTodayConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.IsTodayConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.IsTodayConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.IsTodayConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.IsTodayConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Returns Binding.DoNothing. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ArithmeticOperationEnum">
      <summary>
            Enumerates arithmetic operations.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ArithmeticOperationEnum.Add">
      <summary>
            Represents an addition operation.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ArithmeticOperationEnum.Subtract">
      <summary>
            Represents a subtraction operation.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ArithmeticOperationEnum.Multiply">
      <summary>
            Represents a multiplication operation.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ArithmeticOperationEnum.Divide">
      <summary>
            Represents a division operation.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ArithmeticOperationEnum.Modulus">
      <summary>
            Represents a modulus operation.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.DoubleArithmeticOperationMultiConverter">
      <summary>
            Represents a MultiBinding converter that evaluates an arithmetic expression built as 
            a source list items joined with a specified arithmetic operator. 
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.DoubleArithmeticOperationMultiConverter" /> is a one-way converter. 
            A source list items must be of a numeric type (or a type that is convertible to
            System.Double, for example a string representation of a number), a converter 
            parameter defines an operator which is applied to source items, 
            and a target value is result of evaluation of
            the expression of the System.Double type. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.DoubleArithmeticOperationMultiConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.DoubleArithmeticOperationMultiConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DoubleArithmeticOperationMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="values">The array of values produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.DoubleArithmeticOperationMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetTypes">The array of types to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted array of values.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.NumberToStringConverter">
      <summary>
            Represents a Binding converter that converts an integer value to one of its string representations.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.NumberToStringConverter" /> is a two-way converter. A source value 
            must be a number, and a target value is a string that represents the integer.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.NumberToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.NumberToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.NumberToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.NumberToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ArithmeticSubtractConverter">
      <summary>
            Represents a Binding converter that returns the double value representing
            the difference between value and converter parameter.
            This is a one-way converter.
            </summary>
      <remarks>Converted value and converter parameter might be of any type which 
            implements IConvertible interface.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.ArithmeticSubtractConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.ArithmeticSubtractConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ArithmeticSubtractConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ArithmeticSubtractConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Not implemented.
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.Extensions">
      <summary>
            Class that provides static extension methods for several other classes.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.WeekOfMonthEnumToStringMultiConverter">
      <summary>
            Represents a Binding converter that returns a localized string representation of WeekOfMonthEnum member.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.WeekOfMonthEnumToStringMultiConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.WeekOfMonthEnumToStringMultiConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.WeekOfMonthEnumToStringMultiConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekOfMonthEnumToStringMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="values">The array of values produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WeekOfMonthEnumToStringMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetTypes">The array of types to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted array of values.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.WeekDaysEnumToStringMultiConverter">
      <summary>
            Represents a Binding converter that returns a localized string representation of WeekDaysEnum member.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.WeekDaysEnumToStringMultiConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.WeekDaysEnumToStringMultiConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.WeekDaysEnumToStringMultiConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekDaysEnumToStringMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="values">The array of values produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WeekDaysEnumToStringMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetTypes">The array of types to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted array of values.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ReminderDueInMultiConverter">
      <summary>
            Represents a MultiBinding converter that provides a value for the 'Due in' column
            of the Reminders dialog box.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.ReminderDueInMultiConverter" /> is a one-way converter. It takes as a
            source a list of two values - the first one is a DateTime when event will occur, 
            and the second one is a current DateTime - and returns a string with a phrase that
            describes how much time stays until the event. If the second source value is not
            specified then the DateTime.Now value is used.
            <para>
            The standard Reminders dialog box uses this converter in conjunction with 
            the <see cref="T:C1.WPF.Schedule.ActiveDateTime" /> object whose <see cref="P:C1.WPF.Schedule.ActiveDateTime.Now" /> property 
            provides a value for the second source value of the converter.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.ReminderDueInMultiConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.ReminderDueInMultiConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ReminderDueInMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="values">The array of values produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ReminderDueInMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetTypes">The array of types to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted array of values.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.MultiBindingToListMultiConverter">
      <summary>
            Represents a MultiBinding converter that returns <see cref="T:System.Collections.Generic.List`1" /> 
            list built from the array of input values.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.MultiBindingToListMultiConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.MultiBindingToListMultiConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.MultiBindingToListMultiConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.MultiBindingToListMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="values">The array of values produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.MultiBindingToListMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetTypes">The array of types to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted array of values.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.WeekDaysToIntConverter">
      <summary>
            Represents a Binding converter that converts a WeekDaysEnum value to integer 
            representations.
            </summary>
      <remarks>
            If the WeekDaysEnum value represents a combination of several flags, this converter will throw away
            extra flags and return an integer value corresponding to the single flag value.
            Use this converter to receive a valid value of the selected index in comboboxes which use
            WeekDaysEnum flags as the data source.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.WeekDaysToIntConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.WeekDaysToIntConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WeekDaysToIntConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WeekDaysToIntConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.RemindersToStringConverter">
      <summary>
            Represents a Binding converter that returns a string title for Reminders Window.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.RemindersToStringConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.RemindersToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.RemindersToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.RemindersToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.RemindersToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ImportanceEnumMemberConverter">
      <summary>
            Represents a Binding converter that indicates whether a binding source value
            is an enum member specified in the converter parameter.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.ImportanceEnumMemberConverter" /> is a two-way converter. 
            <para>
            Source - Target behavior:
            </para><para>
            If a binding source value is an enum member specified in a converter parameter,
            then a binding target value is True; otherwise, False.
            </para><para>
            Target - Source behavior:
            </para><para>
            If target is True, then the source is an enum member specified in a parameter.
            If target is False and parameter is <see cref="F:C1.C1Schedule.ImportanceEnum.High" /> or <see cref="F:C1.C1Schedule.ImportanceEnum.Low" />, 
            then source is <see cref="F:C1.C1Schedule.ImportanceEnum.Normal" />.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.ImportanceEnumMemberConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.ImportanceEnumMemberConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ImportanceEnumMemberConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ImportanceEnumMemberConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method when it propagates 
            a value from the binding target to the binding source. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ResourceLoader">
      <summary>
            Class with static methods used for enumerating and retrieving application
            resources.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ResourceLoader.GetStream(System.String)">
      <summary>
            Loads the specified manifest resource from the entry assembly. 
            </summary>
      <param name="name">The case-insensitive name of the manifest resource being requested.</param>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.ResourceLoader.GetStream(System.Reflection.Assembly,System.String)">
      <summary>
            Loads the specified manifest resource from the specified assembly. 
            </summary>
      <param name="a">An <see cref="T:System.Reflection.Assembly" /> to load resource from.</param>
      <param name="name">The case-insensitive name of the manifest resource being requested.</param>
      <returns>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.NumberStringValidator">
      <summary>
            Represents a custom validation rule for number strings.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.NumberStringValidator.GetCulture(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the Culture attached property for a given DependencyObject. 
            </summary>
      <param name="obj">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is read.</param>
      <returns>The Culture property value of the specified DependencyObject.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.NumberStringValidator.SetCulture(System.Windows.DependencyObject,System.Globalization.CultureInfo)">
      <summary>
            Sets the value of the Culture attached property for a given DependencyObject.
            </summary>
      <param name="obj">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is set.</param>
      <param name="value">The Culture property value to be set on the specified DependencyObject.</param>
    </member>
    <member name="F:C1.WPF.Schedule.NumberStringValidator.CultureProperty">
      <summary>
            The Culture attached property can be used to localize validation results:
            &lt;TextBox c1sched:NumberStringValidator.Culture=''{Binding Path=CalendarHelper.Culture, 
            			RelativeSource={RelativeSource AncestorType={x:Type c1sched:C1Scheduler}}, Mode=OneWay}''/&gt;
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NumberStringValidator.Format">
      <summary>
            Gets or sets formatting strings which should be used at number conversion.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NumberStringValidator.Min">
      <summary>
            Gets or sets a minimum allowable value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NumberStringValidator.Max">
      <summary>
            Gets or sets a maximum allowable value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NumberStringValidator.ValidationCulture">
      <summary>
            Gets or sets culture used for localizing validation results.
            If this property is null, the <see cref="T:System.Globalization.CultureInfo" /> specified in Validate 
            method parameters will be used.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.NumberStringValidator.Validate(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Performs validation checks on a value. 
            </summary>
      <param name="value">The value from the binding target to check.</param>
      <param name="cultureInfo">The culture to use in this rule.</param>
      <returns>A <see cref="T:System.Windows.Controls.ValidationResult" /> object.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DayOfMonthValidationRule">
      <summary>
            Represents a custom validation rule for strings representing month days.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfMonthValidationRule.Month">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.Schedule.DayOfMonthChecker" /> object holding the month number.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DayOfMonthValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Performs validation checks on a value. 
            </summary>
      <param name="value">The value from the binding target to check.</param>
      <param name="cultureInfo">The culture to use in this rule.</param>
      <returns>A <see cref="T:System.Windows.Controls.ValidationResult" /> object.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DayOfMonthChecker">
      <summary>
            The <see cref="T:C1.WPF.Schedule.DayOfMonthChecker" /> is a dependency object holding Month dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DayOfMonthChecker.Month">
      <summary>
            Gets or sets a 1-based integer value determining the month number.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.DayOfMonthChecker.MonthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.DayOfMonthChecker.Month" /> dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.DayOfMonthValidator">
      <summary>
            The <see cref="T:C1.WPF.Schedule.DayOfMonthValidator" /> is a static class which can be used in xaml 
            to specify month number and culture for validation rule via binding:
            &lt;TextBox c1sched:DayOfMonthValidator.Month=''{Binding Path=MonthOfYear}''/&gt;
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DayOfMonthValidator.GetMonth(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the Month attached property for a given DependencyObject. 
            </summary>
      <param name="obj">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is read.</param>
      <returns>The Month property value of the specified DependencyObject.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.DayOfMonthValidator.SetMonth(System.Windows.DependencyObject,System.Int32)">
      <summary>
            Sets the value of the Month attached property for a given DependencyObject.
            </summary>
      <param name="obj">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is set.</param>
      <param name="value">The Month property value to be set on the specified DependencyObject.</param>
    </member>
    <member name="F:C1.WPF.Schedule.DayOfMonthValidator.MonthProperty">
      <summary>
            The Month attached property can be used to specify which month is used
            for day of month validation.
            </summary>
      <remarks>Month number is a 1-based integer value.</remarks>
    </member>
    <member name="T:C1.WPF.Schedule.SizingType">
      <summary>
            Describes how UI element is sized with respect to the available space.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SizingType.Fixed">
      <summary>
            The element size is fixed.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SizingType.Proportional">
      <summary>
            Element size depends on available space. 
            Every element has the same size which is determined so that all elements fit into available space.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.SizingType.ExtendedSingle">
      <summary>
            If element has no intersection with other elements, it will occupy all available space.
            If there are 2 or more intersecting elements, they all will have fixed size.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.CoverElementsPane">
      <summary>
            Provides a surface for painting UI elements over the arbitrary layout.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> allows you to visually represent a set of UI elements 
            relative to UI elements representing the underlying UI. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane.PaneNameProperty">
      <summary>
            Identifies the PaneName attached property.
            If you use several <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> objects in a single template, 
            you should specify this property on a covered element that has 
            the <see cref="F:C1.WPF.Schedule.CoverElementsPane.OrientationProperty" /> property set.
            Set this value to the value of the <see cref="P:System.Windows.FrameworkElement.Name" />
            property of the corresponding <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> object. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane.OrientationProperty">
      <summary>
            Identifies the <see cref="T:System.Windows.Controls.Orientation" /> attached property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane.CoverElementsSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CoverElementsPane.CoverElementsSize" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane.CoverElementsMarginProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CoverElementsPane.CoverElementsMargin" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane.CoverElementsOverflowProperty">
      <summary>
            Identifies the CoverElementsOverflow attached property.
            Being set to true on a covered element that has the 
            <see cref="F:C1.WPF.Schedule.CoverElementsPane.OrientationProperty" /> property set, indicates that there are too
            many covering elements to be represented in the element. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.IsDragDropDisabled">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value that indicates whether 
            the <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> doesn't allow resizing and drag operations. 
            This is a dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane.IsDragDropDisabledProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CoverElementsPane.IsDragDropDisabled" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.Owner">
      <summary>
            Gets the object representing the <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> object owner.
            This is a dependency property. Default value is null.
            </summary>
      <remarks>The <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> class doesn't use this property. 
            It is meant for using by external or derived classes.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane.OwnerProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.CoverElementsPane.Owner" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane._needSort">
      <summary>
            Determines whether HostElementsList should be sorted after it is filled.
            </summary>
      <remarks>Set this property to true in the IsPaneElementInternal override if collected host elements should be sorted
            after collection.</remarks>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane._lastStart">
      <summary>
            Might be used in derived classes during HostElementsList collection.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.CoverElementsPane._isAboutToUnload">
      <summary>
            Determines whether the pane is about to be unloaded.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> pane.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.ContentKind">
      <summary>
            Gets or sets the type of content acceptable by the current instance of <see cref="T:C1.WPF.Schedule.CoverElementsPane" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.SizingType">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.Schedule.CoverElementsPane.SizingType" /> values specifying how <see cref="T:C1.WPF.Schedule.CoverElementsPane" />
            determines UI elements size. The default value is SizingType.Fixed.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.DataCoverElements">
      <summary>
            Gets a list of <see cref="T:C1.WPF.Schedule.CoverElement" /> objects that are drawn on this
            CoverElementPane.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.ChunkBreakingAngle">
      <summary>
            Gets or sets a <see cref="T:System.Double" /> value specifying the breaking angle for painted UI elements.
            </summary>
      <remarks>The <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> lays out UI elements over the arbitrary UI.
            If the layout direction is changed by an angle greater than what is specified in 
            the <see cref="P:C1.WPF.Schedule.CoverElementsPane.ChunkBreakingAngle" /> property, then painted UI element will be broken into pieces.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.ExtendOnOverflow">
      <summary>
            Gets or sets a <see cref="T:System.Boolean" /> value, specifying the <see cref="T:C1.WPF.Schedule.CoverElementsPane" />  
            behavior in the case when covering elements do not fit into the available space.
            If False, the <see cref="F:C1.WPF.Schedule.CoverElementsPane.CoverElementsOverflowProperty" /> will be set to True. This is default behavior.
            If True, the covered element will be extended in order to accommodate all covering elements.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.CoverElementsMargin">
      <summary>
            Gets or sets a <see cref="T:System.Double" /> value, determining margins of the cover elements.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CoverElementsPane.CoverElementsSize">
      <summary>
            Gets or sets a <see cref="T:System.Double" /> value, determining the size of the cover elements.
            This is dependency property. 
            </summary>
      <remarks> This property value determines either height or width of the cover elements
            depending on the Orientation property value. For horizontal orientation this property determines element height,
            and for vertical orientation it determines element width.
            Note, this property only makes sense if <see cref="P:C1.WPF.Schedule.CoverElementsPane.SizingType" /> property value is SizingType.Fixed or SizingType.ExtendedSingle.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.GetPaneName(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the PaneName attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is read.</param>
      <returns>The <see cref="T:System.String" /> value of the specified element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.SetPaneName(System.Windows.FrameworkElement,System.String)">
      <summary>
            Sets the value of the PaneName attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> for which the property value is set.</param>
      <param name="value">The <see cref="T:System.String" /> value to be set on the specified element.</param>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.GetOrientation(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the Orientation attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is read.</param>
      <returns>The <see cref="T:System.Windows.Controls.Orientation" /> value of the specified element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.SetOrientation(System.Windows.FrameworkElement,System.Nullable{System.Windows.Controls.Orientation})">
      <summary>
            Sets the value of the Orientation attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> for which the property value is set.</param>
      <param name="value">The <see cref="T:System.Windows.Controls.Orientation" /> value to be set on the specified element.</param>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.GetCoverElementsOverflow(System.Windows.FrameworkElement)">
      <summary>
            Gets the value of the CoverElementsOverflow attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> from which the property value is read.</param>
      <returns>The <see cref="T:System.Boolean" /> value of the specified element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.SetCoverElementsOverflow(System.Windows.FrameworkElement,System.Boolean)">
      <summary>
            Sets the value of the CoverElementsOverflow attached property for a given framework element. 
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> for which the property value is set.</param>
      <param name="value">The <see cref="T:System.Boolean" /> value to be set on the specified element.</param>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.OnApplyTemplate">
      <summary>
            Overrides the default behavior.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.GetCoverElement(System.Object)">
      <summary>
            Creates new wrapper to represent cover element.
            </summary>
      <param name="dataObject">The represented data object.</param>
      <returns>Return new cover element.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.IsPaneElementInternal(System.Windows.FrameworkElement)">
      <summary>
            Checks whether specified element is covered by the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> instance.
            </summary>
      <remarks>This method is performance critical. Override it in derived class to perform faster check based on
            element data context and derived class properties.</remarks>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to check.</param>
      <returns>Returns True if specified element is coverred by the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> 
            instance; False otherwise.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.GetHosts">
      <summary>
            Gets the list of the <see cref="T:System.Windows.FrameworkElement" /> elements, which are the root of visual tree to search covered elements.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.IsHostElementInternal(System.Windows.FrameworkElement)">
      <summary>
            Checks whether specified element is hosted in the same host as the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> instance.
            </summary>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to check.</param>
      <returns>Returns True if specified element is hosted in the same host as the current <see cref="T:C1.WPF.Schedule.CoverElementsPane" /> 
            instance; False otherwise.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.GetLaneSize(C1.WPF.Schedule.SizingType,System.Object,System.Double,System.Int32)">
      <summary>
            Returns the size which should be used to draw cover element according to specified sizing type, 
            available space and total lane count.
            </summary>
      <param name="sizingType">The <see cref="P:C1.WPF.Schedule.CoverElementsPane.SizingType" /> value.</param>
      <param name="dataContext">The cover element data context. It can be used to determine additional sizing conditions in overrides.</param>
      <param name="availableSpace">The <see cref="T:System.Double" /> value specifying avaliable size.</param>
      <param name="totalLanes">The <see cref="T:System.Int32" /> value specifying the number of intersecting elements (1 for the single element without intersection).</param>
      <returns>The <see cref="T:System.Double" /> value specifying actual cover element size (height or width depending on the orientation.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.CoverElementsPane.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>True if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.NestedPropertySetter">
      <summary>
            Represents a property setter which is being used as an item of
            the <see cref="P:C1.WPF.Schedule.C1Scheduler.NestedSetters" /> collection and is able to
            assign a value to a <see cref="T:C1.WPF.Schedule.C1Scheduler" /> nested property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.NestedPropertySetter.PropertyNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.NestedPropertySetter.PropertyName" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.NestedPropertySetter.ValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.NestedPropertySetter.Value" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NestedPropertySetter.PropertyName">
      <summary>
            Gets or sets a path to a nested property relative to the 
            <see cref="T:C1.WPF.Schedule.C1Scheduler" /> class. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NestedPropertySetter.Value">
      <summary>
            Gets or sets a value that should be assigned to the <see cref="P:C1.WPF.Schedule.NestedPropertySetter.PropertyName" />
            property. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.NestedPropertySetter.TargetObject">
      <summary>
            This property is used for internal purposes only.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.NestedPropertySetter.Apply(System.Object)">
      <summary>
            This method is used for internal purposes only.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.NestedPropertySetterCollection">
      <summary>
            Represents a collection of <see cref="T:C1.WPF.Schedule.NestedPropertySetter" /> objects.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.NestedPropertySetterCollection.#ctor(System.Object)">
      <summary>
            Initialize a new instance of the <see cref="T:C1.WPF.Schedule.NestedPropertySetterCollection" /> class.
            </summary>
      <param name="owner">The owning object.</param>
    </member>
    <member name="P:C1.WPF.Schedule.NestedPropertySetterCollection.Owner">
      <summary>
            Gets the owning object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.NestedPropertySetterCollection.InsertItem(System.Int32,C1.WPF.Schedule.NestedPropertySetter)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.NestedPropertySetterCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.NestedPropertySetterCollection.ClearItems">
      <summary>
            Overrides the default behavior.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.PilePanel">
      <summary>
            Positions child elements one over another as it is done by the <see cref="T:System.Windows.Controls.Grid" />
            panel with single row and single column.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.PilePanel.#ctor">
      <summary>
            Creates the new instance of the <see cref="T:C1.WPF.Schedule.PilePanel" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.PilePanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Arranges the content of a <see cref="T:C1.WPF.Schedule.PilePanel" /> element. 
            </summary>
      <param name="arrangeSize">The <see cref="T:System.Windows.Size" /> that this element 
            should use to arrange its child elements.</param>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the arranged size 
            of this <see cref="T:C1.WPF.Schedule.PilePanel" /> element and its children.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.PilePanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Measures the child elements of a <see cref="T:C1.WPF.Schedule.PilePanel" /> in anticipation 
            of arranging them during the <see cref="M:C1.WPF.Schedule.PilePanel.ArrangeOverride(System.Windows.Size)" /> pass. 
            </summary>
      <param name="constraint">An upper limit <see cref="T:System.Windows.Size" /> that should not be exceeded.</param>
      <returns>The <see cref="T:System.Windows.Size" /> that represents the desired size of the element.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.PropertyBridge">
      <summary>
            Represents a <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> with an arbitrary
            type of synchronized properties.
            </summary>
      <remarks>
            See the <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> description for details.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.PropertyBridge.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.PropertyBridge" /> class.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.PropertyBridge`1">
      <summary>
            Represents a class that exposes two dependency properties and keeps 
            their values equal.
            </summary>
      <typeparam name="TPropType">
            Defines a type of exposed dependency properties.
            </typeparam>
      <remarks>
            For a usage in XAML appeal to the non-generic class derived from the
            <see cref="T:C1.WPF.Schedule.PropertyBridge`1" />, for example use the
            <see cref="T:C1.WPF.Schedule.PropertyBridge" /> class.
            <para><see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> exposes two dependency properties, 
            <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" /> and 
            <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" />, and keeps these property values 
            equal, that is when a value of one property is being changed then the other 
            property is being set to the same value. This simple behavior allows you to 
            use non-DependencyProperty properties along with WPF mechanisms that are 
            designed to work with DependencyProperty-only properties. 
            </para><para>
            The behavioral difference between the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" />
            and <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> properties lies in the fact that after
            an initialization of XAML tree where the <see cref="T:C1.WPF.Schedule.PropertyBridge`1" />
            element is included, the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> property value 
            is initialized with the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" /> property value – 
            in all other respects the behavior of these properties is equivalent.
            </para><para>
            Note that if you need to use <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> as a 
            standalone object in run-time, that is without including it in a XAML tree,
            you need to call its BeginInit and EndInit methods – only after this
            action <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> will start property value
            synchronization.
            </para><para>
            The useful examples of 
            the <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> class usage are:
            </para><list type="bullet"><item><term>
            Binding between two non-dependency properties.
            </term><description>
            Assign the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" /> property with a TwoWay binding 
            having one non-dependency property as a source, and the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> property 
            with a TwoWay binding having another non-dependency property as a source. 
            After this, the non-dependency properties will behave as bound ones. 
            This only works well if classes exposing the mentioned non-dependency properties 
            implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface.
            </description></item><item><term>
            Setting a non-dependency property value from within a Trigger.
            </term><description>
            Assign the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" /> property with a TwoWay or 
            OneWayToSource binding having one non-dependency property as a source, and 
            by specifying a Trigger's Setter set a value to the 
            <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> property of 
            <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> – this value will be assigned to the 
            non-dependency property which is bound to 
            <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" />.
            </description></item><item><term>
            Many-to-many binding.
            </term><description>
            Assign the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" /> and 
            <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> with MultiBinding 
            bindings – you will get the many-to-many binding.
            </description></item><item><term>
            Assign value to a nested property.
            </term><description>
            Set up the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> property with 
            a TwoWay or OneWayToSource binding where Binding.Path references a nested property, 
            then assign the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" /> property 
            (directly or from within a Setter) with a value - as a result the nested property 
            will be assigned to this value.
            </description></item><item><term>
            Assign a property of an object that is not accessible directly.
            </term><description>
            Similar to the way explained in the previous item, and using 
            Binding.RelativeSource in a 
            binding to the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> property, you may 
            assign a property value of an element that can't be referenced directly in XAML, 
            for example TemplatedParent or some parent element in visual tree.
            </description></item></list><para>
            The <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> class is derived from the <see cref="T:System.Windows.FrameworkElement" /> class
            and, in order to work properly, should be placed somewhere in the visual tree among elements 
            that it should communicate with. The derivation from the <see cref="T:System.Windows.FrameworkElement" /> class is intentional; 
            it allows the <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> to be part of a visual tree, 
            which in turn provides bindings established on its properties with a correct context. 
            </para><para>
            The <see cref="P:System.Windows.UIElement.Visibility" /> property of the <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> element 
            is set to Collapsed by default, so this object will not appear on a screen and doesn't participate 
            in layout measurement and arrangement processes, that is, it doesn't affect
            a visual representation of the visual tree where it placed in.
            </para></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.PropertyBridge`1.SourceProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Source" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.PropertyBridge`1.TargetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.PropertyBridge`1.Target" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.PropertyBridge`1.#ctor">
      <summary>
            Creates an instance of the <see cref="T:C1.WPF.Schedule.PropertyBridge" /> element.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.PropertyBridge`1.Source">
      <summary>
            Gets or sets a source value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.PropertyBridge`1.Target">
      <summary>
            Gets or sets a target value.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.PropertyBridge`1.OnInitialized(System.EventArgs)">
      <summary>
            Synchronize the source and target properties after initializing.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.BindingTargetsBridge">
      <summary>
            Represents a class that keeps values of two binding targets equal.
            </summary>
      <remarks>
            This class is similar to the <see cref="T:C1.WPF.Schedule.PropertyBridge`1" /> class,
            but synchronized values are represented by bindings.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.BindingTargetsBridge.SourceBinding">
      <summary>
            Gets or sets a source binding.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.BindingTargetsBridge.TargetBinding">
      <summary>
            Gets or sets a target binding.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.BindingTargetsBridge.BindingsTargetType">
      <summary>
            Gets or sets a type of synchronized bindings' target values, which is used
            for a value conversion.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.BindingTargetsBridge.OnInitialized(System.EventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.SchedulerLocExtension">
      <summary>
            Represents a <see cref="T:System.Windows.Markup.MarkupExtension" /> providing localized strings from .resx resources 
            for the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
      <remarks>This extension uses culture settings of the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control and
            updates target objects at changing C1Scheduler.CalendarHelper.Culture property value.</remarks>
    </member>
    <member name="M:C1.WPF.Schedule.SchedulerLocExtension.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.SchedulerLocExtension" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.SchedulerLocExtension.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.SchedulerLocExtension" /> class.
            </summary>
      <param name="key">The <see cref="T:System.String" /> value determining resource key.
            Three types are supported:
            - "Key" 
            - "Dictinary:Key"
            - "Assembly:Dictionary:Key
            </param>
      <param name="defaultValue">The default value used as fallback string.</param>
    </member>
    <member name="M:C1.WPF.Schedule.SchedulerLocExtension.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.SchedulerLocExtension" /> class.
            </summary>
      <param name="key">The <see cref="T:System.String" /> value determining resource key.
            Three types are supported:
            - "Key" 
            - "Dictinary:Key"
            - "Assembly:Dictionary:Key
            </param>
    </member>
    <member name="T:C1.WPF.Schedule.ValidationErrorIndicator">
      <summary>
            The <see cref="T:C1.WPF.Schedule.ValidationErrorIndicator" /> represents the framework element 
            used for collecting validation errors.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ValidationErrorIndicator.SourceElementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.ValidationErrorIndicator.SourceElement" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ValidationErrorIndicator.HasErrorsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.ValidationErrorIndicator.HasErrors" /> dependency property.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.ValidationErrorIndicator.HasNoErrorsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.ValidationErrorIndicator.HasNoErrors" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ValidationErrorIndicator.SourceElement">
      <summary>
            Gets or sets a <see cref="T:System.Windows.UIElement" /> for which validation errors should be collected.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ValidationErrorIndicator.HasErrors">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether the Source element has validation errors.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.ValidationErrorIndicator.HasNoErrors">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether the Source element has no validation errors.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ValidationErrorIndicator.OnInitialized(System.EventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.CalendarHelper">
      <summary>
            Provides auxiliary properties providing calendar specific information.
            </summary>
    </member>
    <member name="E:C1.WPF.Schedule.CalendarHelper.PropertyChanged">
      <summary>
            Occurs when the property of <see cref="T:C1.WPF.Schedule.CalendarHelper" /> object is changed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CalendarHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.CalendarHelper" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.WeekStart">
      <summary>
            Gets or sets the <see cref="T:System.DayOfWeek" /> value determining
            the first day of the week. Default is system settings.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.WorkDays">
      <summary>
             Gets or sets the <see cref="P:C1.WPF.Schedule.CalendarHelper.WorkDays" /> object containing the 
             set of working days in one week.
             </summary>
      <remarks>Note: WorkingWeekView style should set <see cref="P:C1.WPF.Schedule.C1Scheduler.VisualTimeSpan" /> 
             property to 7 days.	The actual number of displayed days will depend on 
             the <see cref="P:C1.WPF.Schedule.CalendarHelper.WorkDays" /> list.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.StartDayTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying the beginning 
            of the working time.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.EndDayTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying 
            the end of the working time.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.DateTimeKind">
      <summary>
            Gets or sets a <see cref="P:C1.WPF.Schedule.CalendarHelper.DateTimeKind" /> value specifying DateTime kind
            used for saving <see cref="T:System.DateTime" /> values.
            </summary>
      <remarks>
            This property only has an influence on the process of saving data to
            the AppointmentStorage.DataSource object and on export operations.
            All properties of the <see cref="T:C1.C1Schedule.Appointment" /> and <see cref="T:C1.C1Schedule.RecurrencePattern" />
            objects represent current system local time values.
            Set this property to DateTimeLind.Utc if you need to save
            data with universal time. In such case the data will be converted 
            to the local time and back at every read/write operation.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.Info">
      <summary>
            Gets the underlying <see cref="T:C1.C1Schedule.CalendarInfo" /> object. For internal use only.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.Holidays">
      <summary>
            Gets or sets the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> object which holds
            the list of holidays (non-working days in addition to weekends).
            You cannot set this property in XAML.
            </summary>
      <remarks>Setting this property copies items from the new value to the
            underlying collection.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.WeekendExceptions">
      <summary>
            Gets or sets the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> object which holds
            the list of weekend days which should be working.
            </summary>
      <remarks>Setting this property copies items from the new value to the
            underlying collection.</remarks>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.FullMonthNames">
      <summary>
            Gets an array of culture specific full month names.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.CalendarHelper.FullDayNames">
      <summary>
            Gets an array of culture specific full day names.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.CalendarHelper.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>true if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.WorkDaysConverter">
      <summary>
            The <see cref="T:C1.WPF.Schedule.WorkDaysConverter" /> provides a type converter to convert <see cref="T:C1.C1Schedule.WorkDays" /> objects 
            to and from various other representations. 
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.WorkDaysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type 
            to the type of this converter, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>True if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WorkDaysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WorkDaysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>True if this converter can perform the conversion; otherwise, false.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.WorkDaysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.ReentrantObservableCollection`1">
      <summary>
            The <see cref="T:C1.WPF.Schedule.ReentrantObservableCollection`1" /> class represents the same
            interface and functionality as the <see cref="T:C1.WPF.Schedule.DeferrableObservableCollection`1" />
            with one exception: it allows collection changing in event handlers for 
            the <see cref="E:C1.WPF.Schedule.ReentrantObservableCollection`1.CollectionChanged" /> event.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="E:C1.WPF.Schedule.ReentrantObservableCollection`1.CollectionChanged">
      <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.BeginUpdate">
      <summary>
            Prevents raising events until the <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.EndUpdate" /> method is called. 
            </summary>
      <remarks>The <see cref="T:C1.WPF.Schedule.ReentrantObservableCollection`1" /> keeps count 
            of calls to <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.BeginUpdate" /> method. 
            Be sure to call <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.EndUpdate" /> method for each call to <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.BeginUpdate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.EndUpdate">
      <summary>
            Enables raising events. If collection has been changed since the call 
            to the <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.BeginUpdate" /> method, raises PropertyChanged and CollectionChanged events.
            </summary>
      <remarks>The <see cref="T:C1.WPF.Schedule.ReentrantObservableCollection`1" /> keeps count 
            of calls to <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.BeginUpdate" /> method. 
            Be sure to call <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.EndUpdate" /> method for each call to <see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.BeginUpdate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.Schedule.ReentrantObservableCollection`1.InUpdate">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value determining whether the <see cref="T:C1.WPF.Schedule.ReentrantObservableCollection`1" />
            is in update mode (<see cref="M:C1.WPF.Schedule.ReentrantObservableCollection`1.BeginUpdate" /> has been called).
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises CollectionChanged event if the <see cref="T:C1.WPF.Schedule.ReentrantObservableCollection`1" />
            is not in update mode.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.RemoveItem(System.Int32)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.ClearItems">
      <summary>
            Overrides the default behavior.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
      <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
      <param name="newIndex">The zero-based index specifying the new location of the item.</param>
    </member>
    <member name="M:C1.WPF.Schedule.ReentrantObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>
            Implements item moving from one location to another.
            </summary>
      <param name="oldIndex">
      </param>
      <param name="newIndex">
      </param>
    </member>
    <member name="T:C1.WPF.Schedule.DateList">
      <summary>
            The <see cref="T:C1.WPF.Schedule.DateList" /> class represents the observable collection
            of <see cref="T:System.DateTime" /> values. The collection contains unique
            values only. Every item in collection is a <see cref="T:System.DateTime" /> value
            containing the date part only.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.DateList" /> collection.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateList.Add(System.DateTime)">
      <summary>
            Adds a <see cref="T:System.DateTime" /> value to the end of the Collection. 
            </summary>
      <param name="item">The <see cref="T:System.DateTime" /> value to be added to the end of the Collection. </param>
    </member>
    <member name="M:C1.WPF.Schedule.DateList.Contains(System.DateTime)">
      <summary>
            Returns true if specified item exists in the Collection.
            </summary>
      <param name="item">An item to search for.</param>
      <returns>True if item exists in the Collection.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DateTimeInfo">
      <summary>
            Provides additional info about a DateTime in a specified culture.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimeInfo.#ctor(System.DateTime,C1.WPF.Schedule.CalendarHelper)">
      <summary>
            Initializes the new instance of the <see cref="T:C1.WPF.Schedule.DateTimeInfo" /> class.
            </summary>
      <param name="baseDateTime">The base <see cref="T:System.DateTime" /> value.</param>
      <param name="helper">The <see cref="P:C1.WPF.Schedule.DateTimeInfo.CalendarHelper" /> object holding 
            the calendar specific information.</param>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInfo.BaseDateTime">
      <summary>
            The base <see cref="T:System.DateTime" /> value.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInfo.MonthFullName">
      <summary>
            Gets the full month name according to the <see cref="P:C1.WPF.Schedule.DateTimeInfo.CalendarHelper" /> culture settings.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInfo.Year">
      <summary>
            Gets the <see cref="T:System.String" /> value determining the year representation 
            according to the <see cref="P:C1.WPF.Schedule.DateTimeInfo.CalendarHelper" /> culture settings.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInfo.CalendarHelper">
      <summary>
            Gets the <see cref="P:C1.WPF.Schedule.DateTimeInfo.CalendarHelper" /> object which is used for
            retrieving calendar specific information.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInfo.WeekOfYear">
      <summary>
            Gets a week of year number.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInfo.WeekOfYearFullWeek">
      <summary>
            Gets a week number in a supposition that last days of a year and the first 
            days of a next year that belongs to the same week having the same week number.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInfo.IsWeekend">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value determining whether this date is weekend or
            holiday.
            </summary>
    </member>
    <member name="E:C1.WPF.Schedule.DateTimeInfo.PropertyChanged">
      <summary>
            Occurs when property value is changed.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.TimeRulerConverter">
      <summary>
            Represents a Binding converter that converts minute part of 
            DateTimeInfo start time to its string representation.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.TimeRulerConverter" /> is a one-way converter. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.TimeRulerConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.TimeRulerConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.TimeRulerConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.TimeRulerConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DateTimeInfoToStringConverter">
      <summary>
            Represents a MultiValue binding converter that converts a <see cref="T:C1.WPF.Schedule.DateTimeInfo" /> object 
            to one of its string representations.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.DateTimeInfoToStringConverter" /> is a one-way converter. It takes as a
            source a list of 3 values:
            <list type="bullet"><item>the <see cref="T:C1.WPF.Schedule.DateTimeInfo" /> object</item><item>the DateTime format specified string. The format specified definition rules 
            are the same as used in the System.DateTime.ToString(format) method. This parameter is optional.</item><item>The <see cref="T:System.Globalization.CultureInfo" /> object used for converting. This parameter is optional.</item></list></remarks>
    </member>
    <member name="F:C1.WPF.Schedule.DateTimeInfoToStringConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.DateTimeInfoToStringConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimeInfoToStringConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="values">The values produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">This parameter is not used.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimeInfoToStringConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
      <summary>
            Does nothing. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetTypes">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.TimeRulerHelper">
      <summary>
            Supplies hours and minutes string representation based on the specified <see cref="T:C1.WPF.Schedule.VisualInterval" /> object,
            current culture and <see cref="P:C1.WPF.Schedule.C1Scheduler.TimeFormat" /> property value.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.TimeRulerHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.TimeRulerHelper" /> element.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.TimeRulerHelper.Interval">
      <summary>
            Gets or sets the <see cref="T:C1.WPF.Schedule.VisualInterval" /> object.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.TimeRulerHelper.IntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.TimeRulerHelper.Interval" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.TimeRulerHelper.Hours">
      <summary>
            Gets the <see cref="T:System.String" /> value representing the hours part of the VisualInterfal.Start time.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.TimeRulerHelper.HoursProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.TimeRulerHelper.Hours" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.TimeRulerHelper.Minutes">
      <summary>
            Gets the <see cref="T:System.String" /> value representing the minutes part of the VisualInterfal.Start time.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.TimeRulerHelper.IsZeroMinuteProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.TimeRulerHelper.IsZeroMinute" /> dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.TimeRulerHelper.IsZeroMinute">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value determining whether VisualInterval.StartTime.Minute property is 0.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.TimeRulerHelper.MinutesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.TimeRulerHelper.Minutes" /> dependency property.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.TimeRulerVisibilityConverter">
      <summary>
            Represents a Binding converter that returns a Visibility value for the time ruler UI part.
            </summary>
      <remarks>
        <see cref="T:C1.WPF.Schedule.TimeRulerVisibilityConverter" /> is a one-way converter. 
            Returns Visibility.Collapsed if specified <see cref="T:System.TimeSpan" /> value is greater or equal to 1 day.
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.TimeRulerVisibilityConverter.Default">
      <summary>
            Gets an instance of <see cref="T:C1.WPF.Schedule.TimeRulerVisibilityConverter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.TimeRulerVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts a value. The data binding engine calls this method 
            when it propagates a value from the binding source to the binding target. 
            </summary>
      <param name="value">The value produced by the binding source.</param>
      <param name="targetType">The type of the binding target property.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:C1.WPF.Schedule.TimeRulerVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Throws System.NotImplementedException. 
            </summary>
      <param name="value">The value that is produced by the binding target.</param>
      <param name="targetType">The type to convert to.</param>
      <param name="parameter">The converter parameter to use.</param>
      <param name="culture">The culture to use in the converter.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.DateTimeInterval">
      <summary>
            The <see cref="T:C1.WPF.Schedule.DateTimeInterval" /> object represents a continuous interval of time.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.DateTimeInterval.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.DateTimeInterval" /> class.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing 
            the beginning of the interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing 
            the end of the interval.</param>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInterval.Start">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value 
            representing the beginning of the interval.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInterval.End">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value 
            representing the end of the interval.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.DateTimeInterval.IsFullDay">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value, determining if
            the <see cref="T:C1.WPF.Schedule.DateTimeInterval" /> object represents one or more full days.
            </summary>
    </member>
    <member name="T:C1.WPF.Schedule.VisualIntervalsPresenter">
      <summary>
            The base class for list boxes which should represent 
            the collection of <see cref="T:C1.WPF.Schedule.VisualInterval" /> objects.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.VisualIntervalsPresenter._updatingSelection">
      <summary>
            This API supports the C1.WPF.Schedule infrastructure 
            and is not intended to be used directly from your code.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalsPresenter.PanningDirection">
      <summary>
            Gets or sets the panning direction.
            </summary>
      <remarks>
            If this property is set, the <see cref="T:C1.WPF.Schedule.VisualIntervalsPresenter" /> control will use it to distinguish panning and cross-slide selection.
            It only makes sense for touch interaction.
            If this property is not set, all touch interactions will be used for selection and panning might not work. 
            </remarks>
    </member>
    <member name="F:C1.WPF.Schedule.VisualIntervalsPresenter.PanningDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.VisualIntervalsPresenter.PanningDirection" /> dependency property.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.#ctor">
      <summary>
            Creates a new instance of <see cref="T:C1.WPF.Schedule.VisualIntervalsPresenter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.GetContainerForItemOverride">
      <summary>
            Creates or identifies the element used to display the specified item.
            </summary>
      <returns>The new instance of <see cref="T:C1.WPF.Schedule.VisualIntervalPresenter" /> class.</returns>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalsPresenter.Owner">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.BaseObject" /> object representing the <see cref="T:C1.WPF.Schedule.SchedulerGroupItem" /> object owner.
            This property can be null for an empty group item.
            </summary>
    </member>
    <member name="F:C1.WPF.Schedule.VisualIntervalsPresenter.OwnerProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.Schedule.VisualIntervalsPresenter.Owner" /> dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalsPresenter.Scheduler">
      <summary>
            References a <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control that owns the 
            <see cref="T:C1.WPF.Schedule.VisualIntervalsPresenter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>
            Called when the visual children of a <see cref="T:C1.WPF.Schedule.VisualIntervalPresenter" /> element change.
            </summary>
      <param name="visualAdded">Identifies the visual child that's added.</param>
      <param name="visualRemoved">Identifies the visual child that's removed.</param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.AttachToScheduler">
      <summary>
            Attaches presenter to the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.AttachSchedulerEvents">
      <summary>
            Attaches presenter to the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.DetachFromScheduler(C1.WPF.Schedule.C1Scheduler)">
      <summary>
            Detaches presenter from the specified <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
      <param name="scheduler">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.UpdateSelection">
      <summary>
            Updates selection.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.SelectItems(System.DateTime,System.DateTime)">
      <summary>
            Selects all items from time interval determined by the specified start and end values.
            </summary>
      <param name="start">
      </param>
      <param name="end">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.ClearSelection">
      <summary>
            Clears selection.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.OnMouseMove(System.Windows.Input.MouseEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
      <summary>
            Overrides the base class behavior.
            Only continuous selection is supported.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalsPresenter.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>True if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.VisualIntervalGroupsPresenter">
      <summary>
            The <see cref="T:C1.WPF.Schedule.VisualIntervalGroupsPresenter" /> class is a
            listbox representing the collection of <see cref="T:C1.WPF.Schedule.VisualIntervalGroup" />
            objects. This class implements selection logic for all-day areas 
            in Day View, WorkWeek View and Office 2007 Week View modes.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalGroupsPresenter.AttachSchedulerEvents">
      <summary>
            Attaches presenter to the <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalGroupsPresenter.DetachFromScheduler(C1.WPF.Schedule.C1Scheduler)">
      <summary>
            Detaches presenter from the specified <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
      <param name="scheduler">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalGroupsPresenter.UpdateSelection">
      <summary>
            Updates selection.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalGroupsPresenter.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>
            Receives events from the centralized event manager.
            </summary>
      <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</param>
      <param name="sender">Object that originated the event.</param>
      <param name="e">Event data.</param>
      <returns>True if the listener handled the event.</returns>
    </member>
    <member name="T:C1.WPF.Schedule.VisualIntervalPresenter">
      <summary>
            Represents a selectable item in a <see cref="T:C1.WPF.Schedule.VisualIntervalsPresenter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalPresenter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Schedule.VisualIntervalPresenter" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.Schedule.VisualIntervalPresenter.Interval">
      <summary>
            Gets a <see cref="T:C1.WPF.Schedule.VisualInterval" /> object representing the 
            content of the <see cref="T:C1.WPF.Schedule.VisualIntervalPresenter" /> object.
            </summary>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalPresenter.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.Schedule.VisualIntervalPresenter.OnUnselected(System.Windows.RoutedEventArgs)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.WPF.Localization.C1LocalizeExtension">
      <summary>
            Represents a <see cref="T:System.Windows.Markup.MarkupExtension" /> providing localized strings from .resx resources.
            </summary>
      <remarks>The <see cref="T:C1.WPF.Localization.C1LocalizeExtension" /> doesn't track culture changes after the first call.
            This functionality should be implemented in derived classes if necessary.</remarks>
    </member>
    <member name="M:C1.WPF.Localization.C1LocalizeExtension.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Localization.C1LocalizeExtension" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.Localization.C1LocalizeExtension.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Localization.C1LocalizeExtension" /> class.
            </summary>
      <param name="key">The <see cref="T:System.String" /> value determining resource key.
            Three types are supported:
            - "Key" 
            - "Dictinary:Key"
            - "Assembly:Dictionary:Key
            </param>
    </member>
    <member name="M:C1.WPF.Localization.C1LocalizeExtension.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.Localization.C1LocalizeExtension" /> class.
            </summary>
      <param name="key">The <see cref="T:System.String" /> value determining resource key.
            Three types are supported:
            - "Key" 
            - "Dictinary:Key"
            - "Assembly:Dictionary:Key
            </param>
      <param name="defaultValue">The default value used as fallback string.</param>
    </member>
    <member name="P:C1.WPF.Localization.C1LocalizeExtension.Key">
      <summary>
            Gets or sets the key of a .resx object
            </summary>
    </member>
    <member name="P:C1.WPF.Localization.C1LocalizeExtension.DefaultValue">
      <summary>
            Gets or sets the default value. 
            </summary>
    </member>
    <member name="P:C1.WPF.Localization.C1LocalizeExtension.Assembly">
      <summary>
            Gets or sets the name of the Assembly where the .resx is located.
            By default returns the value of the <see cref="P:C1.WPF.Localization.C1Localizer.DefaultAssembly" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.Localization.C1LocalizeExtension.Dictionary">
      <summary>
            Gets or sets the name of the .resx dictionary.
            If it is null, returns the default string 'Resources'.
            </summary>
    </member>
    <member name="M:C1.WPF.Localization.C1LocalizeExtension.DetermineCulture(System.Windows.DependencyObject)">
      <summary>
            When overridden in a derived class, returns a <see cref="T:System.Globalization.CultureInfo" /> that should be used for localization. 
            Default implementation returns the value of the <see cref="P:C1.WPF.Localization.C1Localizer.DefaultCulture" /> property.
            </summary>
      <param name="target">The <see cref="T:System.Windows.DependencyObject" /> object for localization.</param>
      <returns>The <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
    </member>
    <member name="M:C1.WPF.Localization.C1LocalizeExtension.ProvideValue(System.IServiceProvider)">
      <summary>
            Returns an object that is set as the value of the target property for this markup extension.
            </summary>
      <param name="serviceProvider">
            The <see cref="T:System.Windows.Markup.IProvideValueTarget" /> provided from the MarkupExtension
            </param>
      <returns>The founded item from the .resx directory or default value if not founded.</returns>
      <exception cref="T:System.InvalidOperationException">
            thrown if <paramref name="serviceProvider" /> is not type of <see cref="T:System.Windows.Markup.IProvideValueTarget" /></exception>
    </member>
    <member name="M:C1.WPF.Localization.C1LocalizeExtension.SetNewValue(System.Object)">
      <summary>
            Sets the value of the DependencyProperty to the passed Value
            </summary>
      <param name="newValue">The new value to be set.</param>
    </member>
    <member name="T:C1.WPF.Localization.C1Localizer">
      <summary>
            The <see cref="T:C1.WPF.Localization.C1Localizer" /> class represents the set of 
            static methods and properties used for localization. 
            </summary>
    </member>
    <member name="P:C1.WPF.Localization.C1Localizer.DefaultCulture">
      <summary>
            Gets the default <see cref="T:System.Globalization.CultureInfo" />.
            </summary>
    </member>
    <member name="P:C1.WPF.Localization.C1Localizer.DefaultAssembly">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining the name of the assembly, 
            containing resources. By default returns the name of the entry assembly.
            </summary>
      <remarks>If your resources are defined in the entry assembly or in its satellite assemblies, 
            you don't need to change this property value. Use this property if your resources are defined, 
            for example, in the custom control's assembly.
            </remarks>
    </member>
    <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String,System.String)">
      <summary>
            Returns the localized string for the specified culture.
            </summary>
      <remarks>Search order:
            - searching in the specified resource Assembly;
            - searching in satellite Assemblies of the specified resource Assembly;
            - searching in the executing assembly;
            - repeating the search in above assemblies for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
      <param name="resourceAssembly">The name of resource assembly.</param>
      <param name="resourceDictionary">The name of resource dictionary.</param>
      <param name="resourceKey">The resource key.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
            Returns the localized string for the specified culture.
            </summary>
      <remarks>Search order:
            - searching in the specified resource Assembly;
            - searching in satellite Assemblies of the specified resource Assembly;
            - searching in the executing assembly;
            - repeating the search in above assemblies for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
      <param name="resourceAssembly">The name of resource assembly.</param>
      <param name="resourceDictionary">The name of resource dictionary.</param>
      <param name="resourceKey">The resource key.</param>
      <param name="defaultValue">The default value.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> info.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String)">
      <summary>
            Returns the localized string for the specified culture.
            </summary>
      <remarks>Search order:
            - searching in the executing Assembly;
            - repeating the search for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
      <param name="resourceDictionary">The name of resource dictionary.</param>
      <param name="resourceKey">The resource key.</param>
      <param name="defaultValue">The default value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Localization.C1Localizer.GetString(System.String,System.String,System.String,System.Globalization.CultureInfo)">
      <summary>
            Returns the localized string for the specified culture.
            </summary>
      <remarks>Search order:
            - searching in the executing Assembly;
            - repeating the search for the parent culture;
            - if result is not found, returning the specified default value.
            </remarks>
      <param name="resourceDictionary">The name of resource dictionary.</param>
      <param name="resourceKey">The resource key.</param>
      <param name="defaultValue">The default value.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Localization.C1Localizer.GetAssemblyName(System.Reflection.Assembly)">
      <summary>
            Returns the first part of assembly name (i.e. the name without version etc.).
            </summary>
      <param name="assembly">
      </param>
            Returns the first part of assembly name (i.e. the name without version etc.).
            <returns></returns></member>
    <member name="T:C1.C1Schedule.C1BindingSource">
      <summary>
            The <see cref="T:C1.C1Schedule.C1BindingSource" /> encapsulates the data source. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1BindingSource" /> class. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.#ctor(System.Object,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1BindingSource" /> class
            with the specified data source and data member values.
            </summary>
      <param name="dataSource">The <see cref="T:System.Object" /> object to use as data source.</param>
      <param name="dataMember">The data member name.</param>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.AllowEdit">
      <summary>
            Gets a value indicating whether items in the underlying list can be edited.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.AllowNew">
      <summary>
            Gets or sets a value indicating whether the <see cref="M:C1.C1Schedule.C1BindingSource.AddNew" /> method 
            can be used to add items to the list. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.AllowRemove">
      <summary>
            Gets a value indicating whether items can be removed from the underlying list. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.Count">
      <summary>
            Gets the total number of items in the underlying list.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.DataMember">
      <summary>
            Gets or sets the specific list in the data source to which 
            the connector currently binds to.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.DataSource">
      <summary>
            Gets or sets the data source that the connector binds to. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.IsFixedSize">
      <summary>
            Gets a value indicating whether the underlying list has a fixed size. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.IsReadOnly">
      <summary>
            Gets a value indicating whether the underlying list is read-only.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe). 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.Item(System.Int32)">
      <summary>
            Gets or sets the list element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.List">
      <summary>
            Gets the list that the connector is bound to. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.SupportsChangeNotification">
      <summary>
            Gets a value indicating whether the data source supports change notification.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.SupportsSearching">
      <summary>
            Gets a value indicating whether the data source supports searching with 
            the Find method. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the underlying list. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1BindingSource.DataKeyNamesInternal">
      <summary>
      </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.AddingNew">
      <summary>
            Occurs before an item is added to the underlying list. 
            </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.DataMemberChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Schedule.C1BindingSource.DataMember" /> property value has changed.
            </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.DataSourceChanged">
      <summary>
            Occurs when the <see cref="P:C1.C1Schedule.C1BindingSource.DataSource" /> property value has changed. 
            </summary>
    </member>
    <member name="E:C1.C1Schedule.C1BindingSource.ListChanged">
      <summary>
            Occurs when the underlying list changes or an item in the list changes.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Add(System.Object)">
      <summary>
            Adds an existing item to the internal list.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to add.</param>
      <returns>The position into which the new element was inserted.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.AddNew">
      <summary>
            Adds a new item to the underlying list. 
            </summary>
      <returns>The item added to the list.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.FinishAddNew">
      <summary>
            Commits a pending new item to the collection. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.BeginEdit(System.Object)">
      <summary>
            Starts an edit operation on the specified object.
            </summary>
      <param name="item">The object on which to start operation.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.EndEdit(System.Object)">
      <summary>
            Applies pending changes to the underlying data source.
            </summary>
      <param name="item">The object on which to apply pending changes.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Clear">
      <summary>
            Removes all elements from the list. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Contains(System.Object)">
      <summary>
            Determines whether an object is an item in the list. 
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to locate.</param>
      <returns>True if the <see cref="T:System.Object" /> is found in the list; 
            otherwise, false.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the contents of the <see cref="P:C1.C1Schedule.C1BindingSource.List" /> to the specified array, 
            starting at the specified index value. 
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the 
            destination of the elements copied from <see cref="T:System.Collections.ICollection" />. 
            The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in the array at which the copying begins.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:C1.C1Schedule.C1BindingSource" />.
            </summary>
      <param name="disposing">True if managed resources should be disposed; 
            otherwise, false.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
            Searches for the index of the item that has the given property descriptor. 
            </summary>
      <param name="prop">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> 
            to search on.</param>
      <param name="key">The value of the property parameter to search for.</param>
      <returns>The index of the item that has the given 
            <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Find(System.String,System.Object)">
      <summary>
            Returns the index of the item in the list with the specified property name and value. 
            </summary>
      <param name="propertyName">The property name to search on.</param>
      <param name="key">The value of the property parameter to search for.</param>
      <returns>
            The index of the item in the list with the specified property name and value.
            </returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.GetEnumerator">
      <summary>
            Retrieves an enumerator for the <see cref="P:C1.C1Schedule.C1BindingSource.List" />. 
            </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> object that can 
            be used to iterate through the collection.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>
            Retrieves an array of PropertyDescriptor objects representing 
            the bindable properties of the data source list type.
            </summary>
      <param name="listAccessors">An array of 
            <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects to find in 
            the collection as bindable. This can be null.</param>
      <returns>The <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 
            that represents the properties on each item used to bind data.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>
            Gets the name of the list supplying data for the binding. 
            </summary>
      <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor" /> 
            objects, the list name for which is returned. This can be null.</param>
      <returns>The name of the list.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.IndexOf(System.Object)">
      <summary>
            Searches for the specified object and returns the index of the first 
            occurrence within the entire list.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to index.</param>
      <returns>The index of <i>value</i> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Insert(System.Int32,System.Object)">
      <summary>
            Inserts an item into the list at the specified index.
            </summary>
      <param name="index">The zero-based index at which 
            <i>value</i> should be inserted.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnDataMemberChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnDataSourceChanged(System.EventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.Remove(System.Object)">
      <summary>
            Removes the specified item from the list. 
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index in the list.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.ResetBindings(System.Boolean)">
      <summary>
            Causes a control bound to the <see cref="T:C1.C1Schedule.C1BindingSource" /> to reread 
            all the items in the list and refresh their displayed values. 
            </summary>
      <param name="metadataChanged">The <see cref="T:System.Boolean" /> value specifying
            whether the metadata has been changed.</param>
    </member>
    <member name="M:C1.C1Schedule.C1BindingSource.ResetItem(System.Int32)">
      <summary>
            Causes a control bound to the <see cref="T:C1.C1Schedule.C1BindingSource" /> to re-read 
            the item at the specified index, and refresh its displayed value. 
            </summary>
      <param name="itemIndex">The zero-based index of item to re-read.</param>
    </member>
    <member name="T:C1.C1Schedule.C1ObservableCollection`1">
      <summary>
            The <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> is the base class for all 
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> derived collections. Supports notification.
            </summary>
      <typeparam name="T">The type of objects to keep in collection.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> class.
            </summary>
      <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> list that is wrapped 
            by the new collection.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.ClearItems">
      <summary>
      </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.C1Schedule.C1ObservableKeyedCollection`2">
      <summary>
            The <see cref="T:C1.C1Schedule.C1ObservableCollection`1" /> is the base class for all 
            <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> derived collections. Supports notification.
            </summary>
      <typeparam name="TKey">The type of keys in the collection.</typeparam>
      <typeparam name="TItem">The type of objects to keep in the collection.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableKeyedCollection`2" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.C1ObservableKeyedCollection`2" /> class.
            </summary>
      <param name="comparer">The implementation of the <see cref="T:System.Collections.IEqualityComparer" /> generic interface 
            to use when comparing keys, or a null reference (Nothing in Visual Basic) 
            to use the default equality comparer for the type of the key, obtained 
            from EqualityComparer.Default.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>
      </summary>
      <param name="comparer">
      </param>
      <param name="dictionaryCreationThreshold">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.ClearItems">
      <summary>
      </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.RemoveItem(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="M:C1.C1Schedule.C1ObservableKeyedCollection`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
      </summary>
      <param name="e">
      </param>
    </member>
    <member name="T:C1.C1Schedule.AppointmentMappingCollection">
      <summary>
            Represents a generic collection of mappings for properties of 
            <see cref="T:C1.C1Schedule.BaseObject" /> derived objects to appropriate data fields. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentMappingCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.AppointmentMappingCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentMappingCollection.ReadObject(C1.C1Schedule.Appointment,System.Object,System.Boolean)">
      <summary>
            Fills BaseObject object with values from specified boundObject.
            </summary>
      <param name="internalObject">
      </param>
      <param name="boundObject">
      </param>
      <param name="raiseChanged">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentMappingCollection.WriteObject(C1.C1Schedule.Appointment,System.Object)">
      <summary>
            Fills boundObject with values from specified BaseObject object.
            </summary>
      <param name="internalObject">Appointment object.</param>
      <param name="boundObject">object from custom data source/</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentMappingCollection.NewItem">
      <summary>
            Creates new Appointment object.
            </summary>
      <returns>Return created appointment object.</returns>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Body">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Body" /> 
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of the <see cref="P:C1.C1Schedule.AppointmentMappingCollection.Body" /> allow 
            the <see cref="P:C1.C1Schedule.Appointment.Body" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.End">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.End" /> 
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.End" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Location">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Location" />
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Location" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Start">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Start" />
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Start" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Subject">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.Appointment.Subject" />
            property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Subject" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.AppointmentProperties">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the memory field 
            which is intended to store the other properties of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the other properties of 
            the <see cref="T:C1.C1Schedule.Appointment" /> object to be bound to 
            the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.OwnerIdMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the Appointment.Owner.Id property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Owner" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.OwnerIndexMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the Appointment.Owner.Index property of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.Appointment.Owner" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentMappingCollection.Collection">
      <summary>
            Gets or sets AppointmentCollection using for mapping.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.BaseObjectMappingCollection`1">
      <summary>
            Represents a generic collection of mappings for properties 
            of the <see cref="T:C1.C1Schedule.BaseObject" /> derived objects to appropriate data fields. 
            </summary>
      <typeparam name="T">The type of the objects for mapping.
            It should be derived from the <see cref="T:C1.C1Schedule.BaseObject" /> class 
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseObjectMappingCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.BaseObjectMappingCollection`1" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.TextMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BaseObject.Text" /> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.Text" /> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.ColorMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BaseObject.Color" /> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.Color" /> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObjectMappingCollection`1.CaptionMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for <see cref="P:C1.C1Schedule.BaseObject.MenuCaption" /> 
            property of the object.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BaseObject.MenuCaption" /> 
            property of the object to be bound to the appropriate field in the data source. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseObjectMappingCollection`1.ReadObject(`0,System.Object,System.Boolean)">
      <summary>
            Fills BaseObject object with values from specified boundObject.
            </summary>
      <param name="internalObject">
      </param>
      <param name="boundObject">
      </param>
      <param name="raiseChanged">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.BaseObjectMappingCollection`1.WriteObject(`0,System.Object)">
      <summary>
            Fills boundObject with values from specified BaseObject object.
            </summary>
      <param name="internalObject">T object.</param>
      <param name="boundObject">Object from custom data source.</param>
    </member>
    <member name="T:C1.C1Schedule.MappingInfo">
      <summary>
            This class provides information on the mapping of the single property 
            of the object to the appropriate data field. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.MappingInfo.#ctor(System.Type,System.Type,System.String,System.Boolean,System.Object)">
      <summary>
            Use this ctor when property of bound object has to have the type other than 
            type of the internal object's property.
            </summary>
      <param name="type">
      </param>
      <param name="dataType">
      </param>
      <param name="propName">
      </param>
      <param name="required">
      </param>
      <param name="defaultValue">
      </param>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.DataType">
      <summary>
            Gets the <see cref="T:System.Type" /> value determining the type of the data field 
            or property which can be bound to this object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.MappingName">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining the name of the data field 
            or property to be bound to the object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.IsMapped">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if this objects is mapped 
            to the data field or property.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.Required">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if mapping for this property is required or optional.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingInfo.PropertyName">
      <summary>
            Gets the <see cref="T:System.String" /> value determining the name of the property 
            which should be mapped.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.MappingInfo.GetPropertyValue(System.Object)">
      <summary>
            Returns the property of specified object.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.MappingInfo.SetPropertyValue(System.Object,System.Object)">
      <summary>
            Sets property of specified object to the specified value.
            </summary>
      <param name="obj">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.C1Schedule.MappingCollectionBase`1">
      <summary>
            Represents a collection of mappings for properties of the 
            <see cref="T:C1.C1Schedule.BasePersistableObject" /> object to the appropriate data fields. 
            Names of properties are keys in this collection.
            </summary>
      <typeparam name="T">The type of the objects for mapping.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" />class 
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BasePersistableObject.Id" /> property.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BasePersistableObject.Id" /> property  
            to be bound to the appropriate field in the data source. 
            </summary>
      <remarks> Each object derived from <see cref="T:C1.C1Schedule.BasePersistableObject" /> is identified 
            by either Id or Index property. 
            To allow data to be correctly restored from your data sources you should specify mapping 
            either for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping" /> or 
            for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping" />.
            It makes sense in case if you bind to your data storages of Resources, Labels, 
            Contacts or Categories. 
            C1Schedule saves only Ids or Indexes of these objects in AppointmentSorage. 
            If there is no mapping for IdMapping or IndexMapping, C1Schedule won't be able to 
            identify Appointment's properties correctly in storages initialized by your data.
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping">
      <summary>
            Returns <see cref="T:C1.C1Schedule.MappingInfo" /> object for the <see cref="P:C1.C1Schedule.BasePersistableObject.Index" /> property.
            If the storage object is bound to a data source via its DataSource property, 
            the properties of this object allow the <see cref="P:C1.C1Schedule.BasePersistableObject.Index" /> property 
            to be bound to the appropriate field in the data source. 
            </summary>
      <remarks> Each object derived from <see cref="T:C1.C1Schedule.BasePersistableObject" /> is identified 
            by either Id or Index property. 
            To allow data to be correctly restored from your data sources you should specify mapping 
            either for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IdMapping" /> or 
            for the <see cref="P:C1.C1Schedule.MappingCollectionBase`1.IndexMapping" />.
            It makes sense in case if you bind to your data storages of Resources, Labels, 
            Contacts or Categories. 
            C1Schedule saves only Ids or Indexes of these objects in AppointmentSorage. 
            If there is no mapping for IdMapping or IndexMapping, C1Schedule won't be able to 
            identify Appointment's properties correctly in storages initialized by your data.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.GetKeyForItem(C1.C1Schedule.MappingInfo)">
      <summary>
            Returns property name as the key for collection.
            </summary>
      <param name="item">The <see cref="T:C1.C1Schedule.MappingInfo" /> object.</param>
      <returns>The property name.</returns>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.ReadObject(`0,System.Object,System.Boolean)">
      <summary>
            Fills internal object derived from BasePersistableObject 
            with values from specified bound object.
            </summary>
      <param name="internalObject">
      </param>
      <param name="boundObject">
      </param>
      <param name="raiseChanged">Specifies if internalObject should raise Changed 
            event during this method call</param>
      <returns>Value indicating if bound object was changed by this method.</returns>
      <remarks>Overriding method of derived class should call the base 
            class's ReadObject method or fill BasePersistableObject
            properties on it's own.</remarks>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.ReadObject(`0,System.Object,System.Boolean,System.Boolean)">
      <summary>
            Fills internal object derived from BasePersistableObject 
            with values from specified bound object.
            </summary>
      <param name="internalObject">
      </param>
      <param name="boundObject">
      </param>
      <param name="raiseChanged">Specifies if internalObject should raise Changed 
            event during this method call</param>
      <param name="dirty">Specifies whether an object has been changed</param>
      <returns>Value indicating if bound object was changed by this method.</returns>
      <remarks>Overriding method of derived class should call the base 
            class's ReadObject method or fill BasePersistableObject
            properties on it's own.</remarks>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.WriteObject(`0,System.Object)">
      <summary>
            When implemented in a derived class fills boundObject 
            with values from specified internalObject.
            </summary>
      <param name="internalObject">object from C1Schedule collection.</param>
      <param name="boundObject">object from custom data source.</param>
      <remarks>Overriding method of derived class should call 
            the base class's WriteObject method or fill boundObject
            properties on it's own.</remarks>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.NewItem">
      <summary>
            Implementation in derived classes should return new object of type T.
            </summary>
      <returns>New object of type T.</returns>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.Count">
      <summary>
            Gets the number of elements actually contained in 
            the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.Comparer">
      <summary>
            Gets the generic equality comparer that is used to determine equality 
            of keys in the collection.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.InsertItem(System.Int32,C1.C1Schedule.MappingInfo)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="E:C1.C1Schedule.MappingCollectionBase`1.Disposed">
      <summary>
            Represents the method that handles the Disposed event of a component. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.MappingCollectionBase`1.Site">
      <summary>
            Gets or sets the ISite associated with the IComponent. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.MappingCollectionBase`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.AppointmentStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentStorage" /> is the storage 
            for <see cref="T:C1.C1Schedule.Appointment" /> objects. It allows binding to the data source 
            and mapping data source fields to the appointment properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentStorage.Appointments">
      <summary>
            Gets an <see cref="T:C1.C1Schedule.AppointmentCollection" /> object that contains appointment related information. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentStorage.CommitItemChanges(C1.C1Schedule.Appointment)">
      <summary>
            Commits all changes in the data item.
            </summary>
      <param name="item">Data item to apply changes.</param>
    </member>
    <member name="T:C1.C1Schedule.BaseStorage`2">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseStorage`2" /> is the base generic component 
            for all storages in C1Schedule object model.
            Represents a storage of objects derived from <see cref="T:C1.C1Schedule.BasePersistableObject" />.
            This component implements methods of operations over the collections of objects. 
            It allows the collection to be populated programmatically 
            or automatically by retrieving data from the data source which 
            is specified by the DataSource and DataMember properties. 
            It allows mapping of data source fields to the object properties.
            </summary>
      <typeparam name="T">The type of the objects which will be stored in the storage.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" /> class
            and have the default parameter-less constructor.</typeparam>
      <typeparam name="TMappingCollection">The type of the collection which
            will be used for mapping. It should be derived from 
            the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> class
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.#ctor(C1.C1Schedule.StorageComponent)">
      <summary>
            Initializes the new instance of the <see cref="T:C1.C1Schedule.BaseStorage`2" /> component.
            </summary>
      <param name="scheduleStorage">The owning <see cref="T:C1.C1Schedule.StorageComponent" /> component.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.RefreshData">
      <summary>
            Call this method each time after changing your data source 
            if it doesn't implement IBindingList interface.
            Or use BaseStorage{T, TMappingCollection}.Add 
            and BaseStorage{T, TMappingCollection}.Remove 
            instead of corresponding methods of your data source class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.BoundMode">
      <summary>
            Gets a value indicating if the collection is bound to data. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.Mappings">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.MappingCollectionBase`1" /> derived object 
            that allows the properties of objects maintained by the current collection 
            to be bound to the appropriate fields in the data source. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.ShouldSerializeMappings">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.ScheduleStorage">
      <summary>
            Gets the reference to the owning <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> component.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.Objects">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Translates changes in the internal list to the Objects collection.
            </summary>
      <param name="e">A System.ComponentModel.ListChangedEventArgs object that contains the event data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.Remove(System.Object)">
      <summary>
            Removes object from the Objects collection.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> to remove.</param>
    </member>
    <member name="P:C1.C1Schedule.BaseStorage`2.DataKeyNamesInternal">
      <summary>
            This property is for internal use only.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.OnDataSourceItemSynchronized(C1.C1Schedule.ItemSynchronizedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.C1Schedule.BaseStorage`2.DataSourceItemSynchronized" /> event.
            </summary>
      <param name="e">The <see cref="T:C1.C1Schedule.ItemSynchronizedEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.IsSynchronizable(C1.C1Schedule.BasePersistableObject)">
      <summary>
            Indicates whether the specified collection item should be synchronized.
            </summary>
      <param name="collectionItem">The <see cref="T:C1.C1Schedule.BasePersistableObject" /> object.</param>
      <returns>True if item should be synchronized; false, otherwise.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseStorage`2.CommitItemChanges(`0)">
      <summary>
            Commits all changes in the data item.
            </summary>
      <param name="item">Data item to apply changes.</param>
    </member>
    <member name="T:C1.C1Schedule.SynchronizationActionEnum">
      <summary>
            Describes the version of data in a data storage. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SynchronizationActionEnum.Added">
      <summary>
            A new item.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SynchronizationActionEnum.Deleted">
      <summary>
            A deleted item.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SynchronizationActionEnum.Changed">
      <summary>
            A changed item.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ItemSynchronizedEventArgs">
      <summary>
            Provides data for the DataSourceItemSynchronized event.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ItemSynchronizedEventArgs.#ctor(C1.C1Schedule.C1BindingSource,C1.C1Schedule.BasePersistableObject,System.Object,C1.C1Schedule.SynchronizationActionEnum)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ItemSynchronizedEventArgs" /> class.
            </summary>
      <param name="storage">Reference to the changed <see cref="T:C1.C1Schedule.C1BindingSource" /> object.</param>
      <param name="collectionItem">Reference to the <see cref="T:C1.C1Schedule.BasePersistableObject" /> derived object.</param>
      <param name="dataSourceItem">Reference to the corresponding item in the data source.</param>
      <param name="action">The <see cref="T:C1.C1Schedule.SynchronizationActionEnum" /> value.</param>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.Storage">
      <summary>
            Gets the reference to the changed <see cref="T:C1.C1Schedule.C1BindingSource" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.DataSourceItem">
      <summary>
            Gets the reference to the data source item.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.CollectionItem">
      <summary>
            Gets the reference to the <see cref="T:C1.C1Schedule.BasePersistableObject" /> derived object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ItemSynchronizedEventArgs.Action">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.SynchronizationActionEnum" /> value.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.DataSourceItemSynchronizedEventHandler">
      <summary>
            The delegate type for the event handlers of the DataSourceItemSynchronized event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.C1Schedule.ItemSynchronizedEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="T:C1.C1Schedule.C1ScheduleStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> component handles all data 
            operations for the scheduler control and contains specific data storages 
            for appointments, resources, contacts, owners, labels and statuses, 
            which are used for binding different collections to the data.
            The <see cref="T:C1.C1Schedule.C1ScheduleStorage" /> component also handles data 
            importing and exporting to other scheduling formats such as binary, iCal, and XML.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.Scheduler">
      <summary>
            Gets the reference to the parent <see cref="T:C1.WPF.Schedule.C1Scheduler" /> control.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.OwnerStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ContactStorage" /> object used to keep contacts which might be used as appointment owners. 
            </summary>
      <remarks>
        <see cref="P:C1.C1Schedule.Appointment.Owner" /> property only accepts <see cref="T:C1.C1Schedule.Contact" /> objects which are present in this storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.AppointmentStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.AppointmentStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.LabelStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.LabelStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.ResourceStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.ResourceStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.StatusStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.StatusStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.CategoryStorage">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.C1ScheduleStorage.CategoryStorage" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.Reminders">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ReminderCollection" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.C1ScheduleStorage.Actions">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ActionCollection" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Clear">
      <summary>
            Clears all unbound storages. Loads default sets if any for unbound storages. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.String,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the scheduler's data to a file in the specified format. 
            </summary>
      <param name="path">A <see cref="T:System.String" /> containing the full path 
            (including the file name and extension) to export the scheduler's data to. </param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.IO.Stream,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the scheduler's data to a stream in the specified format. 
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object which specifies 
            the stream into which the scheduler's data will be exported.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.String,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the appointments' data to a file in the specified format. 
            </summary>
      <param name="path">A <see cref="T:System.String" /> containing the full path 
            (including the file name and extension) to export. </param>
      <param name="appointments">
        <see cref="T:System.Collections.Generic.IList`1" /> to be exported.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Export(System.IO.Stream,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.FileFormatEnum)">
      <summary>
            Exports the appointments' data to a stream in the specified format. 
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object which specifies 
            the stream into which the appointments's data will be exported.</param>
      <param name="appointments">
        <see cref="T:System.Collections.Generic.IList`1" /> to be exported.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Import(System.String,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Imports data into the scheduler from a file of the specified format.
            </summary>
      <param name="path">A <see cref="T:System.String" /> value containing the full path 
            (including the file name and extension) to a file which contains 
            the data to be imported into the scheduler.</param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Import(System.IO.Stream,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Imports the scheduler's data from a stream whose data is in the specified format.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> object which specifies 
            the stream that contains the data to import to the scheduler. </param>
      <param name="format">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1ScheduleStorage.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Schedule.CategoryStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.CategoryStorage" /> is the storage for <see cref="T:C1.C1Schedule.Category" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the category properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CategoryStorage.Categories">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryCollection" /> object that contains 
            category related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ContactStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.ContactStorage" /> is the storage for <see cref="T:C1.C1Schedule.Contact" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the contact properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ContactStorage.Contacts">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactCollection" /> object that contains 
            contact related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.LabelStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.LabelStorage" /> is the storage for <see cref="T:C1.C1Schedule.Label" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the label properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.LabelStorage.Labels">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.LabelCollection" /> object 
            that contains label related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ResourceStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.ResourceStorage" /> is the storage for <see cref="T:C1.C1Schedule.Resource" /> objects.
            It allows binding to the data source and mapping data source fields 
            to the resource properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.ResourceStorage.Resources">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceCollection" /> object 
            that contains resource related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.StatusStorage">
      <summary>
            The <see cref="T:C1.C1Schedule.StatusStorage" /> is the storage for <see cref="T:C1.C1Schedule.Status" /> objects.
            It allows binding to the data source and mapping data sources fields 
            to the status properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.StatusStorage.Statuses">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.StatusCollection" /> object 
            that contains status related information. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.StorageComponent">
      <summary>
            The <see cref="T:C1.C1Schedule.StorageComponent" /> is the base component for data storage.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.StorageComponent.#ctor">
      <summary>
            Initializes the new instance of the <see cref="T:C1.C1Schedule.StorageComponent" /> component.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.StorageComponent.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Initializes the new instance of the <see cref="T:C1.C1Schedule.StorageComponent" /> component.
            </summary>
      <param name="container">The parent container.</param>
    </member>
    <member name="P:C1.C1Schedule.StorageComponent.DesignMode">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value specifying whether the component is in design mode.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.StorageComponent.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:C1.C1Schedule.FileFormatEnum">
      <summary>
            Specifies the format of the exported or imported file.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.FileFormatEnum.XML">
      <summary>
            XML format (ComponentOne's own format).
            </summary>
    </member>
    <member name="F:C1.C1Schedule.FileFormatEnum.iCal">
      <summary>
            iCal format according to RFC 2445.
            Format specification could be found here:
            http://tools.ietf.org/rfc/rfc2445.txt
            </summary>
    </member>
    <member name="F:C1.C1Schedule.FileFormatEnum.Binary">
      <summary>
            Binary format.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ActionTypeEnum">
      <summary>
        <see cref="T:C1.C1Schedule.ActionTypeEnum" /> determines the type of action. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ActionTypeEnum.ExecuteApplication">
      <summary>
            Execute local application with specified parameters.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ActionTypeEnum.NavigateToUrl">
      <summary>
            Open specified target in default browser.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Action">
      <summary>
            Represents an action to take when the current system time reaches 
            the start of the associated <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Action.#ctor(C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Action" /> class.
            </summary>
      <param name="owner">The <see cref="T:C1.C1Schedule.Appointment" /> object.</param>
    </member>
    <member name="M:C1.C1Schedule.Action.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Action" /> class.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.ParentAppointment">
      <summary>
            Gets or sets the owning <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Command">
      <summary>
            Gets or sets the command string for the action.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Parameters">
      <summary>
            Gets or sets parameters used when the action is invoked.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Enabled">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating 
            whether the action is enabled. Default value is True.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Action.Type">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.ActionTypeEnum" /> value determining 
            the type of action that will occur. Default value is ActionTypeEnum.ExecuteApplication.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Action.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.ActionCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ActionCollection" /> is a collection of all <see cref="T:C1.C1Schedule.Action" /> objects 
            that represents the reminders for all pending items.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.InsertItem(System.Int32,C1.C1Schedule.Action)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Action" /> object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.ClearItems">
      <summary>
            Overrides default behavior.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ActionCollection.Dispose">
      <summary>
            Releases all unmanaged resources.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.RecurrenceStateEnum">
      <summary>
            Determines the type of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.NotRecurring">
      <summary>
            Represents a standard (non-recurring) appointment. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Master">
      <summary>
            Represents the appointment which serves as the pattern 
            for the other recurring appointments. 
            The pattern for recurring appointments is specified via 
            the Appointment.Recurrence property.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Occurrence">
      <summary>
            Represents one of recurring appointments whose pattern appointment 
            is specified via the Appointment.Recurrence property.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Exception">
      <summary>
            Represents a recurring appointment, which was changed 
            and now doesn't satisfy the pattern of the recurring series.  
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceStateEnum.Removed">
      <summary>
            Represents a recurring appointment, which was deleted
            and now doesn't satisfy the pattern of the recurring series.  
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ImportanceEnum">
      <summary>
            Determines the importance of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ImportanceEnum.Low">
      <summary>
            Low
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ImportanceEnum.Normal">
      <summary>
            Normal
            </summary>
    </member>
    <member name="F:C1.C1Schedule.ImportanceEnum.High">
      <summary>
            High
            </summary>
    </member>
    <member name="T:C1.C1Schedule.SensitivityEnum">
      <summary>
            Determines the sensitivity of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Confidential">
      <summary>
            Confidential
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Normal">
      <summary>
            Normal
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Personal">
      <summary>
            Personal
            </summary>
    </member>
    <member name="F:C1.C1Schedule.SensitivityEnum.Private">
      <summary>
            Private
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Appointment">
      <summary>
            The <see cref="T:C1.C1Schedule.Appointment" /> object is a meeting, a one-time appointment, 
            or a recurring appointment or meeting in the C1Schedule. 
            The <see cref="T:C1.C1Schedule.Appointment" /> class includes properties 
            that specify meeting details such as the location and time.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as appointment key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as appointment key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> class.
            </summary>
      <remarks>Creates an appointment with default properties.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.DateTime,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.DateTime,System.TimeSpan,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Appointment" /> 
            class with the specified parameters.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ParentCollection">
      <summary>
            Gets the reference to the parent <see cref="T:C1.C1Schedule.AppointmentCollection" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Action">
      <summary>
            Gets an <see cref="P:C1.C1Schedule.Appointment.Action" /> object for the <see cref="T:C1.C1Schedule.Appointment" /> object.
            Once this property is first requested, a new <see cref="P:C1.C1Schedule.Appointment.Action" /> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Action" /> property.
            </summary>
      <remarks>The <see cref="P:C1.C1Schedule.Appointment.Action" /> object contains information regarding 
            the type of action to perform as well as the command 
            and parameters to pass to the action.
            If the action object is enabled, the action will be invoked 
            when the start date and time of the owning <see cref="T:C1.C1Schedule.Appointment" /> object has occurred.
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Importance">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.ImportanceEnum" /> value indicating 
            the relative importance level for the appointment.
            Default value is <see cref="F:C1.C1Schedule.ImportanceEnum.Normal" />.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.AllDayEvent">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating 
            if the current appointment is an All-day appointment.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Tag">
      <summary>
            Gets or sets custom information associated with this object.
            </summary>
      <remarks>This property is valid only for the lifetime of the object.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.CustomData">
      <summary>
            Gets or sets custom text associated with this object.
            </summary>
      <remarks>This property is serialized with other appointment properties.
            It isn't used by the scheduler, use it to keep your data associated with appointment.
            This property is serialized into different formats and it is saved into underlying 
            data source if mapping for Appointment Properties is set.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.AppointmentType">
      <summary>
            Gets or sets custom text value associated with this object.
            </summary>
      <remarks>
        <para>This property is serialized with other appointment properties.
            You can use this property to show customized content or perform different actions depending on the property value.
            This property is serialized into different formats and it is saved into underlying 
            data source if mapping for Appointment Properties is set.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Saved">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if the appointment 
            has not been modified since the last save.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Sensitivity">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.SensitivityEnum" /> value indicating 
            the sensitivity level of the appointment. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Private">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value determining 
            whether the calendar owner intends to keep the <see cref="T:C1.C1Schedule.Appointment" />
            object private.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Subject">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value 
            representing the subject of the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Body">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value representing 
            the body of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Conflicts">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object representing 
            the list of <see cref="T:C1.C1Schedule.Appointment" /> objects which are in conflict 
            with this particular appointment.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.AutoResolvedWinner">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value determining if the item is 
            a winner of an automatic conflict resolution.
            </summary>
      <remarks>A value of false does not necessarily indicate that the item is 
            a loser of an automatic conflict resolution. 
            The item should be in conflict with another item.
            If an item has its Conflicts.Count property greater than zero 
            and if its <see cref="P:C1.C1Schedule.Appointment.AutoResolvedWinner" /> property is true, 
            it is a winner of an automatic conflict resolution. 
            On the other hand, if the item is in conflict and has its 
            <see cref="P:C1.C1Schedule.Appointment.AutoResolvedWinner" /> property as false, 
            it is a loser in an automatic conflict resolution.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Start">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value determining the 
            start date and time of the appointment. 
            </summary>
      <remarks>
        <para>If the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property is set to true, 
            then the start date of the appointment is the <see cref="P:System.DateTime.Date" /> of 
            the <see cref="P:C1.C1Schedule.Appointment.Start" />, and the start time of the appointment is 0:00.</para>
        <para>At setting this property, if it's time is not equal 0:00, 
            the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property will be set to false.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.End">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value determining 
            the end date and time of the appointment. 
            </summary>
      <remarks>
        <para>The <see cref="P:C1.C1Schedule.Appointment.End" /> property is usually specified 
            by the <see cref="P:C1.C1Schedule.Appointment.Start" /> and <see cref="P:C1.C1Schedule.Appointment.Duration" /> properties, 
            and is always calculated as <see cref="P:C1.C1Schedule.Appointment.End" /> = <see cref="P:C1.C1Schedule.Appointment.Start" /> + <see cref="P:C1.C1Schedule.Appointment.Duration" />. 
            When setting the <see cref="P:C1.C1Schedule.Appointment.End" /> property, the <see cref="P:C1.C1Schedule.Appointment.Start" /> property 
            retains its value, and the <see cref="P:C1.C1Schedule.Appointment.Duration" /> is changed according 
            to the new value of the <see cref="P:C1.C1Schedule.Appointment.End" /> property. 
            If the new <see cref="P:C1.C1Schedule.Appointment.End" /> property's value is less than 
            the <see cref="P:C1.C1Schedule.Appointment.Start" /> property's value, then an exception will be raised.</para>
        <para>At setting this property, if it's time is not equal 0:00, 
            or value is equal to the value of <see cref="P:C1.C1Schedule.Appointment.Start" /> property, 
            the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property will be set to false.</para>
      </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.IsOneDay">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value indicating either it is 
            a one day appointment or shares some days.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Duration">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value indicating the 
            duration of the appointment.
            </summary>
      <remarks>At setting this property, if it's value is not equal to the whole 
            number of days, the <see cref="P:C1.C1Schedule.Appointment.AllDayEvent" /> property will be set to false.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Location">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value specifying 
            where the appointment is going to be.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Reminder">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object which is associated with the appointment.
            To associate an appointment with the reminder, set its 
            <see cref="P:C1.C1Schedule.Appointment.ReminderSet" /> property to true. 
            Once this property is set to true, a new <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Reminder" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderSet">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating whether 
            a reminder is associated with the appointment. 
            Once this property is set to true, a new <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object 
            is created and assigned to the <see cref="P:C1.C1Schedule.Appointment.Reminder" /> property.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value indicating the 
            interval of time the reminder should occur 
            prior to the start of the appointment. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderOverrideDefault">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating if the associated
            <see cref="P:C1.C1Schedule.Appointment.Reminder" /> object has non-default settings.
            True if the reminder overrides the default reminder behavior for the appointment.
            You must set the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault" /> property to validate 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound" /> and 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderSoundFile" /> properties.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderPlaySound">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating if the reminder 
            should play a sound when it occurs for this appointment or task. 
            The <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound" /> property must be set in order to validate 
            the <see cref="P:C1.C1Schedule.Appointment.ReminderSoundFile" /> property. 
            This property is only valid if the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault" /> property 
            is set to true.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ReminderSoundFile">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value indicating the path and file name 
            of the sound file to play when the reminder occurs for the appointment. 
            This property is only valid if the <see cref="P:C1.C1Schedule.Appointment.ReminderOverrideDefault" /> and 
            <see cref="P:C1.C1Schedule.Appointment.ReminderPlaySound" /> properties are set to true.
            </summary>
      <remarks>The default sound is the system Exclamation sound.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.IsRecurring">
      <summary>
            Gets the <see cref="T:System.Boolean" /> value indicating if the appointment is recurring.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.ParentRecurrence">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Appointment" /> object that defines the recurrence 
            criteria for this <see cref="T:C1.C1Schedule.Appointment" /> object. 
            If this appointment is a not member of a recurrence, 
            or is itself a root appointment, null is returned. 
            </summary>
      <remarks>If an appointment is recurring (see the <see cref="P:C1.C1Schedule.Appointment.IsRecurring" /> property) 
            it represents an occurrence in the series that is started and defined 
            by a specific pattern appointment. 
            Use the <see cref="P:C1.C1Schedule.Appointment.ParentRecurrence" /> property to obtain the pattern 
            of the current appointment. A pattern appointment can be recognized by its 
            <see cref="P:C1.C1Schedule.Appointment.RecurrenceState" /> property set 
            to the <see cref="F:C1.C1Schedule.RecurrenceStateEnum.Master" /> value. 
            The recurrence information defined by the pattern appointment can be accessed 
            via the <see cref="T:C1.C1Schedule.RecurrencePattern" /> property of the appointment. 
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.RecurrenceState">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.RecurrenceStateEnum" /> value indicating 
            the recurrence state of the appointment. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Label">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.Appointment.Label" /> object associated with this appointment.
            </summary>
      <remarks>Labels may be associated with an appointment 
            to effectively group appointments. </remarks>
      <remarks>This property only accepts <see cref="P:C1.C1Schedule.Appointment.Label" /> objects which are present in the C1ScheduleStorage.LabelStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Resources">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ResourceList" /> object which holds the set of 
            <see cref="T:C1.C1Schedule.Resource" /> objects for this appointment.
            An appointment may be associated with multiple resources.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Resource" /> objects which are present in the C1ScheduleStorage.ResourceStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Links">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.ContactList" /> object which holds the set 
            of <see cref="T:C1.C1Schedule.Contact" /> objects for this appointment.
            An appointment may be associated with multiple contacts.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Contact" /> objects which are present in the C1ScheduleStorage.ContactStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.BusyStatus">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.Status" /> object indicating the busy status 
            of the user for the appointment.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Status" /> objects which are present in the C1ScheduleStorage.StatusStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Categories">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.CategoryList" /> object which holds the set 
            of categories assigned to the appointment.
            Categories may be associated with an appointment to effectively group appointments. 
            An appointment may be associated with multiple categories.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Category" /> objects which are present in the C1ScheduleStorage.CategoryStorage storage.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Appointment.Owner">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.Contact" /> object which owns current <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
      <remarks>This property only accepts <see cref="T:C1.C1Schedule.Contact" /> objects which are present in the C1ScheduleStorage.OwnerStorage storage.</remarks>
      <value>The default value is null.</value>
    </member>
    <member name="M:C1.C1Schedule.Appointment.BeginEdit">
      <summary>
            Prevents the <see cref="T:C1.C1Schedule.Appointment" /> object from being updated until 
            the <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" /> method is called.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.Appointment.BeginEdit" /> and <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" /> methods 
            are designed to implement batch modifications. 
            This allows you to prevent generation of change notifications
            when changing multiple settings at the same time. 
            To do this enclose the code that changes the properties in calls to these methods.
            Each call to <see cref="M:C1.C1Schedule.Appointment.BeginEdit" /> must be paired with a call to <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" />. 
            To ensure that <see cref="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)" /> is always called even if an exception occurs, 
            wrap any calls to these methods in a try...finally statement.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.EndEdit(System.Boolean)">
      <summary>
            Unlocks the <see cref="T:C1.C1Schedule.Appointment" /> object after a call 
            to the <see cref="M:C1.C1Schedule.Appointment.BeginEdit" /> method and causes an immediate update. 
            </summary>
      <param name="canRaiseChangeNotification">The <see cref="T:System.Boolean" /> value determining
            if change notifications can be generated when applying changes.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.IsGroupMember(C1.C1Schedule.BaseObject,System.String)">
      <summary>
            Returns True if the current <see cref="T:C1.C1Schedule.Appointment" /> object is a member of a group which is specified by the
            groupOwner and groupBy parameters; False otherwise. 
            </summary>
      <param name="groupOwner">The <see cref="T:C1.C1Schedule.BaseObject" /> object determining the appointment group.</param>
      <param name="groupBy">The <see cref="T:System.String" /> value determining the type of grouping.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.ClearRecurrencePattern">
      <summary>
            Removes the recurrence settings and restores 
            the <see cref="F:C1.C1Schedule.RecurrenceStateEnum.NotRecurring" /> state for an appointment.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Appointment.GetRecurrencePattern">
      <summary>
            Returns the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object that represents 
            the recurrence attributes of an appointment. 
            If there is no existing recurrence pattern, a new 
            empty <see cref="T:C1.C1Schedule.RecurrencePattern" /> object is returned.
            </summary>
      <returns>The <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.Copy">
      <summary>
            Creates the copy of the <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
      <returns>The new <see cref="T:C1.C1Schedule.Appointment" /> instance.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.CopyFrom(C1.C1Schedule.Appointment,System.Boolean)">
      <summary>
             Copies properties from the specified <see cref="T:C1.C1Schedule.Appointment" /> object to this one. 
             </summary>
      <param name="app">The <see cref="T:C1.C1Schedule.Appointment" /> instance to copy.</param>
      <param name="includeKeys">Specifies whether to copy internal keys.</param>
      <remarks>
        <para>Set includeKeys to true if you want to receive exact copy 
            of the specified <see cref="T:C1.C1Schedule.Appointment" /> object.</para>
        <para>Set includeKeys to false in order to copy only descriptive <see cref="T:C1.C1Schedule.Appointment" /> 
            properties to other <see cref="T:C1.C1Schedule.Appointment" /> object (for example, 
            if you want to duplicate appointment from one day to another).</para>
      </remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.CopyFrom(C1.C1Schedule.Appointment,System.Boolean,System.Boolean)">
      <summary>
             Copies properties from the specified <see cref="T:C1.C1Schedule.Appointment" /> object to this one. 
             </summary>
      <param name="app">The <see cref="T:C1.C1Schedule.Appointment" /> instance to copy.</param>
      <param name="includeKeys">Specifies whether to copy internal keys.</param>
      <param name="includeRecurrenceInformation">Specifies whether to copy recurrence information if any.</param>
      <remarks>
        <para>Set includeKeys to true if you want to receive exact copy 
            of the specified <see cref="T:C1.C1Schedule.Appointment" /> object.</para>
        <para>Set includeKeys to false in order to copy only descriptive <see cref="T:C1.C1Schedule.Appointment" /> 
            properties to other <see cref="T:C1.C1Schedule.Appointment" /> object (for example, 
            if you want to duplicate appointment from one day to another).</para>
        <para>Set includeRecurrenceInformation to false to exclude RecurrenceState, ParentRecurrence and RecurrencePattern information.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Schedule.Appointment.Delete">
      <summary>
            Deletes an appointment and removes it from 
            the owning <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Appointment.GetTimeTillEvent">
      <summary>
            Returns a time term before the appointment start; a negative value means that 
            appointment is expired.
            </summary>
      <returns>A time term before the appointment starts; a negative value means 
            that the appointment has expired.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.SaveAs(System.String,C1.C1Schedule.FileFormatEnum)">
      <summary>
            Saves the appointment to the specified path in the format 
            of the specified file format. 
            </summary>
      <param name="path">Required string. The path in which to save the item.</param>
      <param name="fileFormat">The <see cref="T:C1.C1Schedule.FileFormatEnum" /> value indicating 
            the file format to save.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.FromXml(System.Xml.XmlNode)">
      <summary>
            Reconstructs appointment from an <see cref="T:System.Xml.XmlNode" />. 
            </summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> 
            which contains the <see cref="T:C1.C1Schedule.Appointment" /> data.</param>
      <returns>True if appointment has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.FromXml(System.Xml.XmlReader)">
      <summary>
            Reconstructs appointment from an <see cref="T:System.Xml.XmlReader" />. 
            </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> 
            which contains the <see cref="T:C1.C1Schedule.Appointment" /> data.</param>
      <returns>True if appointment has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.ToXml(System.Xml.XmlWriter)">
      <summary>
            Creates an XML encoding of the appointment. 
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> 
            that will receive the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.GetAppointmentProperties">
      <summary>
            Returns XML encoding of appointment properties.
            </summary>
      <remarks>Use this property to get the same string as serialized value of appointment properties, which you get
            when set mapping for AppointmentProperties.</remarks>
      <returns>The <see cref="T:System.String" /> value containing XML encoding of appointment properties.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.SetAppointmentProperties(System.String)">
      <summary>
            Reconstructs appointment properties from the specified string.
            </summary>
      <param name="source">The <see cref="T:System.String" /> value containing XML encoding of appointment properties.</param>
      <returns>True if appointment has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.Appointment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.Appointment.CancelEdit">
      <summary>
            Discards changes since the last <see cref="M:C1.C1Schedule.Appointment.BeginEdit" /> call.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Appointment.OnPropertyChanged(System.String)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="T:C1.C1Schedule.AppointmentCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentCollection" /> is a collection of all 
            <see cref="T:C1.C1Schedule.Appointment" /> objects in the C1Schedule component.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentCollection.ParentStorage">
      <summary>
            Gets the reference to the owning <see cref="T:C1.C1Schedule.AppointmentStorage" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with default settings and adds it to the collection.
            </summary>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.DateTime)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.TimeSpan)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.DateTime,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.Add(System.DateTime,System.TimeSpan,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Appointment" /> object 
            with specified parameters and adds it to the collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the appointment.</param>
      <param name="duration">The <see cref="T:System.TimeSpan" /> value which specifies 
            the duration of the appointment.</param>
      <param name="subject">The <see cref="T:System.String" /> value which contains 
            the subject of the appointment.</param>
      <returns>The <see cref="T:C1.C1Schedule.Appointment" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(System.DateTime,System.DateTime)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the full list of <see cref="T:C1.C1Schedule.Appointment" /> objects in the specified time interval. 
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the interval.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
      <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment" />
            object for recurring appointments if they haven't been created yet.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(C1.C1Schedule.BaseObject,System.String,System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the full list of <see cref="T:C1.C1Schedule.Appointment" /> objects in the specified time interval. 
            </summary>
      <param name="groupOwner">The <see cref="T:C1.C1Schedule.BaseObject" /> object determining the appointment group.</param>
      <param name="groupBy">The <see cref="T:System.String" /> value determining the type of grouping.</param>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the interval.</param>
      <param name="includePrivateAppointments">The <see cref="T:System.Boolean" /> value determining whether 
            to include private appointments.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
      <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment" />
            object for recurring appointments if they haven't been created yet.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetOccurrences(C1.C1Schedule.Appointment,System.DateTime,System.DateTime)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the list of occurrences of the specified master appointment 
            in the specified time interval. 
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object 
            representing the master appointment.</param>
      <param name="start">The <see cref="T:System.DateTime" /> value which specifies 
            the start date and time of the interval.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value which specifies 
            the end date and time of the interval.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
      <remarks>This method will create instances of the <see cref="T:C1.C1Schedule.Appointment" />
            object for recurring appointments if they haven't been created yet.</remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.GetConflicts(C1.C1Schedule.Appointment)">
      <summary>
            Retrieves the <see cref="T:C1.C1Schedule.AppointmentList" /> object which contains 
            the list of occurrences of <see cref="T:C1.C1Schedule.Appointment" /> objects 
            which are in conflict with the specified appointment.
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object.</param>
      <returns>The <see cref="T:C1.C1Schedule.AppointmentList" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.ClearItems">
      <summary>
            Clears the collection.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.InsertItem(System.Int32,C1.C1Schedule.Appointment)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Appointment" /> object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.SetItem(System.Int32,C1.C1Schedule.Appointment)">
      <summary>
            Overrides the default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Appointment" /> object to set.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentCollection.AddRange(C1.C1Schedule.Appointment[])">
      <summary>
            Adds an array of <see cref="T:C1.C1Schedule.Appointment" /> objects to the collection.
            This methods clears collection before adding new items. 
            Don't use it if you want to save previously existed items.
            </summary>
      <param name="items">An array of <see cref="T:C1.C1Schedule.Appointment" /> objects.</param>
    </member>
    <member name="T:C1.C1Schedule.AppointmentList">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentList" /> is a sortable collection of 
            <see cref="T:C1.C1Schedule.Appointment" /> objects.
            </summary>
      <remarks>The <see cref="T:C1.C1Schedule.AppointmentList" /> is not guaranteed to be sorted. 
            You must sort the <see cref="T:C1.C1Schedule.AppointmentList" /> before performing operations
            that require the <see cref="T:C1.C1Schedule.AppointmentList" /> to be sorted.</remarks>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort">
      <summary>
            Sorts the elements in the entire AppointmentList using the default comparer
            (by the Appointment.Start value).
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Comparison{C1.C1Schedule.Appointment})">
      <summary>
            Sorts the elements in the entire AppointmentList using 
            the specified System.Comparison. 
            </summary>
      <param name="comparison">The <see cref="T:System.Comparison`1" /> 
            to use when comparing elements.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Collections.Generic.IComparer{C1.C1Schedule.Appointment})">
      <summary>
            Sorts the elements in the entire AppointmentList using 
            the specified comparer. 
            </summary>
      <param name="comparer">The IComparer{Appointment} implementation to use 
            when comparing elements, or a null reference (Nothing in Visual Basic) 
            to use the default comparer.</param>
    </member>
    <member name="M:C1.C1Schedule.AppointmentList.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{C1.C1Schedule.Appointment})">
      <summary>
            Sorts the elements in a range of elements in AppointmentList using 
            the specified comparer. 
            </summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The IComparer{Appointment} implementation to use 
            when comparing elements, or a null reference (Nothing in Visual Basic) 
            to use the default comparer.</param>
    </member>
    <member name="T:C1.C1Schedule.AppointmentComparer">
      <summary>
            Compares <see cref="T:C1.C1Schedule.Appointment" /> objects by their start time.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.AppointmentComparer.Default">
      <summary>
            Returns an existing instance of <see cref="T:C1.C1Schedule.AppointmentComparer" /> class if any;
            or creates a new one.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentComparer.Compare(C1.C1Schedule.Appointment,C1.C1Schedule.Appointment)">
      <summary>
            Performs a comparison of two <see cref="T:C1.C1Schedule.Appointment" /> objects and returns 
            a value indicating whether the one <see cref="T:C1.C1Schedule.Appointment" /> starts earlier, 
            at the same time, or later than the other. 
            </summary>
      <param name="x">The first <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <param name="y">The second <see cref="T:C1.C1Schedule.Appointment" /> to compare.</param>
      <returns>Less than zero - x occurs earlier than y.
            Zero - x and y occur at the same time.
            Greater than zero - x occurs later than y.</returns>
    </member>
    <member name="T:C1.C1Schedule.AppointmentEventArgs">
      <summary>
            The <see cref="T:C1.C1Schedule.AppointmentEventArgs" /> class describes event data for <see cref="P:C1.C1Schedule.AppointmentEventArgs.Appointment" /> events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.AppointmentEventArgs.#ctor(C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.AppointmentEventArgs" />
            class with the specified appointment. 
            </summary>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.AppointmentEventArgs.Appointment">
      <summary>
            Gets the appointment which the event was raised for. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.CancelAppointmentEventHandler">
      <summary>
            Delegate for handling the cancellable event involving a single 
            <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="T:C1.C1Schedule.CancelAppointmentEventArgs">
      <summary>
            The <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs" /> class describes event data 
            for cancellable <see cref="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment" /> events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CancelAppointmentEventArgs.#ctor(C1.C1Schedule.Appointment)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CancelAppointmentEventArgs" />
            class with the specified appointment. 
            </summary>
      <param name="appointment">The <see cref="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment">
      <summary>
            Gets the <see cref="P:C1.C1Schedule.CancelAppointmentEventArgs.Appointment" /> object which the event was raised for. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.BasePersistableObject">
      <summary>
            The <see cref="T:C1.C1Schedule.BasePersistableObject" /> is a base class for persistable objects.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.OnPropertyChanged(System.String)">
      <summary>
            Fires property change notification.
            </summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.#ctor">
      <summary>
            Creates new BasePersistableObject object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BasePersistableObject.Key">
      <summary>
            Gets an array of objects representing the key of the <see cref="T:C1.C1Schedule.BasePersistableObject" />.
            </summary>
      <remarks>
        <para>In the current version, the array always contains a single object.
            It can be either an <see cref="T:System.Int32" /> or <see cref="T:System.Guid" /> value depending on
            which one is actually used for binding this data.
            For example, if you bind AppointmentStorage to the database and set
            IndexMapping, this property will return an <see cref="T:System.Int32" /> value.
            If you set IdMapping, this property will return a <see cref="T:System.Guid" /> value.</para>
        <para>In future versions working with compound keys might be implemented.
            In such case this property will return array of objects composing the key.</para>
      </remarks>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            A method called when serializing.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 
            to populate with data.</param>
      <param name="context">The context information about the source or destination 
            of the serialization.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.BeginEdit">
      <summary>
            Brings the object in edit mode.
            </summary>
      <remarks>
            A corresponding item from a data source will not be updated on this object's
            property changes while the object is in edit mode. Data synchronization will
            be performed when the <see cref="M:C1.C1Schedule.BasePersistableObject.EndEdit" /> method will be called.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.EndEdit">
      <summary>
            Finishes edit mode started by the <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit" /> method and
            updates a corresponding data source item.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.EndEdit(System.Boolean)">
      <summary>
      </summary>
      <param name="canRaiseChangeNotification">
      </param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.CancelEdit">
      <summary>
            Discards changes since the last <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit" /> call.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BasePersistableObject.IsEdit">
      <summary>
            Indicates whether the object is in edit mode, 
            which is started using the <see cref="M:C1.C1Schedule.BasePersistableObject.BeginEdit" /> method.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.Xml.XmlNode)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> which contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.Xml.XmlReader)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> which contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.ToXml(System.Xml.XmlWriter)">
      <summary>
            Saves an object to the specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> that will receive 
            the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.FromXml(System.IO.Stream)">
      <summary>
            Loads an object from the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BasePersistableObject.ToXml(System.IO.Stream)">
      <summary>
            Saves an object to the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the object data.</param>
    </member>
    <member name="T:C1.C1Schedule.BaseObject">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseObject" /> is a base class for resources, labels, statuses, 
            categories and contacts. It implements base UI properties and persistence.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with default settings.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified text.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.String,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified text and menu caption.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Windows.Media.Color,System.String,System.String)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified color, 
            text and menu caption.
            </summary>
      <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color" /> value.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Windows.Media.Color,System.String,System.String,C1.C1Schedule.C1Brush)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.BaseObject" /> object with specified parameters.
            </summary>
      <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color" /> value.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The <see cref="T:System.String" /> value.</param>
      <param name="brush">The <see cref="P:C1.C1Schedule.BaseObject.Brush" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.Color">
      <summary>
            Gets or sets the color of the user interface object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.Text">
      <summary>
            Gets or sets the text which identifies a user interface object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.MenuCaption">
      <summary>
            Gets or sets the menu caption for the user interface object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseObject.Brush">
      <summary>
            Gets or sets the brush used to fill the user interface object's image.
            </summary>
      <remarks>Supported persistence only for System.Drawing.Drawing2D.HatchBrush
            and System.Drawing.SolidBrush</remarks>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.FromXml(System.Xml.XmlNode)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlNode" />.
            </summary>
      <param name="node">An <see cref="T:System.Xml.XmlNode" /> 
            which contains the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.FromXml(System.Xml.XmlReader)">
      <summary>
            Loads an object from the specified <see cref="T:System.Xml.XmlReader" />.
            </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> which contains the object data.</param>
      <returns>Returns true if object has been changed.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.ToXml(System.Xml.XmlWriter)">
      <summary>
            Saves an object into specified <see cref="T:System.Xml.XmlWriter" />.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> 
            that will receive the object data.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseObject.ToString">
      <summary>
            Overrides the default behavior.
            </summary>
      <returns>The text which identifies a user interface object.</returns>
    </member>
    <member name="T:C1.C1Schedule.BaseCollection`1">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseCollection`1" /> is a base generic class for all collections 
            in C1Schedule object model.
            </summary>
      <typeparam name="T">The type of the objects which will be stored in the collection.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" /> class
            and have the default parameter-less constructor.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.BaseCollection`1" /> class.
            </summary>
      <param name="owner">The owning storage.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.Add(`0)">
      <summary>
            Adds a new custom object to the collection.
            If the item already exists in the collection, its index is returned.
            </summary>
      <returns>Returns the index of newly added custom object.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.Contains(System.Int32)">
      <summary>
            Check if collection contains an item with specified index.
            </summary>
      <param name="index">The zero-based index of the item to locate.</param>
      <returns>True if the item is found in the collection; otherwise, false.</returns>
    </member>
    <member name="P:C1.C1Schedule.BaseCollection`1.Item(System.Guid)">
      <summary>
            Gets the element with the specified key if any. 
            </summary>
      <param name="key">The key of the element to get.</param>
      <returns>The element with the specified key. If an element with the specified key is not found, return null.</returns>
    </member>
    <member name="P:C1.C1Schedule.BaseCollection`1.OwnerInternal">
      <summary>
      </summary>
    </member>
    <member name="P:C1.C1Schedule.BaseCollection`1.SuppressedDataChanging">
      <summary>
            Gets or set the <see cref="T:System.Boolean" /> value specifying whether change events should not be fired.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.BeginUpdate">
      <summary>
            When overriden in derived class, starts batch operation.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.EndUpdate">
      <summary>
            When overriden in derived class, finishes batch operation.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.AddRange(System.Object[])">
      <summary>
            Adds an array of objects to the collection.
            This methods clears the collection before adding new items. 
            Don't use it if you want to keep preexisting items.
            </summary>
      <param name="items">An array of items.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.InsertItem(System.Int32,`0)">
      <summary>
            Overrides default behavior of collection at inserting new items.
            </summary>
      <param name="index">The zero-based index of the item to insert.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.GetKeyForItem(`0)">
      <summary>
            Extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:C1.C1Schedule.BaseCollection`1.RemoveItem(System.Int32)">
      <summary>
            Overrides base class implementation.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="T:C1.C1Schedule.BaseList`1">
      <summary>
            The <see cref="T:C1.C1Schedule.BaseList`1" /> is a base generic class for all lists 
            in C1Schedule's object model.
            Only objects existing in the owning collection can be added to this list.
            </summary>
      <typeparam name="T">The type of the objects which will be stored in the list.
            It should be derived from the <see cref="T:C1.C1Schedule.BasePersistableObject" /> class.</typeparam>
    </member>
    <member name="M:C1.C1Schedule.BaseList`1.InsertItem(System.Int32,`0)">
      <summary>
            Overrides default behavior of Collection.
            Prevents from adding items non-existent in the parent collection.
            </summary>
      <param name="index">The zero-based index of the item to insert.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseList`1.SetItem(System.Int32,`0)">
      <summary>
            Overrides default behavior of Collection.
            Prevents from adding items non-existent in the parent collection.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The object to set.</param>
    </member>
    <member name="M:C1.C1Schedule.BaseList`1.ToString">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="P:C1.C1Schedule.BaseList`1.Owner">
      <summary>
            Gets the reference to the owning collection.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.TimeScaleEnum">
      <summary>
            Determines the time interval which is used for 
            displaying time slots in the DayView.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.FiveMinutes">
      <summary>
            5 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.SixMinutes">
      <summary>
            6 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.TenMinutes">
      <summary>
            10 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.FifteenMinutes">
      <summary>
            15 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.TwentyMinutes">
      <summary>
            20 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.ThirtyMinutes">
      <summary>
            30 minutes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.OneHour">
      <summary>
            1 hour.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.TimeScaleEnum.TwoHours">
      <summary>
            2 hours.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.CalendarInfo">
      <summary>
            The <see cref="T:C1.C1Schedule.CalendarInfo" /> class manages and exposes 
            all date-related data to C1Schedule controls. 
            </summary>
    </member>
    <member name="E:C1.C1Schedule.CalendarInfo.SelectedDaysChanged">
      <summary>
            Occurs when the range of selected days was changed.
            </summary>
    </member>
    <member name="E:C1.C1Schedule.CalendarInfo.PropertyChanged">
      <summary>
            Occurs when the property of <see cref="T:C1.C1Schedule.CalendarInfo" /> object was changed.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.Culture">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.CalendarInfo.CultureInfo" /> object which 
            holds culture-specific information used by C1Schedule components.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.CultureInfo">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.CalendarInfo.CultureInfo" /> object which 
            holds culture-specific information used by C1Schedule components.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.DateFormatString">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining display format 
            of date values to use in appointments and built-in dialogs.
            </summary>
      <remarks>The actual representation depends on the value 
            of the <see cref="P:C1.C1Schedule.CalendarInfo.Culture" /> property.</remarks>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.TimeFormatString">
      <summary>
            Gets or sets the <see cref="T:System.String" /> value determining display format 
            of time values to use in appointments and built-in dialogs.
            </summary>
      <remarks>The actual representation depends on the value 
            of the <see cref="P:C1.C1Schedule.CalendarInfo.Culture" /> property.</remarks>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.WeekStart">
      <summary>
            Gets or sets the <see cref="T:System.DayOfWeek" /> value determining
            the first day of the week. Default is system settings.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.WorkDays">
      <summary>
            Gets or sets the <see cref="P:C1.C1Schedule.CalendarInfo.WorkDays" /> object containing the 
            set of working days in one week.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.TimeScale">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying the time interval 
            which is used for displaying time slots in the DayView.
            </summary>
      <remarks>The <see cref="P:C1.C1Schedule.CalendarInfo.TimeScale" /> property cannot be set to any 
            arbitrary value. When assigning a value to this property it is 
            automatically calculated so as to be equal to the nearest 
            <see cref="T:C1.C1Schedule.TimeScaleEnum" /> value.</remarks>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.TimeInterval">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.TimeScaleEnum" /> value specifying the time interval 
            which is used for displaying time slots in the DayView.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.StartDayTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying the beginning 
            of the working time.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.EndDayTime">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value specifying 
            the end of the working time.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.FirstDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value specifying minimum date allowed. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.LastDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value specifying maximum date allowed. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.Holidays">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> object which holds
            the list of holidays (non-working days in addition to weekends).
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.WeekendExceptions">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> object which holds
            the list of weekend days which should be working.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CalendarInfo.DateTimeKind">
      <summary>
            Gets or sets <see cref="P:C1.C1Schedule.CalendarInfo.DateTimeKind" /> specifying DateTime kind
            used for saving <see cref="T:System.DateTime" /> values.
            </summary>
      <remarks>
            This property only have an influence on the process of saving data to
            the AppointmentStorage.DataSource object and on export operations.
            All properties of the <see cref="T:C1.C1Schedule.Appointment" /> and <see cref="T:C1.C1Schedule.RecurrencePattern" />
            objects represent current system local time values.
            Set this property to DateTimeLind.Utc if you need to save
            data with universal time. In such case the data will be converted 
            to the local time and back at every read/write operation.
            </remarks>
    </member>
    <member name="T:C1.C1Schedule.WorkDays">
      <summary>
            The <see cref="T:C1.C1Schedule.WorkDays" /> class is a list of working days for the single week.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.WorkDays.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.WorkDays" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.WorkDays.AddRange(System.DayOfWeek[])">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.WorkDays" /> object.
            </summary>
      <param name="items">The array of <see cref="T:System.DayOfWeek" /> objects.</param>
    </member>
    <member name="T:C1.C1Schedule.Category">
      <summary>
            The <see cref="T:C1.C1Schedule.Category" /> class represents the category which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Category" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as category key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Category" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as category key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Category" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Category" /> object with specified text.
            </summary>
      <param name="text">The text of category.</param>
    </member>
    <member name="M:C1.C1Schedule.Category.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.CategoryCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.CategoryCollection" /> is a collection of <see cref="T:C1.C1Schedule.Category" /> 
            objects which represents all available categories in C1Schedule object model.
            By default it contains the set of predefined categories. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CategoryCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CategoryCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CategoryCollection.LoadDefaults">
      <summary>
            Restores the collection to its default state.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.CategoryCollection.LoadDefaults" /> method removes all 
            custom categories from the collection and leaves only the standard ones.
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.CategoryCollection.GetDefaults">
      <summary>
            Returns the list of predefined categories.
            </summary>
      <returns>The <see cref="T:System.Collections.Generic.List`1" /> object.</returns>
    </member>
    <member name="T:C1.C1Schedule.CategoryList">
      <summary>
            The <see cref="T:C1.C1Schedule.CategoryList" /> is a list of <see cref="T:C1.C1Schedule.Category" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.CategoryCollection" /> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.CategoryList" /> to associate the set of <see cref="T:C1.C1Schedule.Category" /> objects 
            with an <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Contact">
      <summary>
            The <see cref="T:C1.C1Schedule.Contact" /> class represents the person information.
            Not real class just sample for prototyping.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Contact" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as contact key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Contact" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as contact key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Contact" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Contact.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.ContactCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ContactCollection" /> is a collection of <see cref="T:C1.C1Schedule.Contact" /> 
            objects which represents all available contacts in C1Schedule object model.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ContactCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ContactCollection" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ContactList">
      <summary>
            The <see cref="T:C1.C1Schedule.ContactList" /> is a list of <see cref="T:C1.C1Schedule.Contact" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.ContactCollection" /> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.ContactList" /> to associate the set of <see cref="T:C1.C1Schedule.Contact" /> objects
            with an <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.DateList">
      <summary>
            The <see cref="T:C1.C1Schedule.DateList" /> class is a wrapper for the 
            <see cref="T:System.Collections.Generic.List`1" /> instance.
            At addition of the new value, it cuts off the time part of the value
            and ensures that the value is not present in the list yet.
            </summary>
      <remarks>This class uses binary search for all operations.</remarks>
    </member>
    <member name="M:C1.C1Schedule.DateList.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:C1.C1Schedule.DateList" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.DateList.Add(System.DateTime)">
      <summary>
            Adds new date to the list.
            </summary>
      <param name="item">The <see cref="T:System.DateTime" /> value to add.</param>
    </member>
    <member name="M:C1.C1Schedule.DateList.Clear">
      <summary>
            Clears all items from the wrapped list.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.DateList.Remove(System.DateTime)">
      <summary>
            Removes specified item from the wrapped list.
            </summary>
      <param name="item">The <see cref="T:System.DateTime" /> value to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.DateList.RemoveAt(System.Int32)">
      <summary>
            Removes item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item remove to.</param>
    </member>
    <member name="P:C1.C1Schedule.DateList.Count">
      <summary>
            Returns the number of items in the wrapped list.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.DateList.Items">
      <summary>
            Returns the reference to the wrapped list.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.DateList.Contains(System.DateTime)">
      <summary>
            Returns true if specified item exists in the wrapped list.
            </summary>
      <param name="item">An item to search for.</param>
      <returns>True if item exists in the wrapped list.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.Contains(System.DateTime[])">
      <summary>
            Returns true if either of specified items exists in the wrapped list.
            </summary>
      <param name="days">An array of <see cref="T:System.DateTime" /> values to search for.</param>
      <returns>True if at least one of specified items exists in the wrapped list.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.Contains(System.Collections.Generic.IList{System.DateTime})">
      <summary>
            Returns true if either of specified items exists in the wrapped list.
            </summary>
      <param name="days">A list of <see cref="T:System.DateTime" /> values to search for.</param>
      <returns>True if at least one of specified items exists in the wrapped list.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.GetPreviousDate(System.DateTime)">
      <summary>
            Returns the first item that is less than specified one.
            </summary>
      <param name="item">An item to search for.</param>
      <returns>The first item that is less than specified one; 
            or DateTime.MinValue if such item is not found.</returns>
    </member>
    <member name="M:C1.C1Schedule.DateList.GetNextDate(System.DateTime)">
      <summary>
            Returns the first item that is greater than specified one.
            </summary>
      <param name="item">An item to search for.</param>
      <returns>The first item that is greater than specified one; 
            or DateTime.MaxValue if such item is not found.</returns>
    </member>
    <member name="T:C1.C1Schedule.C1BrushStyleEnum">
      <summary>
            Specifies the different patterns available for brushes.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Transparent">
      <summary>
            Represents transparent brush.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Solid">
      <summary>
            Represents solid brush.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.BackwardDiagonal">
      <summary>
            A pattern of lines on a diagonal from upper right to lower left.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Cross">
      <summary>
            Specifies horizontal and vertical lines that cross.  
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.DiagonalCross">
      <summary>
            A pattern of crisscross diagonal lines. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.ForwardDiagonal">
      <summary>
            A pattern of lines on a diagonal from upper left to lower right. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Horizontal">
      <summary>
            A pattern of horizontal lines. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Vertical">
      <summary>
            A pattern of vertical lines. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Wave">
      <summary>
            Specifies horizontal lines that are composed of tildes. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.ZigZag">
      <summary>
            Specifies horizontal lines that are composed of zigzags. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.C1BrushStyleEnum.Percent20">
      <summary>
             Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:80.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.C1Brush">
      <summary>
            Wrapper class for brushes. Only for serialization/deserialization purposes.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.C1Brush" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,C1.C1Schedule.C1BrushStyleEnum)">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.C1Brush" /> object.
            </summary>
      <param name="foreColor">The foreground <see cref="T:System.Windows.Media.Color" /> value.</param>
      <param name="backColor">The background <see cref="T:System.Windows.Media.Color" /> value.</param>
      <param name="style">The <see cref="T:C1.C1Schedule.C1BrushStyleEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Windows.Media.Color)">
      <summary>
            Creates a new solid <see cref="T:C1.C1Schedule.C1Brush" /> object.
            </summary>
      <param name="backColor">The background <see cref="T:System.Windows.Media.Color" /> value.</param>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.ForeColor">
      <summary>
      </summary>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.BackColor">
      <summary>
      </summary>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.Style">
      <summary>
      </summary>
    </member>
    <member name="P:C1.C1Schedule.C1Brush.Brush">
      <summary>
      </summary>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for de-serialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.Equals(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.GetHashCode">
      <summary>
      </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Schedule.C1Brush.GetARGBstring(System.Windows.Media.Color)">
      <summary>
            Returns string representation of color in ARGB format.
            </summary>
      <param name="color">The <see cref="P:C1.C1Schedule.BaseObject.Color" />value.</param>
      <returns>The string representation of color in ARGB format</returns>
    </member>
    <member name="T:C1.C1Schedule.Label">
      <summary>
            The <see cref="T:C1.C1Schedule.Label" /> class represents the label which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Label" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as label key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Label" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as label key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Label" /> object with default parameters.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label" /> object with specified text.
            </summary>
      <param name="text">The text of the label.</param>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.String,System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label" /> object with specified text and menu caption.
            </summary>
      <param name="text">The text of the label.</param>
      <param name="menuCaption">The menu caption for displaying label in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Windows.Media.Color,System.String,System.String)">
      <summary>
            Creates custom <see cref="T:C1.C1Schedule.Label" /> object with specified color, text and menu caption.
            </summary>
      <param name="color">The color of the label.</param>
      <param name="text">The text of the label.</param>
      <param name="menuCaption">The menu caption for displaying label in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Label.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.LabelCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.LabelCollection" /> is a collection of <see cref="T:C1.C1Schedule.Label" /> 
            objects which represents all available labels in C1Schedule object model.
            </summary>
      <remarks>
        <para>By default it contains the following set of predefined labels:</para>
        <list type="bullet">
          <item>
            <term>
            </term>
            <description>None</description>
          </item>
          <item>
            <term>
            </term>
            <description>Important</description>
          </item>
          <item>
            <term>
            </term>
            <description>Business</description>
          </item>
          <item>
            <term>
            </term>
            <description>Personal</description>
          </item>
          <item>
            <term>
            </term>
            <description>Vacation</description>
          </item>
          <item>
            <term>
            </term>
            <description>Must Attend</description>
          </item>
          <item>
            <term>
            </term>
            <description>Deadline</description>
          </item>
          <item>
            <term>
            </term>
            <description>Travel Required</description>
          </item>
          <item>
            <term>
            </term>
            <description>Needs Preparation</description>
          </item>
          <item>
            <term>
            </term>
            <description>Birthday</description>
          </item>
          <item>
            <term>
            </term>
            <description>Anniversary</description>
          </item>
          <item>
            <term>
            </term>
            <description>Phone Call</description>
          </item>
          <para>It also allows adding of custom labels.</para>
        </list>
      </remarks>
    </member>
    <member name="F:C1.C1Schedule.LabelCollection.NoneLabelId">
      <summary>
            Defines Id of the None label.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.LabelCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.LabelCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.LabelCollection.LoadDefaults">
      <summary>
            Restores the collection to its default state.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.LabelCollection.LoadDefaults" /> method removes all 
            custom labels from the collection and leaves only the standard ones.
            </remarks>
    </member>
    <member name="T:C1.C1Schedule.LabelList">
      <summary>
            The <see cref="T:C1.C1Schedule.LabelList" /> is a list of <see cref="T:C1.C1Schedule.Label" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.LabelCollection" /> object 
            may be added to this list.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.RecurrenceTypeEnum">
      <summary>
            Determines the types of recurrent appointments.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Daily">
      <summary>
            The recurring appointment reoccurs on a daily basis.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Workdays">
      <summary>
            The recurring appointment reoccurs every working day.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly">
      <summary>
            The recurring appointment reoccurs on a monthly basis. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.MonthlyNth">
      <summary>
            The recurring appointment reoccurs every N months. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Weekly">
      <summary>
            The recurring appointment reoccurs on a weekly basis.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly">
      <summary>
            The recurring appointment reoccurs on an yearly basis.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth">
      <summary>
            The recurring appointment reoccurs every N years.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.WeekDaysEnum">
      <summary>
            Determines the set of days and groups of days for recurrence patterns. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.None">
      <summary>
            No specific value; the actual value is obtained from 
            the root <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Sunday">
      <summary>
            Specifies Sunday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Monday">
      <summary>
            Specifies Monday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Tuesday">
      <summary>
            Specifies Tuesday. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Wednesday">
      <summary>
            Specifies Wednesday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Thursday">
      <summary>
            Specifies Thursday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Friday">
      <summary>
            Specifies Friday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.Saturday">
      <summary>
            Specifies Saturday.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.WeekendDays">
      <summary>
            Specifies Saturday and Sunday (or what ever days according 
            to the settings of the C1Schedule).
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.WorkDays">
      <summary>
            Specifies work days (all days except weekend).
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekDaysEnum.EveryDay">
      <summary>
            Specifies every day of the week.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.WeekOfMonthEnum">
      <summary>
            Determines the week in a month in which the appointment will occur.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.First">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the first week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Second">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the second week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Third">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the third week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Fourth">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the fourth week in the month. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.WeekOfMonthEnum.Last">
      <summary>
            The recurring appointment will occur on the specified 
            day or days of the last week in the month. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.RecurrencePattern">
      <summary>
            The <see cref="T:C1.C1Schedule.RecurrencePattern" /> class contains information 
            that describes the recurrence pattern and range 
            of the associated <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.OnPropertyChanged(System.String)">
      <summary>
      </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.ParentAppointment">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Appointment" /> object which represents
            the master appointment for this <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Description">
      <summary>
            Gets the human-readable description of the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.GetDescription(System.Globalization.CultureInfo)">
      <summary>
            Gets the human-readable description of the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object
            according to the specified culture.
            </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object used for getting calendar specific strings.</param>
      <returns>The <see cref="T:System.String" /> value described the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.</returns>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.GetDescription(C1.C1Schedule.CalendarInfo)">
      <summary>
            Gets the human-readable description of the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object
            according to the specified <see cref="T:C1.C1Schedule.CalendarInfo" /> object.
            Use this method instead of <see cref="P:C1.C1Schedule.RecurrencePattern.Description" /> property if the <see cref="T:C1.C1Schedule.RecurrencePattern" /> 
            object does not belong to any <see cref="N:C1.C1Schedule" /> control.
            </summary>
      <param name="calendarInfo">The <see cref="T:C1.C1Schedule.CalendarInfo" /> object used for getting calendar specific strings.</param>
      <returns>The <see cref="T:System.String" /> value described the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object.</returns>
      <remarks>If the <see cref="T:C1.C1Schedule.RecurrencePattern" /> object does not belong to the <see cref="N:C1.C1Schedule" /> control,
            its Description property will return the default description using current user culture and calendar settings.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.RecurrenceType">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.RecurrenceTypeEnum" /> value
            determining the type of recurrence (daily, monthly, etc.).
            Default value is RecurrenceTypeEnum.Weekly.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Interval">
      <summary>
             Gets or sets the <see cref="T:System.Int32" /> value specifying 
             the interval between occurrences of the recurrence. 
             The <see cref="P:C1.C1Schedule.RecurrencePattern.Interval" /> property works in conjunction with 
             the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property to determine the cycle of the recurrence. 
             The maximum allowable value is 99 for weekly patterns and 999 for daily patterns.
             The default value is 1.
             </summary>
      <remarks>For example, if the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> is set 
             to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Daily" />, and the <see cref="P:C1.C1Schedule.RecurrencePattern.Interval" /> is set to 3, 
             the recurrence will occur every third day.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.EndTime">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the end time for the given occurrence of the recurrence pattern. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.StartTime">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the start time for the given occurrence of the recurrence pattern. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Duration">
      <summary>
            Gets or sets the <see cref="T:System.TimeSpan" /> value indicating 
            the duration of each occurrence in the recurrence pattern.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.PatternStartDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the start date of the recurrence pattern. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.PatternEndDate">
      <summary>
            Gets or sets the <see cref="T:System.DateTime" /> value indicating 
            the end date of the recurrence pattern. 
            </summary>
      <remarks>This property is optional but must be coordinated 
            with other properties when setting up a recurrence pattern. 
            If this property or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> property is set, 
            the pattern is considered to be finite, and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> 
            property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> is true. 
            The <see cref="P:C1.C1Schedule.RecurrencePattern.Interval" /> property must be set before 
            setting <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" />.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Occurrences">
      <summary>
            Gets or sets the number of occurrences for the recurrence pattern.
            This property allows the definition of a recurrence pattern that 
            is only valid for the specified number of subsequent occurrences. 
            For example, you can set this property to 10 for a formal training 
            course that will be held on the next ten Thursday evenings.
            The default value is 0.
            </summary>
      <remarks>This property must be coordinated with other properties 
            when setting up a recurrence pattern. 
            If the <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> property 
            or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> property is set, the pattern 
            is considered to be finite and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> is true.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Instance">
      <summary>
            Get or sets the <see cref="T:C1.C1Schedule.WeekOfMonthEnum" /> value specifying 
            the count for which the recurrence pattern is valid for a given interval. 
            This property is only valid for recurrences of 
            the <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.MonthlyNth" /> and 
            <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth" /> types and allows the definition 
            of a recurrence pattern that is only valid for the Nth occurrence, 
            such as "the 2nd Sunday in March" pattern. 
            The default value is WeekOfMonthEnum.First.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask">
      <summary>
            Gets or sets the <see cref="T:C1.C1Schedule.WeekDaysEnum" /> value representing the mask 
            for week days on which the recurring appointment occurs. 
            Monthly and yearly patterns are only valid for a single day. 
            Weekly patterns are only valid as the Or of the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" />.
            The default value is 0.
            </summary>
      <remarks>
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Daily" />, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property 
              can only be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.EveryDay" />; setting the property 
              to any other value will result in an exception.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Workdays" />, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property 
              can only be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.WorkDays" />; setting the property 
              to any other value will result in an exception.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Weekly" />, the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property 
              cannot be set to <see cref="F:C1.C1Schedule.WeekDaysEnum.None" />; doing so will result 
              in an exception being thrown.
            When the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> property is set to 
              <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly" /> or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly" />
              the <see cref="P:C1.C1Schedule.RecurrencePattern.DayOfWeekMask" /> property is not applicable.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.DayOfMonth">
      <summary>
            Gets or sets the number of the day in its respective month on which 
            each occurrence will occur. Applicable only when the <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> 
            property is set to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Monthly" /> 
            or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly" />.
            The default value is 1.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.MonthOfYear">
      <summary>
            Gets or sets the value indicating which month of the year is valid 
            for the specified recurrence pattern. Can be a number from 1 to 12.
            This property is only valid for recurrence patterns whose <see cref="P:C1.C1Schedule.RecurrencePattern.RecurrenceType" /> 
            property is set to <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.YearlyNth" /> 
            or <see cref="F:C1.C1Schedule.RecurrenceTypeEnum.Yearly" />.
            The default value is 1.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.NoEndDate">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> value indicating if
            the recurrence pattern is endless.
            The default value is True.
            </summary>
      <remarks>This property must be coordinated with other properties when 
            setting up a recurrence pattern. If the <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> property 
            or the <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> property is set, the pattern is considered 
            to be finite and the <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> property is false. 
            If neither <see cref="P:C1.C1Schedule.RecurrencePattern.PatternEndDate" /> nor <see cref="P:C1.C1Schedule.RecurrencePattern.Occurrences" /> is set, 
            the pattern is considered infinite and <see cref="P:C1.C1Schedule.RecurrencePattern.NoEndDate" /> is true.</remarks>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.Exceptions">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object which holds the list 
            of <see cref="T:C1.C1Schedule.Appointment" /> objects that define the exceptions to that series 
            of appointments. <see cref="T:C1.C1Schedule.Appointment" /> objects are added to 
            the <see cref="P:C1.C1Schedule.RecurrencePattern.Exceptions" /> whenever a property in the corresponding 
            <see cref="T:C1.C1Schedule.Appointment" /> object is altered.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.RecurrencePattern.RemovedOccurrences">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.AppointmentList" /> object which holds the list 
            of <see cref="T:C1.C1Schedule.Appointment" /> objects removed from that series of appointments. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.RecurrencePattern.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.Reminder">
      <summary>
            The <see cref="T:C1.C1Schedule.Reminder" /> class represents an object which allows users to keep track 
            of upcoming appointments by scheduling a pop-up dialog box to appear at a given time. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Reminder.ParentAppointment">
      <summary>
            Gets the owning <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Reminder.Caption">
      <summary>
            Gets the <see cref="T:System.String" /> value representing the window caption text 
            of the <see cref="T:C1.C1Schedule.Appointment" /> object which 
            the <see cref="T:C1.C1Schedule.Reminder" /> object is applied to.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Reminder.IsActive">
      <summary>
            Gets a value that determines if the <see cref="T:C1.C1Schedule.Reminder" /> object 
            is currently active (visible). 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Reminder.NextReminderDate">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value indicating the next time the specified 
            reminder will occur. 
            </summary>
      <remarks>The <see cref="P:C1.C1Schedule.Reminder.NextReminderDate" /> property value changes every time 
            the object's <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)" /> method is executed or when the user 
            clicks the Snooze button.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Reminder.OriginalReminderDate">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value specifying the original date and time 
            that the specified reminder is set to occur. 
            It is calculated using the following formula: 
            <see cref="P:C1.C1Schedule.Reminder.OriginalReminderDate" /> = <see cref="P:C1.C1Schedule.Appointment.Start" /> 
              - <see cref="P:C1.C1Schedule.Appointment.ReminderTimeBeforeStart" />.
            </summary>
      <remarks>This value corresponds to the original date and time 
            value before the <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)" /> method is executed or the user 
            clicks the Snooze button.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)">
      <summary>
            The <see cref="M:C1.C1Schedule.Reminder.Snooze(System.TimeSpan)" /> method notifies the scheduler to defer the triggering 
            of a reminder by the specified interval.
            </summary>
      <param name="delay">The <see cref="T:System.TimeSpan" />value specifying the interval
            of time to wait before displaying the reminder again.</param>
    </member>
    <member name="M:C1.C1Schedule.Reminder.Dismiss">
      <summary>
            Dismisses the current <see cref="T:C1.C1Schedule.Reminder" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Reminder.OnPropertyChanged(System.String)">
      <summary>
      </summary>
      <param name="propertyName">
      </param>
    </member>
    <member name="T:C1.C1Schedule.ReminderCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ReminderCollection" /> is a collection of all <see cref="T:C1.C1Schedule.Reminder" /> objects 
            that represents the reminders for all pending items.
            </summary>
      <remarks>Use the <see cref="P:C1.C1Schedule.C1ScheduleStorage.Reminders" /> property to get a reference  
            to the Reminders collection. 
            Reminders are created programmatically when a new <see cref="T:C1.C1Schedule.Appointment" /> object 
            is created with a reminder. For example, a reminder is created when 
            an <see cref="T:C1.C1Schedule.Appointment" /> object is created and the <see cref="P:C1.C1Schedule.Appointment.ReminderSet" />
            property is set to true. 
            </remarks>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.InsertItem(System.Int32,C1.C1Schedule.Reminder)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Reminder" /> object to insert.</param>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.RemoveItem(System.Int32)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.ClearItems">
      <summary>
            Overrides default behavior.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.SetItem(System.Int32,C1.C1Schedule.Reminder)">
      <summary>
            Overrides default behavior.
            </summary>
      <param name="index">The zero-based index of the item.</param>
      <param name="item">The <see cref="T:C1.C1Schedule.Reminder" /> object to set.</param>
    </member>
    <member name="M:C1.C1Schedule.ReminderCollection.Dispose">
      <summary>
            Releases all unmanaged resources.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ReminderEventArgs">
      <summary>
            Describes event data for <see cref="P:C1.C1Schedule.ReminderEventArgs.Reminder" /> object events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ReminderEventArgs.#ctor(C1.C1Schedule.Reminder)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ReminderEventArgs" /> 
            class with the specified <see cref="P:C1.C1Schedule.ReminderEventArgs.Reminder" /> object. 
            </summary>
      <param name="reminder">The <see cref="P:C1.C1Schedule.ReminderEventArgs.Reminder" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.ReminderEventArgs.Reminder">
      <summary>
            Gets the reminder which the event was raised for. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.CancelReminderEventHandler">
      <summary>
            Delegate for handling the cancelable event involving a single <see cref="T:C1.C1Schedule.Reminder" /> object. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The <see cref="T:C1.C1Schedule.CancelReminderEventArgs" /> 
            that contains the event data.</param>
    </member>
    <member name="T:C1.C1Schedule.CancelReminderEventArgs">
      <summary>
            Describes event data for cancelable Reminder events.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.CancelReminderEventArgs.#ctor(C1.C1Schedule.Reminder)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.CancelReminderEventArgs" />
            class with the specified <see cref="P:C1.C1Schedule.CancelReminderEventArgs.Reminder" /> object. 
            </summary>
      <param name="reminder">The <see cref="T:C1.C1Schedule.Reminder" /> object.</param>
    </member>
    <member name="P:C1.C1Schedule.CancelReminderEventArgs.Reminder">
      <summary>
            Gets the reminder which the event was raised for. 
            </summary>
    </member>
    <member name="P:C1.C1Schedule.CancelReminderEventArgs.Cancel">
      <summary>
            Set to true to cancel the operation.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Resource">
      <summary>
            The <see cref="T:C1.C1Schedule.Resource" /> class represents the resource which can be
            associated with the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Resource" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as resource key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Resource" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as resource key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor">
      <summary>
            Creates the new <see cref="T:C1.C1Schedule.Resource" /> object.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Resource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="T:C1.C1Schedule.ResourceCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.ResourceCollection" /> is a collection of <see cref="T:C1.C1Schedule.Resource" /> 
            objects which represents all available resources in C1Schedule object model.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.ResourceCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.ResourceCollection" /> class.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.ResourceList">
      <summary>
            The <see cref="T:C1.C1Schedule.ResourceList" /> is a list of <see cref="T:C1.C1Schedule.Resource" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.ResourceCollection" /> object 
            may be added to this list.
            Use the <see cref="T:C1.C1Schedule.ResourceList" /> to associate the set of <see cref="T:C1.C1Schedule.Resource" /> objects 
            with an <see cref="T:C1.C1Schedule.Appointment" /> object.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.StatusTypeEnum">
      <summary>
            Determines the type of status.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Free">
      <summary>
            This status means that a person is in the office and available to others. 
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Tentative">
      <summary>
            This status means that a person is in the office and tentatively available to others.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Busy">
      <summary>
            This status means that a person is in the office but unavailable to others.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.OutOfOffice">
      <summary>
            This status means that a person is out of the office and unavailable to others.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.Custom">
      <summary>
            This status represents all custom statuses added to the StatusCollection.
            </summary>
    </member>
    <member name="F:C1.C1Schedule.StatusTypeEnum.WorkingElsewhere">
      <summary>
            This status means that a person is working elsewhere.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.Status">
      <summary>
            The <see cref="T:C1.C1Schedule.Status" /> class represents an availability status 
            for the <see cref="T:C1.C1Schedule.Appointment" /> object. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Status" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Int32" /> value which should be used as status key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Status" /> class with the specified key.
            </summary>
      <param name="key">The <see cref="T:System.Guid" /> value which should be used as status key.</param>
      <remarks>Use this constructor if your business logic requires setting custom key value.
            Make sure that you use the correct constructor overload (with integer or Guid key value) and that key value is unique.</remarks>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with default parameters.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(C1.C1Schedule.StatusTypeEnum)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Schedule.Status" /> class 
            and initializes it with the specified type. 
            </summary>
      <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(C1.C1Schedule.StatusTypeEnum,System.Globalization.CultureInfo)">
      <summary>
            Creates a new instance of the <see cref="T:C1.C1Schedule.Status" /> class 
            and initializes it with the specified type. 
            </summary>
      <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.String)">
      <summary>
            Creates a new instance of the custom <see cref="T:C1.C1Schedule.Status" /> object with the specified text.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.String,System.String)">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with specified text and menu caption.
            </summary>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Windows.Media.Color,System.String,System.String)">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with specified color, 
            text and menu caption.
            </summary>
      <param name="color">The color which will be used for displaying status.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Windows.Media.Color,System.String,System.String,C1.C1Schedule.C1Brush)">
      <summary>
            Creates the new custom <see cref="T:C1.C1Schedule.Status" /> object with specified parameters.
            </summary>
      <param name="color">The color which will be used for displaying status.</param>
      <param name="text">The <see cref="T:System.String" /> value.</param>
      <param name="menuCaption">The menu caption for displaying status in dialogs.</param>
      <param name="brush">The brush which will be used for displaying status.</param>
    </member>
    <member name="M:C1.C1Schedule.Status.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Special constructor for deserialization.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</param>
      <param name="context">The context information.</param>
    </member>
    <member name="P:C1.C1Schedule.Status.StatusType">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value determining the type of the status. 
            </summary>
    </member>
    <member name="T:C1.C1Schedule.StatusCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.StatusCollection" /> is a collection of <see cref="T:C1.C1Schedule.Status" /> 
            objects which represents all available statuses in C1Schedule object model.
            By default it contains the set of predefined statuses. 
            </summary>
    </member>
    <member name="M:C1.C1Schedule.StatusCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.StatusCollection" /> class.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.StatusCollection.LoadDefaults">
      <summary>
            Restores the collection to its default state.
            </summary>
      <remarks>The <see cref="M:C1.C1Schedule.StatusCollection.LoadDefaults" /> method removes all the custom 
            appointment statuses from the collection and leaves only the standard ones.
            </remarks>
    </member>
    <member name="P:C1.C1Schedule.StatusCollection.Item(C1.C1Schedule.StatusTypeEnum)">
      <summary>
            Gets the <see cref="T:C1.C1Schedule.Status" /> object specified by the appointment status type. 
            For custom statuses returns the first occurrence.
            If there is no such <see cref="T:C1.C1Schedule.Status" /> object in the collection, returns null.
            </summary>
      <param name="type">The <see cref="T:C1.C1Schedule.StatusTypeEnum" /> value.</param>
      <returns>The <see cref="T:C1.C1Schedule.Status" /> object.</returns>
    </member>
    <member name="T:C1.C1Schedule.StatusList">
      <summary>
            The <see cref="T:C1.C1Schedule.StatusList" /> is a list of <see cref="T:C1.C1Schedule.Status" /> objects.
            Only objects existing in the owning <see cref="T:C1.C1Schedule.StatusCollection" /> object 
            may be added to this list.
            </summary>
    </member>
    <member name="T:C1.C1Schedule.TimeZoneInfo">
      <summary>
            The <see cref="T:C1.C1Schedule.TimeZoneInfo" /> class determines time zone properties.
            It can be used for conversion to/from utc times and local times and respect DST.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.TimeZones">
      <summary>
            Gets a list of all time zones defined in the local system.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.TimeZoneNames">
      <summary>
            Gets a string array of display time zone names supported in the local system.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.CurrentTimeZone">
      <summary>
            Gets the current time zone information.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.StandardName">
      <summary>
            The time zone's name during 'standard' time (i.e. not daylight savings).
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DaylightName">
      <summary>
            The time zone's name during daylight savings time (DST).
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DisplayName">
      <summary>
            The time zone's display name (e.g. '(GMT-05:00) Eastern Time (US and Canada)').
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.StandardOffset">
      <summary>
            Gets the standard offset from UTC as a TimeSpan.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DaylightOffset">
      <summary>
            Gets the daylight offset from UTC as a TimeSpan.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.StandardBias">
      <summary>
            Gets the difference, in minutes, between UTC and local time.
            UTC = local time + bias.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.TimeZoneInfo.DaylightBias">
      <summary>
            Gets the difference, in minutes, between UTC and local time (in daylight savings time).
            UTC = local time + bias.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.ToString">
      <summary>
            Gets display name of this time zone instance.
            </summary>
      <returns>Time zone standard name.</returns>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.GetTimeZone(System.String)">
      <summary>
            Returns a TimeZoneInfo instance for the time zone with supplied name.
            </summary>
      <remarks>This method searches by standard, daylight and display names.</remarks>
      <param name="name">A name of the time zone to search for.</param>
      <returns>TimeZoneInfo instance if any; null otherwise.</returns>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.ToLocalTime(System.DateTime)">
      <summary>
            Converts the value of the utc time to a local time in this time zone.
            </summary>
      <param name="utc">The UTC time to convert.</param>
      <returns>The local time.</returns>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.ToUniversalTime(System.DateTime)">
      <summary>
            Converts the value of the local time to UTC time.
            Note that there may be different possible interpretations at the daylight time boundaries.
            </summary>
      <param name="local">The local time to convert.</param>
      <returns>The UTC DateTime.</returns>
      <exception cref="T:System.NotSupportedException">Thrown if the method failed due to missing platform support.</exception>
    </member>
    <member name="M:C1.C1Schedule.TimeZoneInfo.CopyFrom(C1.C1Schedule.TimeZoneInfo)">
      <summary>
            Copies a time zone info form the specified <see cref="T:C1.C1Schedule.TimeZoneInfo" /> object into the current instance.
            </summary>
      <param name="info">
      </param>
    </member>
    <member name="T:C1.C1Schedule.Printing.DateAppointments">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> class represents the single calendar day
            with the <see cref="T:System.Collections.Generic.List`1" /> list of appointments.
            It is an auxiliary class for use in C1PrintDocument scripts.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointments.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> class.
            </summary>
      <param name="date">The <see cref="T:System.DateTime" /> value determining the represented date.</param>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.Date">
      <summary>
            Gets the <see cref="T:System.DateTime" /> value determining the represented date.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.HasAppointments">
      <summary>
            Returns true if current day contains one or more appointments.
            </summary>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.BusyStatus">
      <summary>
            Returns availability status of the current day.
            </summary>
      <remarks>Availability status is determined according to availability statuses of
            AllDay events for the representing day.</remarks>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointments.Appointments">
      <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1" /> list of all appointments for the represented day.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointments.AddAppointment(C1.C1Schedule.Appointment)">
      <summary>
            Adds a new <see cref="T:C1.C1Schedule.Appointment" /> object to the current day.
            </summary>
      <remarks>The specified <see cref="T:C1.C1Schedule.Appointment" /> object will be added 
            only if some part of the appointment falls on the current day.</remarks>
      <param name="appointment">The <see cref="T:C1.C1Schedule.Appointment" /> object to add.</param>
    </member>
    <member name="T:C1.C1Schedule.Printing.DateAppointmentsCollection">
      <summary>
            The <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> class represents 
            the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> collection 
            which can be used as a data source in C1PrintDocument documents.
            </summary>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,C1.C1Schedule.AppointmentCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointmentCollection">The <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection for getting appointments from.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,C1.C1Schedule.AppointmentCollection,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointmentCollection">The <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection for getting appointments from.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
      <param name="includePrivateAppointments">The <see cref="T:System.Boolean" /> value specifying whether to include private appointments into collection.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,C1.C1Schedule.AppointmentCollection,C1.C1Schedule.CalendarInfo,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointmentCollection">The <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection for getting appointments from.</param>
      <param name="calendarInfo">The <see cref="T:C1.C1Schedule.CalendarInfo" /> object containing calendar specific information.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
      <param name="includeWeekends">The <see cref="T:System.Boolean" /> value specifying whether to include weekend days into collection.</param>
      <param name="includePrivateAppointments">The <see cref="T:System.Boolean" /> value specifying whether to include private appointments into collection.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.IList{C1.C1Schedule.Appointment},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointments">The <see cref="T:System.Collections.Generic.IList`1" /> list of appointments.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.#ctor(System.DateTime,System.DateTime,System.Collections.Generic.IList{C1.C1Schedule.Appointment},C1.C1Schedule.CalendarInfo,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection
            for the specified date range with appointment from the specified <see cref="T:C1.C1Schedule.AppointmentCollection" /> collection.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <param name="appointments">The <see cref="T:System.Collections.Generic.IList`1" /> list of appointments.</param>
      <param name="calendarInfo">The <see cref="T:C1.C1Schedule.CalendarInfo" /> object containing calendar specific information.</param>
      <param name="includeEmptyDays">The <see cref="T:System.Boolean" /> value specifying whether to include days without appointments into collection.</param>
      <param name="includeWeekends">The <see cref="T:System.Boolean" /> value specifying whether to include weekend days into collection.</param>
    </member>
    <member name="P:C1.C1Schedule.Printing.DateAppointmentsCollection.Item(System.DateTime,System.DateTime)">
      <summary>
            Gets a new <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection containing 
            <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> objects for the specified date range.
            </summary>
      <remarks>Resulting collection always contains the subset of the current collection.
            All days out of this collection date range are omitted.</remarks>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the date range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the date range.</param>
      <returns>The <see cref="T:C1.C1Schedule.Printing.DateAppointmentsCollection" /> collection containing 
            <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> objects for the specified date range.</returns>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.GetIntervalAppointments(System.DateTime,System.DateTime,System.Boolean)">
      <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1" /> containing <see cref="T:C1.C1Schedule.Appointment" />
            objects for the specified DateTime range.
            </summary>
      <param name="start">The <see cref="T:System.DateTime" /> value representing the beginning of the DateTime range.</param>
      <param name="end">The <see cref="T:System.DateTime" /> value representing the end of the DateTime range.</param>
      <param name="includeAll">Specifies whether the returned list contains all appointments 
            intercepting the specified DateTime range. If this value is False, the returned list
            will contain only appointments starting within the specified DateTime range.</param>
      <returns>The <see cref="T:System.Collections.Generic.List`1" /> list containing 
            <see cref="T:C1.C1Schedule.Appointment" /> objects for the specified DateTime range.</returns>
    </member>
    <member name="M:C1.C1Schedule.Printing.DateAppointmentsCollection.GetKeyForItem(C1.C1Schedule.Printing.DateAppointments)">
      <summary>
            Returns key value for the specified item.
            </summary>
      <param name="item">A <see cref="T:C1.C1Schedule.Printing.DateAppointments" /> object.</param>
      <returns>The <see cref="T:System.DateTime" /> value used as a key.</returns>
    </member>
  </members>
</doc>