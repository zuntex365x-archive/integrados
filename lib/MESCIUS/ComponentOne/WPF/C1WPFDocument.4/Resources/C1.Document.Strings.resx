<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BarCodeAreaTooSmall" xml:space="preserve">
    <value>Barcode [{0}] cannot be drawn within specified bounds.</value>
    <comment>Barcode [{0}] cannot be drawn within specified bounds.</comment>
  </data>
  <data name="BarCodeBarHeightOutOfRange" xml:space="preserve">
    <value>BarHeight should be greater than 0.</value>
    <comment>BarHeight should be greater than 0.</comment>
  </data>
  <data name="BarCodeErrorInvalidData" xml:space="preserve">
    <value>Invalid barcode data.</value>
    <comment>Invalid barcode data.</comment>
  </data>
  <data name="BarCodeNarrowBarWidthOutOfRange" xml:space="preserve">
    <value>NarrowBarWidth should be greater than 0.</value>
    <comment>NarrowBarWidth should be greater than 0.</comment>
  </data>
  <data name="BarCodeNarrowWideRatioOutOfRange" xml:space="preserve">
    <value>NarrowWideRatio is out of range (should be 0 or between 2 and 3).</value>
    <comment>NarrowWideRatio is out of range (should be 0 or between 2 and 3).</comment>
  </data>
  <data name="BarCodeSupplementSpacingOutOfRange" xml:space="preserve">
    <value>SupplementSpacing should be greater than 0.</value>
    <comment>SupplementSpacing should be greater than 0.</comment>
  </data>
  <data name="DefaultPrintJobName" xml:space="preserve">
    <value>C1Document</value>
    <comment>C1Document</comment>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
    <comment>Error</comment>
  </data>
  <data name="ExportBmp" xml:space="preserve">
    <value>BMP images</value>
    <comment>BMP images</comment>
  </data>
  <data name="ExportDocx" xml:space="preserve">
    <value>Open XML Word</value>
    <comment>Open XML Word</comment>
  </data>
  <data name="ExportEmf" xml:space="preserve">
    <value>Compressed metafiles</value>
    <comment>Compressed metafiles</comment>
  </data>
  <data name="ExportGif" xml:space="preserve">
    <value>GIF images</value>
    <comment>GIF images</comment>
  </data>
  <data name="ExportHtml" xml:space="preserve">
    <value>HTML document</value>
    <comment>HTML document</comment>
  </data>
  <data name="ExportJpeg" xml:space="preserve">
    <value>JPEG images</value>
    <comment>JPEG images</comment>
  </data>
  <data name="ExportPdf" xml:space="preserve">
    <value>Adobe PDF</value>
    <comment>Adobe PDF</comment>
  </data>
  <data name="ExportPng" xml:space="preserve">
    <value>PNG images</value>
    <comment>PNG images</comment>
  </data>
  <data name="ExportRtf" xml:space="preserve">
    <value>RTF document</value>
    <comment>RTF document</comment>
  </data>
  <data name="ExportTiff" xml:space="preserve">
    <value>TIFF images</value>
    <comment>TIFF images</comment>
  </data>
  <data name="ExportXls" xml:space="preserve">
    <value>Microsoft Excel</value>
    <comment>Microsoft Excel</comment>
  </data>
  <data name="ExportXlsx" xml:space="preserve">
    <value>Open XML Excel</value>
    <comment>Open XML Excel</comment>
  </data>
  <data name="Null" xml:space="preserve">
    <value>Null</value>
    <comment>Null</comment>
  </data>
  <data name="PageRangeAllPages" xml:space="preserve">
    <value>All</value>
    <comment>All</comment>
  </data>
  <data name="PageRangeInvalidRange" xml:space="preserve">
    <value>The first page number must be less or equal than last.</value>
    <comment>The first page number must be less or equal than last.</comment>
  </data>
  <data name="PageRangeOutOfRange" xml:space="preserve">
    <value>"{0}" specifies invalid page range, it should contain page numbers from 1 to {1}</value>
    <comment>"{0}" specifies invalid page range, it should contain page numbers from 1 to {1}</comment>
  </data>
  <data name="PageRangeSyntaxError" xml:space="preserve">
    <value>"{0}" specifies invalid page range, use the form 1, 5-7, 12-</value>
    <comment>"{0}" specifies invalid page range, use the form 1, 5-7, 12-</comment>
  </data>
  <data name="ParameterCanNotBeEmpty" xml:space="preserve">
    <value>Value of [{0}] parameter cannot be empty.</value>
    <comment>Value of [{0}] parameter cannot be empty.</comment>
  </data>
  <data name="ParameterCanNotBeNull" xml:space="preserve">
    <value>Value of [{0}] parameter cannot be null.</value>
    <comment>Value of [{0}] parameter cannot be null.</comment>
  </data>
  <data name="ParameterInvalidValue" xml:space="preserve">
    <value>Parameter [{0}] has [{1}] type, [{2}]({3}) cannot be used as parameter value.</value>
    <comment>Parameter [{0}] has [{1}] type, [{2}]({3}) cannot be used as parameter value.</comment>
  </data>
  <data name="PdfOptionsErrorOwnerPwdMismatch" xml:space="preserve">
    <value>Owner passwords you typed do not match.</value>
    <comment>Owner passwords you typed do not match.</comment>
  </data>
  <data name="PdfOptionsErrorUserPwdMismatch" xml:space="preserve">
    <value>User passwords you typed do not match.</value>
    <comment>User passwords you typed do not match.</comment>
  </data>
  <data name="PdfOptionsRestrictionsWarning" xml:space="preserve">
    <value>If owner password is not specified, any document restrictions will be ignored. Do you want to continue?</value>
    <comment>If owner password is not specified, any document restrictions will be ignored. Do you want to continue?</comment>
  </data>
  <data name="SaveAsFmt" xml:space="preserve">
    <value>Save as {0}</value>
    <comment>Save as {0}</comment>
  </data>
  <data name="SSRSExportBmp" xml:space="preserve">
    <value>Bmp image</value>
    <comment>Bmp image</comment>
  </data>
  <data name="SSRSExportCsv" xml:space="preserve">
    <value>CSV</value>
    <comment>CSV</comment>
  </data>
  <data name="SSRSExportDocx" xml:space="preserve">
    <value>Open XML Word</value>
    <comment>Open XML Word</comment>
  </data>
  <data name="SSRSExportEmf" xml:space="preserve">
    <value>Enhanced metafile</value>
    <comment>Enhanced metafile</comment>
  </data>
  <data name="SSRSExportExcel" xml:space="preserve">
    <value>Microsoft Excel</value>
    <comment>Microsoft Excel</comment>
  </data>
  <data name="SSRSExportGif" xml:space="preserve">
    <value>Gif image</value>
    <comment>Gif image</comment>
  </data>
  <data name="SSRSExportJpeg" xml:space="preserve">
    <value>Jpeg image</value>
    <comment>Jpeg image</comment>
  </data>
  <data name="SSRSExportMhtml" xml:space="preserve">
    <value>Web archive (MHTML)</value>
    <comment>Web archive (MHTML)</comment>
  </data>
  <data name="SSRSExportPdf" xml:space="preserve">
    <value>Adobe PDF</value>
    <comment>Adobe PDF</comment>
  </data>
  <data name="SSRSExportPng" xml:space="preserve">
    <value>Png image</value>
    <comment>Png image</comment>
  </data>
  <data name="SSRSExportTiff" xml:space="preserve">
    <value>Tiff image</value>
    <comment>Tiff image</comment>
  </data>
  <data name="SSRSExportWord" xml:space="preserve">
    <value>Microsoft Word</value>
    <comment>Microsoft Word</comment>
  </data>
  <data name="SSRSExportXlsx" xml:space="preserve">
    <value>Open XML Excel</value>
    <comment>Open XML Excel</comment>
  </data>
  <data name="SSRSInvalidParameters" xml:space="preserve">
    <value>Report cannot be generated because invalid parameters were specified.</value>
    <comment>Report cannot be generated because invalid parameters were specified.</comment>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
    <comment>Warning</comment>
  </data>
</root>