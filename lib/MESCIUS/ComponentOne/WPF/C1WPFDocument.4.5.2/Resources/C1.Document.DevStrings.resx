<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AliasAlreadyUsed" xml:space="preserve">
    <value>Alias [{0}] cannot be used for type [{1}] because it is already used.</value>
    <comment>Alias [{0}] cannot be used for type [{1}] because it is already used.</comment>
  </data>
  <data name="CanNoCreatePrintJob" xml:space="preserve">
    <value>Can not create print job for [{0}] printer.
Exception:
{1}</value>
    <comment>Can not create print job for [{0}] printer.
Exception:
{1}</comment>
  </data>
  <data name="CanNotResolveType" xml:space="preserve">
    <value>Type [{0}] specified for [{1}] cannot be resolved.</value>
    <comment>Type [{0}] specified for [{1}] cannot be resolved.</comment>
  </data>
  <data name="CannotSerializeObject" xml:space="preserve">
    <value>Cannot serialize object of type [{0}].</value>
    <comment>Cannot serialize object of type [{0}].</comment>
  </data>
  <data name="ChildRecNotFound" xml:space="preserve">
    <value>[0x{0:X2}] record does not contain [0x{1:X2}] record.</value>
    <comment>[0x{0:X2}] record does not contain [0x{1:X2}] record.</comment>
  </data>
  <data name="DocumentLocationNotSpecified" xml:space="preserve">
    <value>C1SSRSDocumentSource.DocumentLocation property not specified.</value>
    <comment>C1SSRSDocumentSource.DocumentLocation property not specified.</comment>
  </data>
  <data name="ExpectedEnumerationType" xml:space="preserve">
    <value>Type [{0}] is not enumeration.</value>
    <comment>Type [{0}] is not enumeration.</comment>
  </data>
  <data name="IC1SerializableNotSupported" xml:space="preserve">
    <value>Type [{0}] does not support IC1Serializable interface.</value>
    <comment>Type [{0}] does not support IC1Serializable interface.</comment>
  </data>
  <data name="IdAlreadyUsed" xml:space="preserve">
    <value>Id [{0}] cannot be used for type [{1}] because it is already used.</value>
    <comment>Id [{0}] cannot be used for type [{1}] because it is already used.</comment>
  </data>
  <data name="IListNotSupported" xml:space="preserve">
    <value>Type [{0}] does not support IList interface.</value>
    <comment>Type [{0}] does not support IList interface.</comment>
  </data>
  <data name="InvalidBarCodeNone" xml:space="preserve">
    <value>RenderBarCode.BarCodeType cannot be set to BarCodeType.None.</value>
    <comment>RenderBarCode.BarCodeType cannot be set to BarCodeType.None.</comment>
  </data>
  <data name="InvalidPaperSize" xml:space="preserve">
    <value>Invalid paper size with code {0}.</value>
    <comment>Invalid paper size with code {0}.</comment>
  </data>
  <data name="InvalidString" xml:space="preserve">
    <value>String [{0}] does not represent an instance of type [{1}].</value>
    <comment>String [{0}] does not represent an instance of type [{1}].</comment>
  </data>
  <data name="ItemAlreadyHasOwner" xml:space="preserve">
    <value>The item already has the owner.</value>
    <comment>The item already has the owner.</comment>
  </data>
  <data name="NameAlreadyExists" xml:space="preserve">
    <value>Item with name [{0}] already exists.</value>
    <comment>Item with name [{0}] already exists.</comment>
  </data>
  <data name="NameCantBeNullOrEmpty" xml:space="preserve">
    <value>Name of DictionaryItem can't be null or empty.</value>
    <comment>Name of DictionaryItem can't be null or empty.</comment>
  </data>
  <data name="NonPaginatedNotSupported" xml:space="preserve">
    <value>{0} does not support non Paginated mode of generation.</value>
    <comment>{0} does not support non Paginated mode of generation.</comment>
  </data>
  <data name="NoParameterlessConstructor" xml:space="preserve">
    <value>Type [{0}] has no parameterless constructor.</value>
    <comment>Type [{0}] has no parameterless constructor.</comment>
  </data>
  <data name="ObjectAlreadyAddedToDocument" xml:space="preserve">
    <value>Object already added to the document.</value>
    <comment>Object already added to the document.</comment>
  </data>
  <data name="PaginatedNotSupported" xml:space="preserve">
    <value>{0} does not support Paginated mode of generation.</value>
    <comment>{0} does not support Paginated mode of generation.</comment>
  </data>
  <data name="PrintError" xml:space="preserve">
    <value>Error while printing on [{0}] printer.</value>
    <comment>Error while printing on [{0}] printer.</comment>
  </data>
  <data name="ReadObjectError" xml:space="preserve">
    <value>Exception during deserialize [{0}] node, error:
{1}</value>
    <comment>Exception during deserialize [{0}] node, error:
{1}</comment>
  </data>
  <data name="ReferenceAlreadyResolved" xml:space="preserve">
    <value>Reference [{0}] already resolved.</value>
    <comment>Reference [{0}] already resolved.</comment>
  </data>
  <data name="TypeAlreadyAliased" xml:space="preserve">
    <value>Alias [{0}] cannot be used for type [{1}] because this type already has a registered alias.</value>
    <comment>Alias [{0}] cannot be used for type [{1}] because this type already has a registered alias.</comment>
  </data>
  <data name="TypeNameNotSpecified" xml:space="preserve">
    <value>[{0}] has no type specified.</value>
    <comment>[{0}] has no type specified.</comment>
  </data>
  <data name="UnknownType" xml:space="preserve">
    <value>Unknown type [{0}].</value>
    <comment>Unknown type [{0}].</comment>
  </data>
  <data name="XlsFilterInvalidToleranceValue" xml:space="preserve">
    <value>Value must be from [0] to [10]</value>
    <comment>Value must be from [0] to [10]</comment>
  </data>
  <data name="DocumentSourceBusy" xml:space="preserve">
    <value>The {0} is busy.</value>
    <comment>The {0} is busy.</comment>
  </data>
</root>