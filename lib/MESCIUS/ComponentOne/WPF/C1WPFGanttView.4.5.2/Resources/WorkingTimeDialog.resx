<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GroupHeader_RangeOfRecurrence" xml:space="preserve">
    <value>Range of Recurrence</value>
  </data>
  <data name="GroupHeader_SelectCalendarException" xml:space="preserve">
    <value>Select a calendar exception:</value>
  </data>
  <data name="GroupHeader_SelectWorkWeek" xml:space="preserve">
    <value>Select a work week:</value>
  </data>
  <data name="GroupHeader_SetWorkingTimes" xml:space="preserve">
    <value>Set working times:</value>
  </data>
  <data name="GroupHeader_SpecificWeekTimes" xml:space="preserve">
    <value>Set days to these specific working times:</value>
  </data>
  <data name="ExceptionDefaultName" xml:space="preserve">
    <value>Exception {0}</value>
  </data>
  <data name="TabHeader_Calendar" xml:space="preserve">
    <value>Calendar</value>
  </data>
  <data name="TabHeader_Exceptions" xml:space="preserve">
    <value>Exceptions</value>
  </data>
  <data name="TabHeader_WorkWeeks" xml:space="preserve">
    <value>Work Weeks</value>
  </data>
  <data name="Text_BasedOn" xml:space="preserve">
    <value>Based on:</value>
  </data>
  <data name="Text_Calendar" xml:space="preserve">
    <value>calendar</value>
  </data>
  <data name="Text_CalendarName" xml:space="preserve">
    <value>Calendar Name:</value>
  </data>
  <data name="Text_ClickDayNotes" xml:space="preserve">
    <value>Click a day to see its working times:</value>
  </data>
  <data name="Text_CreateEmptyCalendar" xml:space="preserve">
    <value>Create an empty new calendar</value>
  </data>
  <data name="Text_EndAfter" xml:space="preserve">
    <value>End after:</value>
  </data>
  <data name="Text_EndBy" xml:space="preserve">
    <value>End by:</value>
  </data>
  <data name="Text_FinishDate" xml:space="preserve">
    <value>Finish date:</value>
  </data>
  <data name="Text_ForCalendar" xml:space="preserve">
    <value>For calendar:</value>
  </data>
  <data name="Text_HonorDefaultExceptions" xml:space="preserve">
    <value>Honor default calendar exceptions</value>
  </data>
  <data name="Text_MakeCopy" xml:space="preserve">
    <value>Make a copy of</value>
  </data>
  <data name="Text_NonworkingTime" xml:space="preserve">
    <value>Nonworking time</value>
  </data>
  <data name="Text_NonworkingWeekTimes" xml:space="preserve">
    <value>Set days to nonworking time</value>
  </data>
  <data name="Text_SelectDays" xml:space="preserve">
    <value>Select day(s):</value>
  </data>
  <data name="Text_SpecificWeekTimes" xml:space="preserve">
    <value>Set days to these specific working times:</value>
  </data>
  <data name="Text_SpecificWorkingTimes" xml:space="preserve">
    <value>Specific working times</value>
  </data>
  <data name="Text_StartDate" xml:space="preserve">
    <value>Start date:</value>
  </data>
  <data name="Text_UseDefaultWorkingTimes" xml:space="preserve">
    <value>Use default working times for these days</value>
  </data>
  <data name="Text_WorkingTimesFor" xml:space="preserve">
    <value>Working times for {0}:</value>
  </data>
  <data name="WorkWeekDefaultName" xml:space="preserve">
    <value>Work Week {0}</value>
  </data>
  <data name="GroupHeader_When" xml:space="preserve">
    <value>When</value>
  </data>
  <data name="Text_And" xml:space="preserve">
    <value>and</value>
  </data>
  <data name="Text_DayOfMonth" xml:space="preserve">
    <value>Day of month is</value>
  </data>
  <data name="Text_DayOfMonthNotes" xml:space="preserve">
    <value>0 means every day of month negative values count days from the end of month.</value>
  </data>
  <data name="Text_EveryNth" xml:space="preserve">
    <value>Every n-th :</value>
  </data>
  <data name="Text_MonthOfYear" xml:space="preserve">
    <value>Month of year is</value>
  </data>
  <data name="Text_MonthOfYearNotes" xml:space="preserve">
    <value>0 means every month of year.</value>
  </data>
  <data name="Text_Occurrence" xml:space="preserve">
    <value>occurrence</value>
  </data>
  <data name="Text_RecurEvery" xml:space="preserve">
    <value>Recur every</value>
  </data>
  <data name="Text_WeekOfMonth" xml:space="preserve">
    <value>week of month on:</value>
  </data>
  <data name="Text_From" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="Text_To" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="Text_DefaultCalendar" xml:space="preserve">
    <value>(Default)</value>
  </data>
  <data name="Text_CalendarDefaultName" xml:space="preserve">
    <value>Calendar {0}</value>
  </data>
  <data name="Text_CalendarWorkWeekFormat" xml:space="preserve">
    <value>'{0}' calendar, '{1}' work week.</value>
  </data>
  <data name="Text_NonworkingTimesHeader" xml:space="preserve">
    <value>{0:D} is nonworking.</value>
  </data>
  <data name="Text_CalendarExceptionFormat" xml:space="preserve">
    <value>'{0}' calendar, '{1}' exception.</value>
  </data>
  <data name="Error_IncorrectIntervalError" xml:space="preserve">
    <value>Beginning of the time interval must be less than or equal to the interval ending time.</value>
  </data>
  <data name="Error_OverlappedIntervalsError" xml:space="preserve">
    <value>Time intervals must not overlap.</value>
  </data>
  <data name="Error_IncorrectWorkingTimeError" xml:space="preserve">
    <value>You should select at least one working day.</value>
  </data>
  <data name="Title_CalendarWeekTimes" xml:space="preserve">
    <value>Calendar Week Working Times</value>
  </data>
  <data name="Error_AllNonWorkingTimes" xml:space="preserve">
    <value>You can't set entrie project as nonworking times.</value>
  </data>
</root>